	.TITLE AST2RD-ASTERIODS 2 (28503)
	.ASECT
	.ENABLE AMA
	.RADIX 16
;***********************************************
;*
;*DATE INITIATED:		12-MARCH-80
;*
;*PROJECT CHARGE #:		28503
;*
;*DISK #:			73 (BACKUP B4),((77 WHEN ASSEMBLING))
;*
;*HARDWARE REQUIREMENTS:	VECTOR HARDWARE WITH PAGE SELECT ON 2
;*
;*
;*MEMORY REQUIREMENTS:		VECTOR RAM:  2000-27FF (2K)
;*				VECTOR ROM:  2800-3FFF (4K)
;*				PROGRAM ROM: 4000-7FFF (16K)
;*				SCRATCH:     PAGE 0
;*				STACK:	     PAGE 1
;*					     PAGE 2
;;*					     PAGE 3
;*
;*INTERRUPTS:			IRQ (4 MS)
;*
;*ASSEMBLY COMMAND STRING:	R MAC65
;*				ASTROD/A/C
;*
;*LINK COMMAND:			OUTPUT(S)=DX1:AS2ROM,AST2RD,VGUTR2,AS2MSG,AS2POK,AS2TST,AS2COI
;*					DX1:AS2PO2,AS2PO3
;*
;*SPECIAL ASSEMBLY INSTRUCTIONS: AS2DEC MUST BE SOMEWHERE IN THE SYSTEM
;*
;*PROGRAM DESCRIPTION:		THIRD PERSON VIEW OF TWO SPACE SHIPS
;*				WITH ASTEROIDS THROUGHOUT SPACE.
;*				LARGE ASTEROIDS BREAK UP WHEN
;*				HIT AND SMALLER ASTEROIDS DISINTEGRATE
;*				WHEN HIT. A LARGE AND SMALL
;*				SAUCER ALSO APPEAR TO SHOOT AT
;*				THE SHIP.
;*				INDESTRUCTIBLE KILLER MINES PROVIDE PROBLEMS.
;*				COMETS COME STRAIGT AT SHIPS, TURN INTO HEAT SEEKING
;*				ASTERISKS WHEN THEY REACH THE EDGE OF SCREEN
;*				VERSIONS INCLUDE:
;*				2 PLAYER ASTEROIDS, NOT DIE WHEN OTHER PLAYER SHOOTS YOU
;*				COOPERATIVE DEFENSE
;*
;*CONTROLS:			TWO SETS OF:ROTATE LEFT, ROTATE RIGHT, THRUST, FIRE
;*				AND SHIELD BUTTONS
;*
;*******************************************************
	.SBTTL ************************
	.SBTTL *
	.SBTTL *PROGRAMMER: RICHARD MAURER
	.SBTTL *	    OWEN RUBEN
	.SBTTL *
	.SBTTL ************************
	.PAGE
	.SBTTL GLOBAL SYMBOL DECLARATIONS
;
;ENTRY POINTS
;
	.GLOBL START,NAMSEL,STRTLOK,SUPRC,POPSN
	.GLOBL DIGITS,FLASHCOL,SMINVEL,GTOPTN
	.GLOBL LANGOFF,BIGBANG,PICSEL
	.GLOBL HSCBEG,PICADH,PICADL
	.GLOBL ROTAST,START2,FAN,ROCPIC

;
;
;EXTERNAL ENTRY POINTS
;
;EAROM ROUTINE ENTRY/EXIT POINTS
	.GLOBL EAUPD,EAZERO,REHIIN,WRHIIN,EASETUP
	.GLOBL EAFLG,WRBOOK,EAZBOO,EAZHIS
	.GLOBL BOOK,STESTA,MESGPOS
	.GLOBL SAUCSN,PL0FIR,PL1FIR,EXTLIF,EXPLOS,THRUSN
	.GLOBL EN0SN,EN1SN,SH0SN,SH1SN,FU0SN,FU1SN
	.GLOBL VGHALT,VGVCTR,VGRTSL,VGMSGA,VGMSGU		;UTILITY ROUTINES(SEE VECUT.MAC)
	.GLOBL VGJMPL,VGJSRL,WNDSET,HUM,SFREQ,FRAME,COMTIMER
	.GLOBL VGADD,VGCNTR
	.GLOBL VGHEX,VGHEX1,VGHEXZ,VGVTR,VGNEG,VGVTR5
	.GLOBL VGSCAL,VGSCA1,VGAD1B
	.GLOBL VGSTAT,VGSTA1,VGCHAR
	.GLOBL VGSETZ
;AS2ROM GLOBALS
	.GLOBL LIVEPAR,LIVUDPAR,LLIVESHIP,ULIVESHIP
	.GLOBL LLIVUDSHIP,ULIVUDSHIP,CNTHSC,QHEADER
	.GLOBL FRCFLD,FRCFL8,FRCFL9
	.GLOBL RHTSHP,LFTSHP,PLTLIV,LFUDSHIP,PAIRUD
	.GLOBL PL0SET,PL1SET,CMSBSET,CMBSET
	.GLOBL PYR11,PYR12,PYR13,CVR11,CVR12,CVR13
	.GLOBL CVR21,CVR22,CVR23,VROCK1,VROCK2,VROCK3,VROCK4
	.GLOBL SAU11,SAU12,SAU13,SAUCRC
	.GLOBL EXP9,EXP10,EXP11,EXP12,EXP13,EXP14,EXP15,EXP16
	.IRPC X,<0123>
	.GLOBL ROCK'X'1,ROCK'X'2,PYRM'X'1,CUBE'X'1,HEXA'X'1
	.GLOBL PLN'X'1,PENT'X'1
	.ENDR
	.GLOBL STAR01,STAR11,STAR21,STAR31
	.GLOBL CUBNM8,CUBNM9
	.GLOBL CNTSCL,SHOT,DWARF,COMET,SHIELD
	.GLOBL FLARE
;OTHER POORLY PLACED GLOBALS
	.GLOBL POWERON,TOTOBJ
	.GLOBL SHIPS,EXPPIC,ROCKA,SAUCER	;PICTURES OF SHIP AND ASTEROIDS
	.GLOBL MINE,SCSHSP,PRTDAMAGE,IANGLE,SANGLE
	.GLOBL VGMSG,VGMSG5,VGMSG3,VGMSG4	;MESSAGE PROCESSOR
	.GLOBL PWRON,VGADD2,VGAD2B		;ENTRY POINTS FOR AS2TST.MAC
	.GLOBL EXPSHP,EXPDIR,UEXPDIR		;EXPLODING SHIP PICTURES
	.GLOBL ASTMG8,ASTMG9
	.GLOBL SINCOS,TOGDRONE
	.GLOBL XPLPIECE
	.GLOBL IRQ,MOOLAH		;SO CAN SEE ON LINKER LIST
	.GLOBL INISOU,MODSND,GATES
	.GLOBL DIGITS
	.GLOBL HSCBEG
;GLOBAL VARIABLES
;EAROM VARIABLES
	.GLOBL EAZFLG,EAREQU,EARWRQ,EABAD,EABUF
	.GLOBL EAFLG,EABC,EAX,EACNT,EASEL
	.GLOBL EACS,EASRCE
;BOOKKEEPPING VARIABLES (FOR EA ROM)
	.GLOBL PLAYTIME,GAMES1,ONTIME,BONTIME,GTIME,GAME
	.GLOBL NAMES,SPINT,FLSFLG
	.GLOBL INITL,HSCORE
	.GLOBL UPDOWN			;MESSAGES, ESPECIALLY FOR COCKTAIL
	.GLOBB FREXPLOSION,OPTN1,LANG,ATSTG,$USE
;GLOBALS IN VGROM
	.GLOBL WNDSE8,WNDSE9
;
	.GLOBL CNTRS8,CNTRS9
	.GLOBL SAU11,SAU12,SAU13
;ZERO PAGE GLOBALS
;
	.GLOBB TEMPA,TEMPB,TEMP12,TEMPC,SYNC
	.GLOBB ATRACT,INTRPT,DIFF,HITS,NXTBON
	.GLOBB OLDVEC,SAUMIN,BONLVA
	.GLOBB XCOMP,TEMP1,VGLIST,VGBRIT,TEMP10,TEMP11,TEMP8,TEMP9
	.GLOBB TEMP3,UPDFLG,FRAME,TEMP2,TEMP4,TEMP5,TEMP6,TEMP7
	.GLOBB $CCTIM,$$CRDT,$CMODE,$PSTSL,$LMTIM,$CNCT,$CNSTT,$INTCT
	.GLOBB $LAM,$BCCNT,$BC
	.GLOBL SAUCIX,OBJXH,OBJXL,OBJYH,OBJYL,WAVE,SUPRSAC
	.GLOBL XINC,YINC,SUPRTIM,SUPRDIS,NEXTEX,SECOND
	.GLOBB OBJ,$TCMFLG
	.GLOBL $LMBIT,$COINA,ASTERS,NROCKS,MODNUM
	.GLOBL HSCFLG,ZSAUCER,ZCOMINES,NMCOMINES
;OTHER GLOBALS.......................
	.INCLUDE HLL65F
	.INCLUDE AS2DEC		;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

	.INCLUDE VGMC	;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	.SBTTL LABS
	.MACRO LABS DX,DY,SCALE
	CNTR 0
	VCTR DX,DY,0
	.ENDM

;
;VCTRSC-DRAW VECTOR INSTRUCTION
;THIS INSTRUCTION DRAWS A VECTOR ON THE DISPLAY AREA
;RELATIVE TO THE PREVIOUS BEAM POSITION BEFORE THE
;INSTRUCTION IS EXECUTED. DX IS THE CHANGE IN BEAM X
;POSITION; DY IS THE CHANGE IN BEAM Y POSITION; ZZ
;SPECIFIES THE BEAM INTENSITY (0 THROUGH 7., 0 IS
;NO INTENSITY, 7. IS BRIGHTEST INTENSITY).
;...SCAL IS SCALE TO BE SET (1,2,4,8)
;
	.SBTTL VCTRSC
	.MACRO VCTRSC DX,DY,ZZ
	.IF GE,DX
	...1=DX+<...SCAL/2>/...SCAL
	...6=...1
	.IFF
	...1=DX-<...SCAL/2>/...SCAL
	...6=-...1
	.ENDC
	.IF GE,DY
	...2=DY+<...SCAL/2>/...SCAL
	...7=...2
	.IFF
	...2=DY-<...SCAL/2>/...SCAL
	...7=-...2
	.ENDC
	...5=...6!...7
	.IF EQ,...5&^H0FFE1
	.WORD ^H4000+<ZZ*^H20>+<...1/2&^H1F>+<...2*^H80&^H1F00>
	.MEXIT
	.ENDC
	.WORD ...2&^H1FFF,<ZZ*^H2000>+<...1&^H1FFF>
	.ENDM
;ASCIN - TAKE AN ASCII STRING AND MAP 3 CHARACTERS TO 2 BYTES
;
;THIS MACRO PACKS 3 ASCII CHARACTERS (BLANK, A THRU Z,0,1, OR 2) INTO 2
;BYTES IN THE FORMAT
;	AAAAABBB BBCCCCCD
;WHERE D=1 MEANS END OF LIST
;	AAAAA,BBBBB,CCCCC=INDEX AS FOLLOWS
;	0=END OF LIST
;	1=BLANK
;	2=0
;	3=1
;	4=2
;	5=A
;	ETC.
	.MACRO ASCIN STRING
	...N=0
	.NCHR ...C,<STRING>
	.ENABL M68
	.IRPC ...5,<STRING>
	...4=''...5
	...C=...C-1
	...3=0
	.IIF EQ,...4-^H20,...3=1
	.IF GE,...4-^H30
	.IIF LT,...4-^H33,...3=...4-^H30+2
	.ENDC
	.IF GE,...4-^H41
	.IIF LT,...4-^H5B,...3=...4-^H41+5
	.ENDC
	.IIF EQ,...N,...1=...3
	.IIF EQ,...N-1,...2=...3
	...N=...N+1
	.IF EQ,...N-3
	...N=0
	.IIF EQ,...C,.WORD <...1*^H800>+<...2*^H40>+<...3*2>+1
	.IIF NE,...C,.WORD <...1*^H800>+<...2*^H40>+<...3*2>
	.ENDC
	.ENDM
	.IIF EQ,...N-1,.WORD ...1*^H800
	.IIF EQ,...N-2,.WORD <...1*^H800>+<...2*^H40>
	.DSABL M68
	.ENDM
	.RADIX 16


	.MACRO COLOR COL,LUM
	.BYTE <LUM*^H10>+COL,^H64
	.ENDM
;
;COLOR TABLE
;
BLACK	==0
BLUE	==1
GREEN	==2
GRBLUE	==3
RED	==4
VIOLET	==5
YELLOW	==6
WHITE	==7
;
RODCOL ==YELLOW
PL0COL	==RED			;PLAYER 0 COLOR
PL1COL	==GREEN			;PLAYER 1 COLOR
	.MACRO MULBLD		; MACRO TO BUILD MULTIPLY TABLE
	.NIBH=0
	.REPT 10
	.NIBL=0
	.REPT 10
	.BYTE .NIBH*.NIBL
	.NIBL=.NIBL+1
	.ENDR
	.NIBH=.NIBH+1
	.ENDR
	.ENDM
; CONTIGUITY REQUIREMENTS
; SHIPS FOLLOW SAUCER - EFIRE
; COLLIDE HAS SOME RESTRICTIONS

	.SBTTL PAGE 0 DECLARATIONS
	
VGBRIT:	.BLKB 1			;VECTOR BRIGHTNESS (0=OFF, F0=MAX, 20 INC)
VGLIST:	.BLKB 2			;VECTOR LIST POINTER
XCOMP:	.BLKB 4			;X COMPONENT FOR VECTORS
TEMP1:	.BLKB 3			;SCRATCH-3 BYTES USED BY SELF-TEST
TEMP1C	=TEMP1+2
TEMP2:	.BLKB 2
TEMP3:	.BLKB 4			;TEMP3 USUALLY SAVES X.TEMP 3+1 FOR Y
TEMP3C	=TEMP3+2
TEMP3D	=TEMP3+3
TEMP4:	.BLKB 3
TEMP5:	.BLKB 1
TEMP6:	.BLKB 1
TEMP7:	.BLKB 1
TEMP7B:	.BLKB 1
TEMP8:	.BLKB 1
TEMP9:	.BLKB 1
TEMP10:	.BLKB 1
TEMP11:	.BLKB 1
TEMP12:	.BLKB 1
TEMPA:	.BLKB 1
TEMPB:	.BLKB 1
TEMPC:	.BLKB 1
$TCMFLG: .BLKB 1		;2 COIN MIN FLAG
$$CRDT:	.BLKB 1			;COIN ROUTINE DEFINITION (SEE COIN65.MAC)	
$INTCT:	.BLKB 1
$BCCNT:	.BLKB 1
$BC:	.BLKB 1
$CMODE:	.BLKB 1
$LMTIM:	.BLKB 1
$CNCT:	.BLKB 1
$CCTIM:	.BLKB 3
$PSTSL:	.BLKB 3
$CNSTT:	.BLKB 3
$USE:	.BLKB 1		; COIN ROUTINE IN USE (IF POSITIVE)
$LOCKCOIL:	.BLKB 1		;OUTPUT BUFFER FOR:
				;D7=Y INVERT
				;D6=X INVERT
				;D5=START LED (0=ON)
				;D4=SELECT LED (0=ON)
				;D3=COIN LOCKOUT (1=NO COINS)
				;D2=LEFT COIN COUNTER
				;D1=CENTER COIN COUNTER
				;D0=RIGHT COIN COUNTER
INTRPT:	.BLKB 1
SYNC:	.BLKB 1
GAME:	.BLKB 1
SAVTOP:				;ALL RAM FROM NOW ON NEED NOT BE SAVED FROM GAME TO GAME
ATRACT:	.BLKB 1			;POSITIVE GAME GOING, ZERO FOR ATTACT
UPDINT:	.BLKB 2			;0,1, OR 2 TO INDICATE WHICH INITIAL IS BEING SELECTED
UPDFLG:	.BLKB 2			;POSITIVE MEANS THIS PLAYER HAS SET NEW HIGH SCORE
SCORE:	.BLKB 3*2		;PLAYER 1 AND 2 SCORES (LOW,MED,HIGH,BYTES)(BCD)
CMBSCORE:.BLKB 3		;COMBINED SCORE
GENDING:	.BLKB 1		;DELAY BEFORE ENDNG GAME IF NONZERO,COUNTS UP TO ZERO
FRAME:	.BLKB 3			;FRAME COUNTER
HITS:	.BLKB 2			;NUMBER OF HITS REMAINING (=0 FOR ATTRACT MODE)
LASTSW:	.BLKB NMSHIP		;LAST SWITCH READING
XINCL:	.BLKB NMSHIP		;SHIPS LSB FOR X INCREMENT
YINCL:	.BLKB NMSHIP		;SHIPS LSB FOR Y INCREMENT
	
	
TOGGLE:	.BLKB NMSHIP		;SHLDON
TOGDRONE:	.BLKB 1		;(D7) DRONE PLAYER
TOGCOMB:.BLKB 1			;(D7) COMBINED LIVES
SCRFUL:	.BLKB 1			;(D7) SCREEN HAS MAXIMUM NUMBER OF OBJECTS
KLMOFF:	.BLKB 1		;(D7) KILLERMINE TO GO OFF SCREEN (D6) COMETS TO GO OFF)
TSTBYTE:	.BLKB 1		;SEE IF ENMOFF GETS CLOBBERED FROM ABOVE
NCHANL==10
POINT::	.BLKB NCHANL
CURRENT::.BLKB NCHANL
COUNT::	.BLKB NCHANL
FRAMES::.BLKB NCHANL
SINDEX::.BLKB 1
OBJ:	.BLKB NMROCKS		;ZERO IF OBJECT NOT ACTIVE- OTHERWISE PICTURE NUMBER
OBCOMETS:.BLKB NMCOMETS
OBKLMINES:.BLKB NMKLMINES		; KILLER MINES
OBSAUCER:.BLKB NMSAUCER
OBSHIP:	.BLKB NMSHIPS
OBPAIR:	.BLKB 1			;PAIR
OBMINES:			;BEGINNING OF SHOTS
OBCOMINES:.BLKB NMCOMINES	;COMPUTER MINES
OBP0MINES:.BLKB NMP0MINES	;PLAYER 0 MINES
OBP1MINES:.BLKB NMP0MINES	;PLAYER 1 MINES
				;BITS 0-2=SIZE, 1=SMALL, 2=MEDIUM, 4=LARGE
				;BITS 3-6=PICTURE NUMBER
EASRCE:	.BLKB 2			;EAROM POINTER
KLMINC:	.BLKB NMKLMINES		;COLOR OF MINES (SHOT COUNT-1)
DIFCTY:	.BLKB 1		;DIFFICULTY VALUE FOR STARTING SAUCERS
OPTN1:	.BLKB 1			;OPTION 1 READING
LANG:	.BLKB 1			;LANGUAGE
DIFF:	.BLKB 1			;DIFFICULITY LEVEL FROM OPTION SWITCHES
SAUMIN:	.BLKB NMSAUCER		;MINIUM VELOCITIES OF SAUCERS
ROCKMIN:	.BLKB 2		;ROCK MIN; + - VEL
ROCKMAX:	.BLKB 2		;ROCK VEL MAX
SAVZTOP:
LASTOBJECT=.-1
NXTBON:	.BLKB 2			;NEXT BONUS
BONLVA:	.BLKB 1			;BONUS LEVEL AMOUNT
ATSTG:	.BLKB 1			;ATTRACT STAGE FLAG
HSCORE:	.BLKB 3*HSCNUM*4		;HIGH SCORES (LOW,MIDDLE,HIGH)
INITL:	.BLKB 3*HSCNUM*4		;INITIALS FOR HIGH SCORE (FIRST,SECOND,THRID)
SPINT:	.BLKB 3*HSCNUM			;EXTRA INITIALS FOR 2 PLR
					;SPACE STATION GAME
EABUF:	.BLKB 32.			;EA ROM READ/WRITE BUFFER AREA
;EAROM VARIABLES
EAZFLG:	.BLKB 1				;ZERO FLAG (NOT 0 = ZERO EAROM)
EAREQU:	.BLKB 1				;ROM ACCESS REQUEST
					;IF A BIT=0 THEN NO ACTION REQUESTED
					;	 =1 THEN ACCESS THAT DATA
					;D7 REPRESENTS 7TH BATCH OF DATA
					;D0 REPRESENTS 0TH BATCH OF DATA
EARWRQ:	.BLKB 1				;ROM ACCESS TYPE (MATCHES EAREQU)
					;IF BIT=0 THEN READ, ELSE WRITE
EABAD:	.BLKB 1				;ROM ACCESS SUCESS(0), FAIL(1) 
					;(MATCHES EAREQU)
					;
					;EA CONTROLL BYTES FOR 1 OPERATION
					;
EAFLG:	.BLKB 1				;D7=1=ERASE		;=0=R/W
					;D6=1=WRITE		;D5=1=READ
					;D4=1=ZERO EAROM (IF D6=WRITE)
EAERAS	=80
EAWRIT	=40
EAREAD	=20
					;
EABC:	.BLKB 1				;BYTE INDEX INTO ADDRESS AT EASRCE
					;
EAX:	.BLKB 1				;BYTE OFFSET INTO EAROM FOR NEXT ACCESS
					;
EACNT:	.BLKB 1				;BYTE OFFSET INTO EAROM FOR LAST ACCESS
					;
EASEL:	.BLKB 1				;INDEX CODE FOR CURRENT BATCH OPERATION
					;
EACS:	.BLKB 1				;CHECKSUM
ONTIME:	.BLKB 4			;ACTIVE ON TIME COUNTER
BONTIME:	.BLKB 4		;SAME USED FOR EA XFER
PLAYTIME:	.BLKB 4*4		;GAME PLAY TIME (1/2 PLAYER GAMES-4 EACH)
GAMES1:	.BLKB 3*4			;1 PLAYER GAMES
	.SBTTL PAGE 2 AND 3 DECLARATIONS

	.=200

XINC:	.BLKB TOTOBJ		;X INCREMENT FOR UPDATING POSITION(S8999.BBB)
YINC:	.BLKB TOTOBJ		;Y INCREMENT FOR UPDATING POSITION(S9999.BBB)
NROCKS:	.BLKB 1			;CURRENT NUMBER OF ROCKS
ENMDEL:	.BLKB NMSHIPS		;TIME TILL THIS SHIP IS A TARGET
EDELAY:	.BLKB NMSAUCER		;DELAY BEFORE ENEMY ENTRY OR FIRING
SENMDEL:.BLKB NMSHIP		;STARTING ENEMY DELAY
RTIMER:	.BLKB NMSHIP		;ROCK TIME - IF 0 SEND IN SAUCER ANYWAY
SDELAY:	.BLKB NMSHIP		;DELAY COUNT BEFORE ADDING SHIP (80=SHIP JUST DESTROYED)
ETIMER:	.BLKB NMSAUCER		;0 WHEN ALLOWED BACK IN
RDELAY:	.BLKB 1			;DELAY COUNT BEFORE ADDING ROCKS
THUMP3:	.BLKB 1			;STARTING VALUE FOR THUMP2
SHLDENG:.BLKB NMSHIP		;ENERGY LEFT IN SHIELDS
LSHLDENG:.BLKB NMSHIP		;"LOWER
CSPEED:.BLKB NMCOMET		;SPEED OF COMETS
KSPEED:	.BLKB NMKLMINES		;SPEED OF KILLER MINE
CANGCH:	.BLKB NMCOMET		;CHANGE IN ANGLE (LOW) FOR COMETS MINES
KANGCH:	.BLKB NMKLMINES		;CHANGE IN ANGLE (LOW) FOR KILLER MINES
CANGLH:	.BLKB NMCOMETS		;MSB ANGLE OF COMET

KANGLH:	.BLKB NMKLMINES		;MSB ANGLE OF KILLER MINE
ANGLE:	.BLKB NMSAUCER		;ANGLE OF ROTATION OF SAUCER
SANGLE:	.BLKB NMSHIPS		;ANGLE OF SHIPS ORIENTATION
CANGLL:	.BLKB NMCOMETS
KANGLL:	.BLKB NMKLMINES		;LSB ANGLE OF KILLER MINE
BANGLE:	.BLKB 1			;BAR ANGLE
BANGLL:	.BLKB 1			;BAR ANGLE LOWER
OBJXH:	.BLKB TOTOBJ		;X POSITION OF OBJ (HIGH ORDER) (00099999)
OBJYH:	.BLKB TOTOBJ		;Y POSITION OF OBJECT (HIGH ORDER)(00099999)
ISNSP2:	.BLKB 1		;INITIAL SPEED
SNDBA2:	.BLKB 1			;BASE
SNDSP2:	.BLKB 1			;SPEED
SPARKANGLE:	.BLKB NMSPARK
OBJXL:	.BLKB TOTOBJ		;X POSITION OF OBJECT (LOW ORDER)(99999.BBB)
OBJYL:	.BLKB TOTOBJ		;Y POSITION OF OBJECT (LOW ORDER)(99999.BBB)
UWBAR:	.BLKB 1			;BAR ROTATION SPEED UPPER
LWBAR:	.BLKB 1			;BAR ROTATION SPEED LOWER
BXINCL:	.BLKB 1			;BAR CENTER OF MASS XINC LOWER
BYINCL:	.BLKB 1			;BAR CENTER OF MASS YINC LOWER
PRTDAMAGE:.BLKB NMSHIPS		;PARTIAL DAMAGE IF NON ZERO
COLLIS:	.BLKB NMSHIP		;LAST OBJECT THIS SHIP HIT. A1 IS SHIFTED INTO MSB EACH FRAME
STRADDLE:	.BLKB 1		;D7 (STRADDLE X) D6 (STRADDLE Y)
COMOFF:	.BLKB 1		;-1 WHEN COMETS TO GO OFF SCREEN
	
;TEMPORARIES
OWNER:	.BLKB 1			;WHO GETS POINTS (0,1),NEGATIVE FOR NOBODY
COMTYP:	.BLKB NMCOMETS		;DWARF (0), COMET (80)
COMSTART:.BLKB NMSHIPS		;WHERE TO START SEARCH FOR OPEN COMET
PROBCOMET:.BLKB NMSHIPS		;PROBABITLITY STARTS AS COMET
DWFRMP:	.BLKB NMSHIPS		;DWARF RAMPING SPEED
SCSHSP:	.BLKB NMSHIPS		;SAUCER SHOOTING SPEED (80=FAST)
XINCROT:.BLKB 1			;TEMPORARIES
YINCROT:.BLKB 1
XPOSSAVE:.BLKB 1
YPOSSAVE:.BLKB 1
SHHIGH:	.BLKB 1		;SHOW HIGH SCORE-IF NOW ZERO
FREXPLOSION:.BLKB 1		;EXPLOSION SOUND
MXRTIMER:.BLKB NMSHIPS		;MAXIMUM ROCK TIMER
NWCACH:	.BLKB NMSHIPS		;NEW PLANET CHANGE ANGLE
NWCSPD:	.BLKB NMSHIPS		;NEW COMET SPEED
FCACH:	.BLKB NMSHIPS		;FIRST COMET CHANGE
FCSPD:	.BLKB NMSHIPS		;FIRST COMET SPEED
WAVE:	.BLKB 1			;USED FOR BONUS POINTS
GTIME:	.BLKB 4		;GAME TIME USING INTERRUPTS
BCOMSTART:	.BLKB NMSHIPS
NCOMET:	.BLKB 1		;NUMBER OF COMET
COMTIMER:	.BLKB 1		; HOW MUCH LONGER COMETS CAN STAY ACTIVE
				; FOR RUSH AT END OF WAVE
COMLIMIT:	.BLKB 1		;LIMIT ON COMETS
LNGTIMER:	.BLKB 2		; LONG TIMER, IF NEGATIVE THEN SAUCERS
				; COME OUT EVEN IF ROCKS, SHOOT FAST, OFTEN
WHOSHOT:.BLKB NMSHIPS		; WHO SHOT THIS SHIP (0=OPPONENT,FF=COMPUTER)
NENTCOMETS:	.BLKB 1		;NUMBER OF COMETS TO ENTER AT END OF WAVE
NENTDWARF:	.BLKB 1		;NUMBER OF DWARFS TO ENTER AT END
ETARGET:.BLKB NMSAUCER		;WHICH SHIP THE SAUCER IS TO TARGET;-1 FOR INACTIVE
CTARGET:.BLKB NMCOMETS		;WHICH OBJ TO TARGET FOR COMETS
KTARGET:.BLKB NMKLMINES		;WHICH OBJ TO TARGET FOR KILLER MINES
SPARKTIME:.BLKB 1		;DECREASING TIMER FOR SPARK BETWEEN SHIPS
				;80=NEGATIVE FOR NO SPARK
IANGLE:	.BLKB NMSHIP		;BUFFER FOR SHIPS ANGLES
LMONHITS:	.BLKB NMSHIPS		;HOW MANY TIMES THIS PLAYER KILLED A MONSTER
UMONHITS:	.BLKB NMSHIPS
ASTERS:		.BLKB 8		;ROCK ROTATIONS
HSCFLG:	.BLKB 1			;FLAG TO INDICATE GETTING INITIALS TO SOUND ROUTINE
;RODSTATUS, SINCE IT IS USED ONLY DURING MOTION, MAY NOT NEED A RESERVED BYTE
RODSTATUS:	.BLKB 1		;POSITIVE IF NEED TO DRAW (OR REDRAW) THE ROD.
;RAM PAST HERE SHOULD BE SAVED
SAVBOT:
LASTGAM:.BLKB 1			;USED TO DEBOUNCE GAME SELECT
PL0SCFLAG:	.BLKB 1		;(MINUS SIGNIFIES THIS SCORE HAS BEEN CHANGED
PL1SCFLAG:	.BLKB 1		;MINUS AND V CHAR MEANS LIVES HAVE BEEN CHANGED)
CMBSCFLAG:	.BLKB 1
UPDOWN:	.BLKB 1			;NEGATIVE FOR UPSIDE DOWN VECTORS AND MESSAGE

SECOND:	.BLKB 1			;1 SECOND TICKS
FLASHCOL:	.BLKB 1			;FLASH COLOR
ENTER:	.BLKB 2			;ENTRY EFFECT TIMERS
SFREQ:	.BLKB 1			;OUTPUT FREQ OF HUM
SPFLG:	.BLKB 1			;FLAG FOR SPECIAL INITIALS
				;SAME AS UPDFLG
FLSFLG:	.BLKB 2			;FLASH LAST ENTERED INITIALS
SAUCIX:	.BLKB 1
STRTLOK:	.BLKB 1		;START BUTTON LOCKOUT
				;0=GAME IN PROGRESS
				;80=NO STARTS ALLOWED
				;40=SELECT PUSHED...STARTS OK
EXPDEC:	.BLKB 2			;EXPLOSION SELECTION
				;- = SHOW BOTH EXPLOSION
				;+ = ONLY PIECES
SUPRSAC: .BLKB 1		;SUPER SAUCER FLAG (80=SUPER)
SUPRTIM: .BLKB 1		;SUPER SAUCER SHOT TIME
SUPRDIS: .BLKB 1		;SUPER SAUCER DISTANCE
LASTG:	.BLKB 1			;LAST GAME PLAYED FLAG
NEXTEX:	.BLKB 1			;FAN FARE EXPLOSIONS
SPECEX:	.BLKB 1			;SPECIAL FAN FARE FLAG
INTEN:	.BLKB 1			;INTENSITY PULSE BYTE 
				;TOP 4 BITS OF FRAME IN BOTTOM NIBBLE
MODNUM:	.BLKB 1			;MODULO NUMBER
DIFSW:	.BLKB 1			;DIFF SWITCH READING (FOR DISPLAY)
;RELATIVE OBJECT NUMBER
;  DOES NOT WORK TO SAY OBSHIP-OBJ WHEN ONE IN ZERO PAGE
ZCOMET	=NMROCKS
ZKLMINES=ZCOMET+NMCOMETS
ZSAUCER=ZKLMINES+NMKLMINES
ZSHIP=ZSAUCER+NMSAUCERS
ZPAIR=ZSHIP+NMSHIPS
ZMINES=ZPAIR+NMPAIR
ZMINE	=ZMINES
ZSHOT	=ZMINES
ZCOMINES=ZMINES
ZP0MINES=ZCOMINES+NMCOMINES
ZP1MINES=ZP0MINES+NMP0MINES
ZLAST=ZP1MINES+NMP1MINES-1
ZCXBAR=ZLAST+1
ZLENEMY=ZSHIP-1

;RELATIVE TO SHIP
ZZPAIR	=ZPAIR-ZSHIP
ZZMINES  =ZMINES-ZSHIP
ZZCOMINES=ZCOMINES-ZSHIP
ZZP0MINES=ZP0MINES-ZSHIP
ZZP1MINES=ZP1MINES-ZSHIP
ZZCXBAR=ZCXBAR-ZSHIP
;RELATIVE TO SAUCER
ZZZSHIP	=ZSHIP-ZSAUCER
BXINC	=XINC+ZPAIR		;BAR CENTER OF MASS XINC UPPER
BYINC	=YINC+ZPAIR		;BAR CENTER OF MASS YINC UPPER
;OTHER EQUATES
MAXSPEED	=3F		;MAXIMUN SPEED ABSOLUTE VALUE
;USED FOR APPROXIMATE REFLECTION IN CPYVEC

REFLMASK=1C			;TO ONES COMPLEMENT A VECTOR
;CONSTANTS USED IN TOGGLE
SHLDON	=80
	
MINSHENG=018			;MIMIMUM UPPER SHIELD ENERGY
BGSHENG	=0F0
;CONSTANT USED IN COLIS
COLBIT	=80			;A MESSUP BIT SHIFTED IN EACH FRAME
THRENG	=0F0*2			;THRUST ENERGY FOR ROTATE PAIR
ROTENG	=40.			;ROTATIONAL ENERGY
TWOPI	=6
FOURPI	=13.
XRIGHT	=20			;RIGHT SIDE OF SCREEN
YTOP	=18			;TOP OF SCREEN
ENTZON	=4		;HOW MUCH ROOM TO LEAVE WHEN ENTERING ROCKS
				;SO WHEN ADDING A RANDOM VLAUE DO NOT GO PAST EDGE
				;READY TO COME BARK WHEN INCREMENTED TO 80
SHPALIVE	=2		;VALUE FOR SIP WHEN ALIVE
MAXGAME	=3			;MAXIMUM AME NUMBER (INTERNAL GAME NUMBERS ARE
				;ONE LESS THEN ON SCREEN (0,1,..., MAXGAME)
MXPTDAMAGE=80			;MAXIMUM PARTIAL DAMAGE (NEGATIVE GOING)

MXSPKTIME=060			;MAXIMUM SPARK TIME (THEN OTHER SHIP DIES)
;GAME EQUATES
ALONEGAME=1			;ONE SHIP ONLY
TWINGAME=3			;SPACE STATION, ONE PLAYER CONTROLS BOTH
LANGBTS	=30			;LANGUAGE BITS
;COMET EQUATES
IGENDING	=40		; INITIAL GAME ENDING VALUE
HSBIT	=4
; SPECIAL DEFINING FOR A WHILE
.=VECRAM+290
; BUILD ROCKS HERE
VROCK1:	.BLKB 2			;JMPL TO PROPER ROCK PICTURE
CVR11:	.BLKB 4			;1ST COLOR INST AND RTSL
CVR12:	.BLKB 4			;2ND   "    "    "   "
CVR13:	.BLKB 4			;3RD   "    "    "   "
VROCK2:	.BLKB 2			;JMPL TO PROPER ROCK PICTURE
CVR21:	.BLKB 4			;1ST COLOR INST AND RTSL
CVR22:	.BLKB 4			;2ND   "    "    "   "
CVR23:	.BLKB 4			;3RD   "    "    "   "
VROCK3:	.BLKB 2			;JMPL FOR PYRM
PYR11:	.BLKB 4			;COLOR AS ABOVE BUT FOR PYRM
PYR12:	.BLKB 4
PYR13:	.BLKB 4
VROCK4:	.BLKB 2			;JMPL FOR CUBE
VROCK5:	.BLKB 2			;ROCKS 4,5,6,7,8 WILL USE ABOVE COLORS
VROCK6:	.BLKB 2
VROCK7:	.BLKB 2
VROCK8:	.BLKB 2
;
;DYNAMIC SAUCER PICS COLOR AND RTSL INSTRUCTIONS
;
SAU11:	.BLKB 4
SAU12:	.BLKB 4
SAU13:	.BLKB 4
;
SPARKB:	.BLKB 20	;SPARK BUFFER
PL0SET=VECRAM+300
PL1SET	=VECRAM+30A
CMBSET	=VECRAM+314
CMSBSET =VECRAM+342			;SPECIAL INVERTED COMB SCORE
;INSIDE OF VGRAM WILL HAVE
;SOME VECTOR CODE THAT WILL BE JSRLD TO
;THE ONLY CRITICAL PAIRING IS HSAREA
;WHICH IMMEDIATELY PRECEDES PL0AREA
;2 FOR HIGH SCORE SET UP 10 FOR DIGITS
;2 FOR GAME SET UP 4 FOR DIGITS
PL0AREA=VECRAM+380
PL1AREA=VECRAM+3C0
CMSBAREA =VECRAM+736
CMBAREA=VECRAM+780
	.=VECRAM+700
SH0XPCOORD:	.BLKB 4*NMXPLPIECES		;EXPLOSION PICTURE COORDINATES
						;(Y LSB,Y MSB,X LSB,X MSB)
SH1XPCOORD:	.BLKB 4*NMXPLPIECES	;EXPLOSION PIC COORD
					;(Y LSB, Y MSB, X LSB, X MSB)
...SCAL	=1			;DESAULT SCALE
	..TASS=1/2		;TEST MACRO
.BRITE	=5			;VECTOR BRIGHTNESS
.BRITR	=.BRITE+2
.SHPSC	=1			;SHIP SCALING FACTOR
	.RADIX 10
	.=VECROM

;THE SHIP TABLES COMBINED ARE
;NOT TO BE MORE THAN ONE PAGE
SHIPS:
	.CSECT MULTB
	.RADIX 16
MULTBL:
	MULBLD
	.CSECT EXPIC
EXPPIC:	JSRL	EXP9
	JSRL	EXP10
	JSRL	EXP11
	JSRL	EXP12
	JSRL	EXP13
	JSRL	EXP14
	JSRL	EXP15
	JSRL	EXP16
EXPSP:	JSRL EXP9+2		;SO NO COLOR INCLUDED
	JSRL EXP10+2
	JSRL EXP11+2
	JSRL EXP12+2
	JSRL EXP13+2
	JSRL EXP14+2
	JSRL EXP15+2
	JSRL EXP16+2
	.CSECT ROCKDAT
CKUM4::	.BYTE 089
ROCKA::	.WORD VROCK1,VROCK2,VROCK3,VROCK4
	.WORD VROCK5,VROCK6,VROCK7,VROCK8
RSOURC::
	.IRPC X,<0123>
	JMPL ROCK'X'1
	JMPL ROCK'X'2
	JMPL PYRM'X'1
	JMPL CUBE'X'1		;(FUTURE CUBE PLACE)
	JMPL STAR'X'1
	JMPL PENT'X'1
	JMPL PLN'X'1
	JMPL HEXA'X'1
	.ENDR
	
ROCKSA::JSRL VROCK1
	JSRL VROCK2
	JSRL VROCK3
	JSRL VROCK4
	JSRL VROCK5
	JSRL VROCK6
	JSRL VROCK7
	JSRL VROCK8
ROCPIC:
;PIC SELECT BITS FOR OBJ BITS 3,4,5 ARE SELECT
	.BYTE 0		;SPINNERS
	.BYTE 8		;SPINNERS OPPISITE DIR
	.BYTE 10	;OCTEHEDREONS
	.BYTE 18	;CUBES
	.BYTE 28	;"HAT BOX"
	.BYTE 30	;"BOOK"
	.BYTE 20	;STARGON
	.BYTE 38	;HEXARAHEADON
	.SBTTL MAIN LINE LOOP
	.RADIX 16
	.ASECT
	.=4000
CKUM2::	.BYTE 042			;CHECKSUM FOR 4000
ATARI:	.BYTE 2,0BB,05A,30,5F,0EE,07D,0A8
;COPYRIGHT 1980 ATARI
	JMP POWERON
START:	JSR INIT		;INITIALIZE PLAYER 1 FOR START OF GAME
START1:	JSR NEWAST		;START UP NEW ASTEROIDS
START2:

5$:	JSR GTOPTN
	LDA STSTSW		;CHECK FOR SELF TEST
	AND #STSTBIT
	BNE 6$
	JMP STESTA		;GO DO SELF TEST
6$:	BIT HALT
	BVC 6$
	JSR ROTAST
8$:	LSR SYNC
	BCC 8$			;NOT 1/60 SEC YET
	STA A,WTCHDG
	LDA FRAME		;MOVE FLASH COLOR POINTER
	AND #0F
	ORA #0E0		;FULL BRIGHT ON FLASH
	STA FLASHCOL
	LDX #1
9$:	LDA X,ENTER
	BEQ 10$			;NO TOUCH
	CLC
	ADC #02
	STA X,ENTER
	BNE 10$			;NOT FULLY BACK
	LDA #40			;GIVE AN 8 SECOND BONUS...
	JSR LONGTIMER
10$:	DEX
	BPL 9$
	LDA VECRAM+1		;SWAP BUFFERS AND...
	EOR I,2
	STA VECRAM+1
	STA GOADD		;GO
11$:	LDA A,VECRAM+1		;PICK BUFFER TO BUILD IN
	LDX I,VECRAM/100
	AND I,02
	BNE 12$			;USE LOWER BUFFER
	LDX I,VECRAM/100+04	;USE UPPER BUFFER
12$:	LDA I,VECRAM&0FF+2
	STA VGLIST
	STX VGLIST+1		;RESET VECTOR LIST POINTER
	.SBTTL	ADD SPOT KILLER
	LAL WNDSE9
	LXH WNDSE8		;SPOT KILLER
	JSR VGADD2
	LDA ATRACT		;0=ATTRACT
	ORA $$CRDT		;OR ANY CREDIT
	ORA $CNCT		;OR ANY COINS
	BNE 14$
	LDA UPDFLG
	AND UPDFLG+1		;NOT DURING INITIAL ENTRY EITHER
	BPL 14$
	LAL ASTMG9		;COPYRIGHT MSG
	LXH ASTMG8
	JSR VGADD2
; ADD BONUS MESSAGE
	LDA BONLVA		;BONUS LEVEL OBTAINED IN 'GTOPTN'
	BEQ  14$
	PHA
	LDA #-36
	LDX #-3E		;POSITION FOR MESSAGE
	JSR MESGPOS
	LDY #0E
	LDA #BLUE+0E0
	JSR VGMSG4
	PLA
	STA TEMP1+1		;SAVE BONUS AMOUNT
	LDA #0
	STA TEMP1		;FOR DISPLAY
	SEC			;ZERO SUPRESSION
	LDA #TEMP1		;PAGE 0 POINTER
	LDY #2			;2 ZERO PAGE LOCATIONS
	JSR DIGITS		;DISPLAY LEVEL
	LDA #0
	JSR VGHEX		;ADD ANOTHER 0
14$:	JSR CHKST		;CHECK FOR START

	BCC 15$
	JMP START		;BUTTON PUSHED-START OVER
15$:	LDA ATRACT
	BNE 20$
	JSR GETINT		;GET INITIALS FOR ANY NEW HIGH SCORE
	BCC 55$			;NOT DONE YET
	JMP 5$			;DONE---RESTART EVERYTHING
55$:	LDA UPDFLG
	AND UPDFLG+1
	BPL 60$
	LDA SHHIGH		;FORCE DISPLAY OF HIGH SCORES
	BNE 13$
	LDA $$CRDT
	ORA $CNCT		;ANY COINS OR CREDITS?
	BNE 60$			;IF YES...NO TABLE NEEDED
13$:	JSR SCORES		;DO SCORE TABLE
	BCS 60$			;DOING SCORE TABLE
20$:	BIT TOGDRONE
	BMI 30$			;NOT DO SHIP 1
	LDX I,1
	JSR FIRE		;FIRE SHIPS TORPEDOES
30$:	LDX I,0
	JSR FIRE
31$:	LDX I,1
	JSR MOVE		;MOVE SHIP BY CONTROLS
	LDX I,0
	JSR MOVE
	JSR DOCOMETS
	JSR ONSLAUGHT
	JSR QEND		;QUICK RESTART
	JSR KLMINES		;DO KILLER MINES - FALL INTO "ENEMY" ROUTINE
	JSR MOTION		;MOVE OBJECTS
	JSR DOSHIELD
	JSR COLIDE		;CHECK FOR COLLISIONS
60$:	JSR ENTPARAMS		;DISPLAY SCORE AND OTHER PARAMETERS
	JSR HUM			;HUM?
	JSR VGCNTR		;POSITION BEAM FOR MINIMUM CURRENT
	JSR VGHALT		;ADD HALT TO VECTOR LIST
	JSR SPARK2		;MOVE THE SPARKS
	JSR FRCALC
	LDA RDELAY
	BEQ 70$			;NO DELAY TO DECREMENT
	DEC RDELAY
	BNE 80$
70$:	LDA ATRACT
	IFMI			;IF NOT ATRACT
	LDA $CMODE
	AND #03			;FREE PLAY??
	IFEQ			;YES IF 0
	BIT TWOCMN		;FREE PLAY AND 2 COIN MIN?
	IFVS			;YES
	LDA GAMSEL
	ASL
	ROR LASTGAM		;DEBOUNCE SWITCH
	IFCS			;WAS PRESSED 9 AGO
	IFEQ
	LDA #-10
	STA NROCKS		;FORCE TO NEXT WAVE
	ENDIF
	ENDIF
	ENDIF
	ENDIF
	ENDIF
	LDA NROCKS
	BMI 75$		;INCASE IT GOES PAST 0
	BNE 80$			;LOOP FOR NEXT PASS
75$:	BIT ATRACT		;ATTRACT PLAY?
	BMI 76$			;NO
	LDA FRAME+1
	AND #03
	CMP #03			;ONLY BUMP IF HELD AT 3
	BNE 80$
	INC FRAME+1		;FORCE TO NEXT STAGE
76$:	JMP START1		;START NEW SET OF ASTEROIDS
80$:	JMP START2
	.SBTTL CHKST-CHECK FOR START/END OF GAME
;CHKST	-CHECK FOR START/END OF GAME
;
;EXIT	(C)=SET IF STARTING A NEW GAME
CHKST:

	.SBTTL CKSWITCHES-CHECK SWITCHES
5$:
	LDA ATRACT
	BEQ 10$			;GAME NOT IN PROGRESS
	LDA GENDING
	BNE 6$			;STILL ENDING
	JMP CHKST1		;GAME IN PROGRESS
6$:	INC GENDING
	BEQ 7$			;NOT OVER YET
	LDA #0E4
	LDX #04
	JSR MESGPOS		;POSITION MESSAGE
	LDY I,7			;GAME OVER MESSAGE
	STY UPDOWN		;NORMAL MESSAGE ALWAYS
	JSR VGMSG
	LDA #0
	STA COMTIMER		;END ONSLAUGHT
	LDA #0FF		;SHOW HIGH SCORES ONCE
	STA SHHIGH
	CLC			;NO NEW GAME
	RTS			;(EXIT)
7$:	JSR INISOU		;TURN OFF SOUNDS
	JSR BIGBANG		;REMOVE ALL
	LDA UPDFLG
	AND UPDFLG+1
	BMI 65$
	JSR GATES		;HIGH SCORE SOUND
	LDA #0
	STA SPECEX

65$:	LDA I,0
	STA ATRACT
	STA RDELAY
	STA SCRFUL		;ALLOW ROCKS BACK
	STA SDELAY
	STA SDELAY+1
	STA OBSHIP
	STA OBSHIP+1
	CLC
	RTS
	.SBTTL	ATTRACT LOOP CHECKS
10$:	LDA $$CRDT
	ORA $CNCT			;NOT IF CREDIT OR COINS
	ORA FRAME			;THIS MUST BE 0 TOO
	BNE 3$
	LDA FRAME+1
	AND #<HSBIT*2>-1
	EOR #02
	BNE 3$			;MUST ALSO BE 0
	LDY #0
	JSR NXTSTEP		;STEP TO NEXT GAME
	BEQ 4$
	CMP #2
	BCC 4$
	LDY #80
4$:	STY TOGCOMB
	JSR GTOPTN		;READ OPTION SWITCHES AND GET LIVES
	LDA #20			;MAKE SHIP APPEAR
	STA SDELAY
	STA SDELAY+1
	LDA #80
	STA SCSHSPEED		;WANT SAUCERS MAD
	STA SCSHSPEED+1
	LDA #0
	STA OBJ+ZSHIP		;TURN OFF OLD SHIP
	STA OBJ+ZSHIP+1
	STA IANGLE			;POINT STRAIGHT UP
	STA IANGLE+1
3$:	LDY $USE		;STILL DOING COINR ROUTINE?
	BMI 11$			;NOPE--NOT IF MINUS
	LDA I,LOCKIN
; LIMIT CREDITS TO TEN
	LDY $$CRDT
	CPY I,18.
	BCC 1$			; NOT LIMITED YET
	LDY I,18.
	STY $$CRDT
11$:	LDA I,LOCKOUT
1$:	STA $LOCKCOIL
	LDA SHHIGH
	BEQ 8$
	DEC SHHIGH		;FORCE DISPLAY OF HIGH SCORES
8$:	LDA I,0			;DEFAULT TO SELL PLAYERS
	STA TEMP5
	STA KLMOFF		;FOR ATRACT
	LDY I,8
;DECIDE IF CHARGING GAMES
;PER CREDIT OR PLAYERS PER CREDIT
	BIT SELLGAME
	BVC 12$			;SELLING GAMES????
	DEC TEMP5		;IF POSITIVE
12$:	INY			;CHARGE BY THE PLAYER
	SEI
	STA POTGO+POKEY2
	LDA ALLPOT+POKEY2
	CLI			;INTERRUPTS OK NOW
	EOR #02			;CORRECT FOR ALL OFF
	STA $CMODE
	AND I,03
	BNE 35$
	LDA #02			;FREE PLAY
	STA $$CRDT
	STA $TCMFLF		;NO 2 COIN MIN
	BNE 15$
35$:	CLC
	ADC I,07
	BIT TEMP5
	BPL 9$
	ADC #0D			;COIN MODE MESSAGE
9$:	TAY
	LDA #YELLOW+0C0
	STA TEMP9
80$:	BIT TWOCMN		;2 COIN MINIUM
	IFVS
	LDA $$CRDT
	IFEQ
	LDA #80
	STA $TCMFLG
	ELSE
	CMP #01
	BNE 82$			;EASY WAY OUT
	ENDIF			;1 CREDIT IF HERE
	BIT $TCMFLG
	BPL 83$			;1 CREDIT, MIMIMUN SATIFIED
	LDA FRAME
	AND #20
	IFEQ
	LDY #12			;ALT MESSAGE
	LDA #RED+0C0
	STA TEMP9
	ENDIF
	ELSE
82$:	LDA #0
	STA $TCMFLG		;DON'T ALLOW THIS TO HAPPEN
83$:	LDA FRAME
	AND #20
	BNE 15$			;HERE WE FLASH THE MESSAGE
	ENDIF
81$:	LDA UPDFLG
	AND UPDFLG+1	
	BPL 15$			;IF UPDATING INITIALS
	LDA SHHIGH		;SKIP WHILE HIGH SCORE TBL
	BNE 15$
	TYA
	PHA			;SAVE Y FOR LATER
	LDA #0D3
	LDX #49
	JSR MESGPOS
	LDX #0			;OFFSET FOR LANGUAGES
	JSR LANGOFF
	LDX TEMP9
	PLA
	TAY			;RESTORE Y
	JSR VGMSG3
15$:	LDY $$CRDT
	BNE 16$			;NO CREDIT-NO PLAY
	LDY $CNCT		;ANY COINS???
	BEQ 14$			;NOPE--END
	JMP 47$			;GO DO GAME DISPLAY
14$:	LDA $LOCKCOIL
	ORA #30			;TURN OF LIGHTS
	STA $LOCKCOIL
	CLC
	RTS
16$:	LDA GAMSEL
	ASL
	ROR LASTGAM		;DEBOUNCE GAME SELECT SWITCH
;
17$:	;CHECK START BUTTON
	BIT STRTLOK		;LOCKED OUT (NO SELECT YET)?
	BMI 40$			;YEP
	BIT $TCMFLG
	BMI 40$			;STARTS LOCKED OUT
;HAVE AT LEAST 1 CREDIT AT THIS POINT
	BIT STRT1			;START PUSHED
;
;NOTE: THE GAME SELECT LOGIC WILL NOT ALLOW A
;GAME TO BE SELECTED THAT SUFFICIENT CREDIT IS NOT PRESENT FOR.
;SO ONLY NEED TO DETERMIN HOW MANY CREDITS TO REMOVE

;
	BVC 40$			;NO START
	BIT TEMP5			;THIS IS MINUS IF SELLING GAMES
	BMI 20$
	LDA GAME			;SELLING PLAYERS......HOW MUCH THIS COST?
	LSR				;ODD GAMES ARE 1 PLAYER GAMES
	BCS 20$
	DEC $$CRDT			;COST 2 CREDITS...THIS IS 2
20$:	DEC $$CRDT			;AND THIS IS ONE!!!!!!
	LDA $LOCKCOIL			;TURN ON START LAMP
	AND #0DF
	STA $LOCKCOIL
	LDA #0
	STA STRTLOK			;RESET START LOCKOUT FLAG
	STA SPECEX			;IN CASE THIS WAS ON
	LDA #0FF
	STA FLSFLG		;NO NEW HIGH SCORES
	STA FLSFLG+1
	LDA GAME
	STA LASTG		;SAVE LAST GAME
	JSR GTOPTN		;SET DIFF LEVEL FOR THIS GAME
	SEC			;SIGNIFY STARTING OF NEW GAME
	RTS
	
40$:
;SEE IF NEW GAME SELECTED
	LDA FRAME
	AND #18
	ASL			;FLASH RATE
	BIT LASTGAM
	BPL 43$			;NOT PRESSED
	BVS 43$			;WAS PRESSED LAST TIME
	BIT $TCMFLG		;HOLDING BECAUSE OF THIS NONSENSE???
	BMI 43$
	BIT STRTLOK		;WAS THIS FIRST PRESS OF PUTTON????
	BPL 41$			;NOPE
	LDA LASTG
	AND #03			;JUST IN CASE NOT INITIALIZED
	STA GAME
	JMP 42$
41$:	LDX #0
	STX SHHIGH		;NO HIGH SCORE
44$:
	JSR NXTSTEP		;NEXT GAME
42$:	LDX #40
	STX STRTLOK		;SET PUSHED FLAG
	LDX #0FF
	STX UPDFLG
	STX UPDFLG+1		;ABORT ANT INITIALS
	LDX #0
	STX SHHIGH		;ABORT TABLE
43$:	BIT STRTLOK		;STARTS??
	BPL 46$			;OK TO START
	ORA #20			;NO START LAMP FLASH
46$:	EOR $LOCKCOIL
	AND #30			;1'S MEAN REPLACE WITH ACC
	EOR $LOCKCOIL
	STA $LOCKCOIL
	LDX GAME
	LDA X,TTPLAYR		;NUMBER OF CREDITS REQUIRED FOR THIS GAME (1,2)
	BIT TEMP5
	BMI 45$			;BY THE GAME
	CMP $$CRDT
	BEQ 45$			;EXACTLY ENOUGH
	BCC 45$			;ENOUGH CREDIT
	JSR NXTSTEP		;NEXT GAME
	BCS 46$			;*********ALWAYS*************
45$:	LDY I,11.			;ONE PLAYER
	LSR			;ACC 0 FOR 1 PLAYER
	BEQ 47$
	INY
47$:	LDA SHHIGH
	BNE 59$			;SHOWING HIGH SCORE
	LDA UPDFLG
	AND UPDFLG+1
	BPL 59$			;NO DISPLAY IF INITIALS
	JSR NAMSEL		;DISPLAY GAME SELECT
59$:	CLC
	RTS			;(EXIT)
;"ONE OR TWO PLAYER"
NAMES:	.BYTE 11,11,12,12
	.PAGE
	.SBTTL	CHECK FOR END OF GAME
CHKST1:
;CHECK FOR END OF GAME
8$:	LDA HITS+1
	ORA HITS		;ANY HITS LEFT???
	ORA OBSHIP		;STILL LIVING????
	ORA OBSHIP+1
	BNE 90$
	LDA GAME		;COMPETITIVE?
	BNE 20$			;NOPE
	LDA PRTDAMAGE
	AND PRTDAMAGE+1
	BPL 90$			;ONE NOT DAMAGED
20$:	LDA GENDING
	BNE 90$			;GAME ALREADY ENDING
;THIS NOT NEED IF TIME OF GENDING IS OK
;SEE THAT ALL PLAYER MINES TIMED OUT
	LDX I,NMP0MINES+NMP1MINES-1

10$:	LDA X,OBJ+ZP0MINES
	BNE 90$			;GAME STILL GOING
	DEX
	BPL 10$
	JSR ROCKINI		;SLOW DOWN ROCKS
	LDA #1
	STA WAVE		;BACK TO WAVE 1
	LDA I,0
	STA SCRFUL		;LET ROCKS COME BACK
	LDX I,IGENDING
	LDA UPDFLG
	AND #UPDFLG+1		;INITIALS??
	BMI 17$			;NO
	LDX #IGENDING/4		;LONGER STILL
17$:	STX GENDING		;NO MORE SHOTS BUT COUNT THOSE THAT ARE STILL GOING
	LDA #80			;NO STARTS
	STA STRTLOK		;SET NO STARTS ALLOWED
	JSR BOOK
	JSR UPDATE		;CHECK FOR NEW HIGH SCORE
	LDA I,0
	STA $USE		;START COIN ROUTINE
90$:	CLC
	RTS
	.SBTTL	STEP TO NEXT GAME
NXTSTEP:
5$:	LDX GAME
	LDA X,NXTGAM		;WHICH GAME IS NEXT??
	STA GAME		;NEXT
	BIT CABERET		
	BVC 10$
	LSR			;CABERET -- GAMES 1 AND 3 ONLY
	BCC 5$
10$:	RTS
;TABLE OF GAME ORDER
NXTGAM:	.BYTE 1,3,0,2
	.PAGE
	.SBTTL COLIDE-COLLISION DETECTOR

;RUN X DOWN FROM LAST OBJECT TO SHIP 0.
;RUN Y DOWN FROM ONE BELOW X TO BOTTOM OF ROCKS
;CHECK FOR COLLISION BETWEEN ACTIVE OBJECT X AND Y
;ASSUMES LESS THAN HEX 80 OBJECTS

;USES(TEMP1, TEMP1+1),(TEMP2, TEMP2+1)
;(TEMP3,TEMP3+1)
;TO REMEMBER X AND Y AS TEMPORARIES
COLIDE:
	LDX I,ZLAST
10$:	LDA X,OBJ
	BEQ 13$			;IF INACTIVE TORPEDO
	BPL 16$			;NOT CHECK IF MINUS (EXPLODING)
13$:	DEX
	CPX I,ZSHIP-1		;STOP X AT SHIP0
	BNE 10$
14$:	RTS			;(EXIT)
	
;GET STARTING Y FROM TABLE
16$:	LDY X,125$-ZSAUCER
	LDA GAME
	BNE 19$
	LDY X,126$-ZSAUCER	;FOR COMPETITIVE, USE DIFFERENT STARTS
19$:	DEY
;PUTTING KILLERMINES PHYSICALLY AFTER
;ROCKS. SAVE ABOUT 1MS PER FRAME
	BMI 13$
;MAY WANT TO DO THE CHECK AFTER
;PRELIMINARY CULLING IN ORDER TO HELP WORST CASE
	LDA Y,OBJ
	BEQ 19$			;IF INACTIVE
	BMI 19$			;IF AN EXPLOSION
;BY ADDING A PRELIMINARY BIT OF CODE
;CAN SIGN GREATLY IMPROVE THE COLLISION
;DETECT TIME, ASSUMING COLLISIONS ARE
;RANDOMLY DISTRIBUTED.
;EXPECT TO SAVE APPROXIMATELY 18 CYCLES PER
;COLLISION PAIR
	LDA Y,OBJXH
	SEC
	SBC X,OBJXH
;NOW THE ONLY RESULTS WE WANT TO ACCEPT ARE (-2,-1,0,1,2)
;THE CARRY WAS CLEAR FOR RESULT -1, SET FOR 0, 1
;REMEMBER THAT THESE NUMBERS RANGE ONLY FROM
;0 TO 20 HEX
	SBC I,3
;FOR RESULT 0 EXPECT ACC OF (-3);
;FOR RESULT 1 EXPECT ACC OF (-2); 2 GOES TO -1
;FOR RESULT -1 EXPE T ACC OF (-5); -2 GOES TO -6
;ALL OTHER POSITIVE VALUE HAVE POSITIVE ACC
;ALL OTHER NEGATIVE VALUES ARE BETWEEN 7C AND -7
	CMP I,-6
	BCC 19$			;TOO FAR
;NOTICE THAT CARRY IS SET!
	LDA Y,OBJYH
	SBC X,OBJYH
	SBC I,3
	CMP I,-6
	BCC 19$
	LDA Y,OBJXL		;TEST X DIRECTION
;CARRY IS SET
	SBC X,OBJXL
	STA TEMP1		;STORE LOW X DIFFERENCE
	LDA Y,OBJXH
	SBC X,OBJXH
	LSR
	ROR TEMP1		;DIVIDED BY 2
;TO BE ACCEPTED, THESE
;ORIGINAL HIGH BYTE IS (-2,-1,0,1)
	ASL			;RESET ZERO CONDITION
	BEQ 32$			;IF WITHIN 64.
	EOR I,0FE
	BNE 19$			;TOO FAR AWAY
	LDA TEMP1
	EOR I,0FF
	STA TEMP1		;DISTANCE FROM TORPEDO
32$:	LDA Y,OBJYL
	SEC
	SBC X,OBJYL
	STA TEMP1+1
	LDA Y,OBJYH
	SBC X,OBJYH
	LSR
	ROR TEMP1+1
	ASL			;SET ZERO
	BEQ 35$			;IF WITHIN 64.
	EOR I,0FE
	BNE 19$			;TOO FAR AWAY
	LDA TEMP1+1
	EOR I,0FF
	STA TEMP1+1		;DISTANCE-1 FROM TORPEDO
35$:
36$:
	CPY I,NMROCKS
	BCS 45$			;NOT A ROCK
;DETERMINE SIZE OF ROCKS
	STY TEMP3+1
	LDA Y,OBJ
	AND I,7
	TAY
	LDA Y,115$-1
	LDY TEMP3+1
	BPL 65$			;ALWAYS
45$:	LDA Y,110$-ZCOMET
65$:	CLC
	ADC X,112$-ZSHIP
70$:	CMP TEMP1
	BCC 80$			;NO HIT
	CMP TEMP1+1
	BCC 80$			;NO HIT
	STA TEMP2
	LSR			
	CLC
	ADC TEMP2
	STA TEMP2		;3/2 DISTANCE (NO CARRY IF LESS THAN 172.)
	LDA I,0			; UPPER BYTE OF SUM OF RADII
	ADC I,0			; CARRY IS IMPORTANT THING
	STA TEMP2+1
72$:
	LDA TEMP1+1		;CARRY IS CLEAR
	ADC TEMP1
	STA TEMP1		; LOWER BYTE OF SUM OF X,Y ( MEASURED)
	LDA I,0
	ADC I,0			;ACC IS UPPER SUM
	STA TEMP1+1		; UPPER SUM OF X,Y (MEASURED)
	LDA TEMP2		; LOWER SUM OF 3/2 DISTANCE ALLOWED
	CMP TEMP1		; SETS CARRY FOR 16 BIT COMPARE
	LDA TEMP2+1
	SBC TEMP1+1
	BCC 80$			;CHOP OFF CORNERS-A MISS ON OBJECT
	STX TEMP3
	STY TEMP3+1
	JSR DSTRCT
;IF NOBODY KILLED THEN
;WANT TO START WITH SAME X AND Y
	LDY TEMP3+1
	LDX TEMP3
	LDA X,OBJ		; SEE IF OBJECT STILL ACTIVE (BECAUSE OF SHIELDS)
	BEQ 78$
	BPL 80$
78$:	LDY I,0			;BESURE START WITH NEW X
	
80$:	JMP 19$

;SIZE OF THE Y OBJECTS
110$:	.REPT NMCOMETS
	.BYTE 38
	.ENDR
	.REPT NMKLMINES
	.BYTE 18
	.ENDR

	.REPT NMSAUCER
	.BYTE 20
	.ENDR
;SIZE OF X OBJECTS
112$:	.REPT NMSHIPS
	.BYTE 30
	.ENDR
	.REPT NMPAIR
	.BYTE 0			;PLACE HOLDER
	.ENDR
;WILL NOT NEED THESE IF CHANGE WORKS
	.REPT NMMINES
	.BYTE 0
	.ENDR
;SIZES
115$:	.BYTE 42.,72.,0,132.
;STARTING Y VALUES+1
125$:
	.REPT NMSAUCER
	.BYTE ZSAUCER
	.ENDR
	.BYTE ZLENEMY+1		;SHIP0
	.BYTE ZLENEMY+1		;SHIPS
	
	.REPT NMPAIR
	.BYTE 0			;NOT WANT TO CHECK
	.ENDR
	
	.REPT NMCOMINES
	.BYTE ZSHIP+NMSHIPS
	.ENDR
	.REPT NMP0MINES+NMP1MINES
	.BYTE ZSHIP
	.ENDR
126$:	.REPT NMSAUCER
	.BYTE ZSAUCER
	.ENDR
	
	.BYTE ZLENEMY+1
	.BYTE ZSHIP+1
	
	.REPT NMPAIR
	.BYTE 0
	.ENDR
	
	.REPT NMCOMINES
	.BYTE ZSHIP+NMSHIPS
	.ENDR
	
	.REPT NMP0MINES
	.BYTE ZSHIP+1+1
	.ENDR
	.REPT NMP1MINES
	.BYTE ZSHIP+1
	.ENDR
	
	
	
	
	
	.PAGE
	.SBTTL DSTRCT-DESTRUCTION DURING COLLISION
;DSTRCT-DESTRUCTION DURING COLLISION
;
;ENTRY	(X)=SHIP, SAUCER OR TORPEDO INDEX
;	(Y)=ROCK,KILLERMINE OR SHIP
;TEMP3 IS ENTERING X, TEMP3+1 IS ENTERING Y
;SETS OWNER OF POINTS
DSTRCT:
;SET OWNER OF POINTS. WILL USUALLY DEPEND ON X,
;EXCEPT FOR A FEW CASES WHERE THERE VALUE
;WILL BE OVERRIDDEN
	LDA X,OWNERTABLE-ZSHIP
	STA OWNER
;CHECK FOR X BEING MINE(SHOT)
	CPX I,ZMINES
	BCS 15$			;X WAS A MINE
	JMP DSTR60		;NOT A MINE(SHOT)
15$:	LDA I,0
	STA X,OBJ		;CLEAR SHOT
	CPY I,NMROCK+NMCOMET
	BCS 30$			;Y NOT A ROCK OR COMET
	JMP SPLIT		;(EXIT POINT)
30$:	CPY I,ZKLMINES+NMKLMINES
	BCS 60$			;NOT KILLER MINE
;SET THIS KILLER MINE TO STUN
	LDA I,0			;CAN BE 0
	STA Y,KSPEED-ZKLMINES	;CURRENT SPEED
	STA Y,XINC		;IDLE MOVE
	STA Y,YINC		;IDLE MINE
;	CLC			;******CLEARED ABOVE*******
	LDA Y,KLMINC-ZKLMINES
	ADC #01			;ADD ANOTHE SHOT
	STA Y,KLMINC-ZKLMINES
	CMP #08			;READY TO DIE?
	BCC 35$			;NOPE
	LDA #0
	STA Y,OBJ
	LDA #10			;100 POINTS
	JSR POINTS
	JSR EXPLOS
	JSR INKLMINE		;RESTART ANOTHER
	LDX TEMP3
	LDY TEMP3+1		;RESTORE X & Y
35$:
;ADD SOME POSITION CHANGE EACH
;TIME A SHOT HITS THE KILLER MINE

	LDA X,XINC
	LDX I,0			;FOR SIGN EXTENSION
	ORA I,0			;SET STATUS
	BPL 47$
	DEX
47$:	CLC			;CARRY MAY ALREADY BE CLEAR
	ADC Y,OBJXL
	STA Y,OBJXL
	TXA
	ADC Y,OBJXH
	STA Y,OBJXH
	LDX TEMP3

;SIMILIAR IN Y COMPONENT

	LDA X,YINC
	LDX I,0
	ORA I,0			;SET STATUS
	BPL 49$
	DEX
49$:	CLC
	ADC Y,OBJYL
	STA Y,OBJYL
	TXA
	ADC Y,OBJYH
	STA Y,OBJYH
55$:	RTS			;(EXIT POINT)
60$:
	CPY I,ZSHIP
	BCC 65$			;NOT A SHIP, WAS SAUCER
;NOT SHOOT SELF
63$:	TYA
	SEC
	SBC I,ZSHIP
	CMP OWNER
	BEQ 55$
	LDX TEMP3+1		;TRANSFER COLLISION Y TO X
	JMP PDSTXSHIP		;EXIT
;***************SAUCER HIT************
;***********************************************************************
;* THE FOLLOWING LINES HAVE BEEN LEFT IN IN ORDER NOT TO HAVE TO       *
;* RE-RELEASE ALL OF THE SPACE DUEL EROMS. THERE ARE NO PATHS TO THIS  *
;* CODE AND IT IS NOT NEEDED.                                          *
;*                                                                     *
	LDA X,SAUOWN-ZSHOT	;WHO'S SHOT WAS THIS??
	STA OWNER
	CPY OWNER		; MY SHOT??
	BEQ 67$
;***********************************************************************
65$:	CPX #ZSHOT+NMCOMINES
	BCS 66$
	CPX #ZSHOT	;DID ONE SHOO THE OTHER?
	BCC 66$		;NOPE
67$:	RTS
66$:	LDA #0
	STA SUPRSAC	;CLEAR SUPER SAUCER
;****MAY WISH TO SLOW DOWN SAUCER HERE*******
70$:	JSR UPDIF
	LDX TEMP3+1
	JMP KILXSCR		;(EXIT POINT)
DSTR60:	CPY #ZSHIP
	BCC PDSTXSHIP		;WAS A ROCK OR KILLER MINE OR SAUCER
;DO NOT COLIDE WITH SELF
	JSR BACKOUT
	LDX TEMP3+1		;Y COLLISION OBJECT
	JSR BACKOUT
	LDY TEMP3
	JMP BOUNC8		;BOUNCE THE TWO SHIPS (EXIT POINT)
;SAUCER OWNERSHIP
;************************************************************************
;* THE BELOW TABLE IS NOT USED ANYWHERE BUT IS LEFT IN FOR THE SAME     *
;* REASON AS ABOVE. I DID NOT WISH TO RE-RELEASE ALL THE EROMS.         *
;*		LAZY HUH??????????                                      *
;************************************************************************
SAUOWN:	.BYTE 20,20,21,21
;************************************************************************
;VALUE FOR OWNERSHIP NEGATIVE FOR NOBODY
OWNERTABLE:
	
	.BYTE 00
	.BYTE 01		;SHIPS
	
	.REPT NMPAIR
	.BYTE -1
	.ENDR
	
	.REPT NMCOMINES
	.BYTE -1
	.ENDR
	.REPT NMP0MINES
	.BYTE 0
	.ENDR
	
	.REPT NMP1MINES
	.BYTE 1
	.ENDR
	
;CHECK FOR SHIELD CONDITION. POSSIBLY
;DESTROY SHIP(X)
PDSTXSHIP:
	LDA X,ENTER-ZSHIP	;ENTERING?
	BNE 51$			;IF YES, PRETEND SHIELDS
	LDA X,TOGGLE-ZSHIP
	AND I,SHLDON
	BEQ DSTXSHIP		;SHIELDS WERE NOT ON
;IF HIT THEN DECREASE SHIELD ENERGY
	LDA GAME
	CMP #2			;GAME 2&3, SHIELDS LAST LONGER
	BCC 10$
	LDA X,SHLDENG-ZSHIP
	SEC
	SBC #0C
	JMP 20$
10$:	LDA X,SHLDENG-ZSHIP
	SEC
	SBC I,18
20$:	CMP I,MINSHENG
	BCS 50$
	LDA I,0
50$:	STA X,SHLDENG-ZSHIP
51$:	LDY TEMP3+1		;COLLISION Y
;SEE SECTION SBTTL'ED MESS UP COLLISIONS LATCHES FOR EXPLANTATION
	LDA X,COLLIS-ZSHIP
	AND I,0FF-COLBIT
	STA TEMPA		;OLD COLLISION OBJECT
	TYA
	STA X,COLLIS-ZSHIP	;NEW COLLISION OBJECT
	CPY TEMPA		;COMPARE OLD AND NEW
	BEQ 90$			;DO NOT BOUNCE AGAIN
	BIT TOGCOMB
	BPL 60$			;NOT THE PAIR
	LDX I,ZPAIR
	JSR REVANGULAR
60$:	JSR BOUNCE
90$:	RTS
	.SBTTL DSTXSHIP-DESTROY X,SHIP
;X RELATIVE TO OBJ
;ENTRY THROUGH PDSTXSHIP
DSTXSHIP:
	STX TEMP1		;FOR COMOWAY
	JSR EXPLOS		;EXPLOSION SOUND
	LDA I,0A0		;SET FULL EXPLOSION LENGTH
	STA X,OBJ
	BIT TOGCOMB		;COMBINED LIVES??
	BPL 60$			;NOT COMBINED LIVES
	.SBTTL ***TEMP SPACE STATION COLLISION*******
	LDA X,PRTDAMAGE-ZSHIP
	BMI 98$			;DAMAGED ALREADY????
	LDY X,REVSHIP-ZSHIP		;GET INDEX FOR OTHER SHIP
	LDA Y,PRTDAMAGE-ZSHIP		;DAMAGED
	BMI 98$				;YEP
	DEC X,PRTDAMAGE-ZSHIP		;DAMAGE IT
	LDA #0B8			;PARTIAL DAMAGE COUNT
	STA X,EXPDEC-ZSHIP		;BOTH EXPLOSIONS
	STA X,OBJ
	JSR EXPSET			;INIT EXPLOSION PIECES 
	JMP 62$
98$:	LDA #0
	STA X,EXPDEC-ZSHIP	;ONLY PIC_ECES
	LDA SPARKTIME
	BPL 80$			;ALREADY STARTED DEATH
	DEC SPARKTIME		;START SPARKLE
	BNE 61$			;ALWAYS
;IF PLAYING COMPETITIVE GAME
;THEN ONLY LOSE
;LIVES BY GETTING HIT BY ROCKS
;IF GET HIT BY SHOT, OTHER PLAYER
;GET POINTS
60$:	LDA GAME
	CMP #02
	BCC 62$			;GAMES 0 & 1 DON'T NEED THIS
61$:	BIT ATSTG
	BMI 62$			;SKIP IF BLOCKS TOO
;GET ALL OBJECTS TO MINMUM SPEED
	LDX I,ZLENEMY
66$:	LDA X,OBJ
	BEQ 68$
	LDA X,XINC
	JSR MINVEL
	STA X,XINC
	LDA X,YINC
	JSR MINVEL
	STA X,YINC
68$:	DEX
	BPL 66$
	LDX TEMP1
	LDA I,0FF		;MAY BE A DEC
	STA SCRFUL		;GET ROCKS OFF SCREEN
	BNE 80$			;ALWAYS
;
62$:	LDY TEMP3		; TEMP3 HOLDS ORIGINAL COLLISION X	;OR ELSE SHIP
	CPY I,ZP0MINES
	LDA I,0		; DEFAULT FOR WHOSHOT
	BCC 65$
;WAS HIT BY OTHER PLAYER
;BE DEAD A SHORTER TIME
	LDA I,0E0		;START FLASHING TIME
	STA X,OBJ
	STA X,EXPDEC-ZSHIP		;ONLY FLASH'
	JSR EXPSET
	LDX TEMP1
	LDA I,50			;FULL SHIP VALUE
	LDY X,PRTDAMAGE-ZSHIP
	BPL 63$
	LDA I,25		;CRIPPLED SHIP VALUE
63$:	JSR POINTS
	LDX TEMP1
	LDA I,0FF
	BNE 75$			;ALWAYS
65$:
70$:
;ONLY GIVE PARTIAL DAMAGE WHEN
;HIT BY NON SHIP IN COMPETITION GAME
;MORE NEGATIVE FOR MORE PARTIAL DAMAGE
	DEC X,PRTDAMAGE-ZSHIP
	BMI 75$			;NOT AT LIMIT
	INC X,PRTDAMAGE-ZSHIP
75$:	STA X,WHOSHOT-ZSHIP
80$:	LDA I,0A0
	STA X,SDELAY-ZSHIP
90$:
	JSR COMALT			;POINT ALL OF HIS AT THE OTHER GUY
	LDY TEMP3+1
	JMP SPLIT		;(EXIT)
	.PAGE
	.SBTTL COMAWAY-GET COMET TO GO OFF SCREEN
;GET ALL COMETS POINTED AT THIS SHIP
;OFF OF THE SCREEN
;USES Y, TEMP1
;OUTPUT COMTYP,COMOFF
COMAWAY:
	LDY I,NMCOMETS-1
10$:	LDA Y,COMTYP
	ORA I,1			;DIE AT EDGE OF SCREEN BIT
	STA Y,COMTYP
30$:	DEY
	BPL 10$
	LDA GAME
	BEQ 40$			;NOT FOR TWO FIGHTERS
	LDA I,0FF
	STA COMOFF		;SIGNIFY ONE SHIP HAS DIED.
40$:
	RTS
	.SBTTL	COMALT -- RETARGET COMETS
COMALT:	LDY #NMCOMETS-1
	TXA
	EOR #01			;POINT AT OTHER
	TAX
10$:	LDA Y,CTARGET
	BEQ 30$			;NOT ACTIVE
	TXA			;RECALL NEW
	STA Y,CTARGET
30$:	DEY
	BPL 10$
	RTS
	.SBTTL UPDIF-UP THE DIFFICULTY WHEN A MONSTER IS HIT

;SEES WHO OWNER WAS. (NO ACTION FOR COMPUTER OWNER)
;DESTROYS X
LTMP1	=TEMP1
LTMP1B	=TEMP1+1
DIFTBL:	BADL UPDIF3-1
	BADL UPDIF4-1
	BADL UPDIF5-1
	BADL UPDIF6-1
DIFTBH:	BADH UPDIF3-1
	BADH UPDIF4-1
	BADH UPDIF5-1
	BADH UPDIF6-1
;GAMES	0=2 PLAYER FIGHTER
;	1=1 PLAYER FIGHTER
;	2=2 PLAYER STATION
;	3=1 PLAYER STATION
; THE ABOVE TABLE JUMPS IS USED TO JUMP TO THE PROPER UPDATE ROUTINE
;
;
UPDIF:
	LDX OWNER
	BPL 10$
	RTS			;(EXIT)
10$:	INC X,LMONHITS
	BNE 20$
	INC X,UMONHITS
20$:
;FOR USE IN COMBINED GAMES
	LDA LMONHITS
	CLC
	ADC LMONHITS+1
	STA LTMP1
	LDA UMONHITS
	ADC UMONHITS+1
	STA LTMP1B
	LDY GAME		;GET GAME NUMBER
	LDA Y,DIFTBH		;LOW BYTE OF ADDRESS
	PHA
	LDA Y,DIFTBL		;AND HIGH BYTE
	PHA
	RTS			;*********"JUMP" TO PROPER ROUTINE
UPDIF3:
;COMPETITIVE GAME
	LDA X,UMONHITS
	BNE 20$
	LDA X,LMONHITS
	CMP I,20
	BCC 30$
;INCREASE PROBABILITY OF STARTING OUT AS COMET INSTEAD OF DWARF
20$:	INC X,PROBCOMET
	BPL 30$
	DEC X,PROBCOMET		;HOLD AT 7F
30$:	LDA X,UMONHITS
	BNE 50$
	LDA X,LMONHITS
	AND I,7
	BNE 50$
;INCREASE DWARF RAMPING SPEED

35$:	INC X,DWFRMP
	BPL 50$			;MAX IS 80
	DEC X,DWFRMP
;INCREASE DWARF STARTING SPEED
50$:	LDA X,LMONHITS
	CMP I,3
	BNE 60$
	LDA X,COMTABLE
	STA X,COMSTART

60$:
70$:	CLC
; GET HARDED AS YOU HIT MORE
	LDA LMONHITS
	ADC LMONHITS		;TOTAL HITS BETWEEN THEM
	AND #07			;EVERY 8 HITS....
	BNE 80$
	INC COMLIMIT		;...GET HARDER
80$:	RTS
COMTABLE:.BYTE ZCOMET+<NMCOMETS/2>-1
	.BYTE ZCOMET+NMCOMETS-1
;ALONE GAME-1 PLAYER FIGHTER
UPDIF4:
	LDA X,UMONHITS
	BNE 20$
	LDA X,LMONHITS
	CMP I,20
	BCC 30$
	AND #01		;1 OF 2 AFTER 20
	BNE 30$
;INCREASE PROBABILITY OF STARTING OUT US COMET
;INSTEAD OF DWARF
20$:	INC X,PROBCOMET
	BPL 30$
	DEC X,PROBCOMET
30$:	LDA X,UMONHITS
	BNE 50$
	LDA X,LMONHITS
	AND I,7
	BNE 50$
;INCREASE DWARF RAMPING SPEED

	INC X,DWFRMP
	BPL 50$
	DEC X,DWFRMP			;DON'T LET PAST 80
;INCREASE DWARF STARTING SPEED
50$:	LDA X,LMONHITS
	CMP I,4
	BEQ 58$
	CMP I,15.
	BEQ 58$
	CMP I,25.
	BNE 60$
58$:	INC COMSTART
	INC COMLIMIT
60$:	LDA X,UMONHITS
	BNE 65$
	LDA X,LMONHITS
	CMP I,40.
	BCC 70$			;NOT ENOUGHT
;INCREASE THE SPEED OF COMETS AFTER BECOME COMETS.
65$:
70$:	RTS
UPDIF5:
;TWO PLAYER SPACE STATION
	LDA LTMP1B
	BNE 20$
	LDA LTMP1
	CMP I,20
	BCC 30$
;INCREASE PLANE OF STARTING OUT AS COMET
;INSTEAD OF DWARF
20$:	INC X,PROBCOMET
	BPL 30$
	DEC X,PROBCOMET
30$:	LDA LTMP1B
	BNE 35$
	LDA LTMP1
	CMP I,10
	BCC 50$			;NOT ENOUGH
	AND I,0F
 	BNE 50$
;INCREASE DWARF RAMPING SPEED

35$:	INC X,DWFRMP
	BPL 50$			;DON'T LET PAST 80
	DEC X,DWFRMP
;INCREASE DWARF STARTING SPEED
50$:	LDA LTMP1B
	BNE 70$			;ALREADY UPPED
	LDA LTMP1
	AND #0F			;EVERY 16 HITS...
	BNE 70$
	INC COMLIMIT		;...GET HARDER
	INC BCOMSTART+1
	INC BCOMSTART
70$:	RTS
;TWIN GAME - 1 PLAYER SPACESTAION
UPDIF6:
	LDA LTMP1B
	BNE 20$
	LDA LTMP1
	CMP I,20
	BCC 30$
;INCREASE PLANE OF STARTING OUT US COMET
;INSTEAD OF DWARF
20$:	INC X,PROBCOMET
	BPL 30$
	DEC X,PROBCOMET
30$:	LDA LTMP1B
	BNE 35$
	LDA LTMP1
	CMP I,10
	BCC 50$			;NOT ENOUGH
	AND I,0F
	BNE 50$
;INCREASE DWARF RAMPING SPEED

35$:	INC X,DWFRMP
	BPL 50$			;DON'T LET PAST 80
	DEC X,DWFRMP
;INCREASE DWARF STARTING SPEED
50$:	LDA LTMP1B
	BNE 60$			;ALREADY UPPED
	LDA LTMP1
	CMP I,7
	BNE 54$

	INC BCOMSTART+1
	INC COMLIMIT
54$:	CMP I,0F
	BNE 58$
	INC BCOMSTART
	INC COMLIMIT
58$:	CMP I,25
	BNE 60$
59$:	INC BCOMSTART+1
	INC COMLIMIT
60$:	LDA LTMP1
	BCC 70$			;NOT ABOVE LAST LIMIT
	AND #07
	BNE 70$
	INC COMLIMIT
	INC BCOMSTART+1
	INC BCOMSTART
;INCREASE THE SPEED OF COMETS AFTER BECOME COMETS.
70$:	RTS
	.SBTTL	BACKOUT-BACK AWAY FROM COLLISION

;MOVES OBJECT X BACK BY AMOUT OF ITS CURRENT VELOCITY
;ENTRY X

;USES Y
BACKOUT:
	LDY I,0			;SIGN EXTENSION
	LDA X,XINC
	JSR COMP
	BPL 10$
	DEY
10$:	CLC
	ADC X,OBJXL
	STA X,OBJXL
	TYA
	ADC X,OBJXH
	AND I,XRIGHT-1		;SCREEN LIMIT
	STA X,OBJXH

;SIMILIAR FOR Y COMPONENT.

	LDY I,0			;SIGN EXTENSION
	LDA X,YINC
	JSR COMP
	BPL 20$
	DEY
	CLC
20$:	ADC X,OBJYL
	STA X,OBJYL
	TYA
	ADC X,OBJYH
	BMI 50$			;WENT BELOW BOTTOM
	CMP I,YTOP
	BCC 60$		;STAYED ON SCREEN
	LDA I,0
	BEQ 60$			;ALWAYS
50$:	LDA I,YTOP-1
60$:	STA X,OBJYH
	RTS
	.SBTTL BOUNCE - COLLISION BOUNCE
	
;X SHOULD BE A SHIP, THE SMALLER ONE
;Y CAN BE ROCK OR KILLER MINE
BOUNCE:;TREATS ALL OBJECTS AS HAVING
;THE SAME MASS
;CHECKS CURRENT POSITION TO
;DETERMINE WHERE THEY CAME FROM SO
;CAN SET MINIMUM VELOCITY.
;FOR THE Y(ROCK,MINE,SAUCER)OBJECT
;USES TEMP 5

;IF GOT HERE FROM PDSTXSHIP
;TEMP3,TEMP3+1 COULD BE REVERSED
;IF FROM A SHOT, Y=A SHIP
	CPY I,ZSHIP
	BCS 91$		;NO BOUNCE
	BIT SUPRSAC		;SUPER SAUCER??
	BPL 10$		;NOPE
	CPY #ZSAUCER+1		;COTROLL SAUCER??
	BNE 10$			;NOPE!
	DEY			;PRETEND CONTROLL SAUCER!
10$:	JSR BOUNC8
	LDA Y,XINC
	CMP I,4
	BCC 20$
	CMP I,-3
	BCC 50$
;VELOCITY IS IN TROUBLE RANGE
;COMPARE X POSITION
20$:	LDA X,OBJXL
	CMP Y,OBJXL
	LDA X,OBJXH
	SBC Y,OBJXH
	LDA I,-3
	BCS 30$
	LDA I,3
30$:	STA Y,XINC
50$:
	LDA Y,YINC
	CMP I,4
	BCC 55$
	CMP I,-3
	BCC 80$
;VELOCITY IN TROUBLE RANGE
;COMPARE Y POSITIONS
55$:	LDA X,OBJYL
	CMP Y,OBJYL
	LDA X,OBJYH
	SBC Y,OBJYH
	LDA I,-3
	BCS 60$
	LDA I,3
60$:	STA Y,YINC
;FIND NEW ANGLE OF TRAVEL
80$:	CPY I,ZSAUCER

	BCS 91$			;SAME OLD ANGLE FOR SAUCER
	CPY I,NMROCK
	BCC 91$
	STX TEMP5		;REMEMBER ENTERING X
	LDX Y,XINC
	LDA Y,YINC
	TAY
	JSR ATAN
	LDX TEMP5
	LDY TEMP3+1
	STA Y,CANGLH-ZCOMETS
;IF COMET, SHOW DOWN THE
;ANGLE CHANGE CAPABILITY.
	CPY I,ZKLMINES
	BCS 91$
	LDA Y,CANGCH-ZCOMET
	LSR
	LSR
	STA Y,CANGCH-ZCOMET
91$:	RTS
;SWITCH VELOCITIES
BOUNC8:	LDA X,XINC
	PHA
	LDA Y,XINC
	STA X,XINC
	PLA
	STA Y,XINC
	LDA X,YINC
	PHA
	LDA Y,YINC
	STA X,YINC
	PLA
	STA Y,YINC
	RTS
	.SBTTL GWRANGLE-GET WRAP AROUND ANGLE
;DETERMINE CLOSEST ANGLE, ACCOUNTING FOR
;WRAP AROUND
;FROM OBJECT X, SIGHTING OBJECT Y (RELATIVE TO OBJ)
GWRANGLE:
	LDA Y,OBJXH
	SEC
	SBC X,OBJXH
	BMI 30$			;NEGATIVE
	CMP I,<XRIGHT/2>+3	;3 FOR HYSTERRIS
	BCC 50$
	SBC I,XRIGHT		;WRAP AROUND
	BNE 50$			;ALWAYS
30$:	CMP I,<-XRIGHT/2-3>&0FF
	BCS 50$			;OK AS IS
	ADC I,XRIGHT		;CARRY WAS CLEAR, WRAP AROUND
50$:	PHA			;PUT X DIFFERENCE ON STACK
	LDA Y,OBJYH
	SEC
	SBC X,OBJYH
	BMI 70$			;WAS NEGATIVE
	CMP I,<YTOP/2>+2	;2 FOR HYSTERESIS
	BCC 80$			;ACCEPTABLE POSTIVE MOUNT
	SBC I,YTOP-1		;-1 SINCE CARRY CLEAR
	BNE 80$
70$:	CMP I,<-YTOP/2-2>&0FF
	BCS 80$
	ADC I,YTOP
80$:
	JMP KLMI5
;FIND X AND Y DIFFERENCE IN COORDINATES
;ASSUME SHIP ARE SIGHTING IS IN Y, RELATIVE TO OBJ

KLMI3:	LDA Y,OBJXH
	SEC
	SBC X,OBJXH
	PHA			;SAVE X DIFFERENCE ON STACK

	LDA Y,OBJYH
	SEC
	SBC X,OBJYH

KLMI5:	TAY			;NUMERATOR FOR ATAN
	PLA
	TAX			;DENOMINATOR FOR ATAN
	JMP ATAN		;(EXIT)
;ACC NOW HOLDS ANGLE TO SHIP(Y)
KLMIEX:JMP ENEMY		;DO ENEMY
	
	.SBTTL KLMINES - KILLER MINES
;MOVE KILLER MINES
;SET XINC,YINC OF KILLER MINES ACCORDING TO
;THEIR CURRENT ANGLE.
;MAKES CALLS TO ATAN,MULTIPLY,COS,SIN
;USES TEMP1(TEMP2,TEMP2+1),TEMP3,(TEMP4,TEMP4+1)
KLMINES:
;ONLY CHANGE ONE PER FRAME
	LDA FRAME
	AND #3F				;1 OF 7 MINES MAX
	LSR				;DO ONLY ON EVEN FRAMES
	BCS KLMIEX
	LSR
	BCS KLMIEX			;BOTTOM 2 BITS
	LSR 
	BCC KLMIEX			;AND THIS BIT 1
	CMP I,NMKLMINES
	BCS KLMIEX
;	CLC
	ADC I,ZKLMINES
	TAX
	LDA X,OBJ
	BEQ KLMIEX
	BMI KLMIEX		;EXPLODING COMET
	STX TEMP3
	LDY X,KTARGET-ZKLMINES	;SHIP TO TRACK REL TO OBJ


;MAKE CHANGE TO KILLER MINE ANGLES

KLMI6:	JSR KLMI3		;ACC HOLDS ANGLE TO OBJECT Y TO TRAM OBJECT X
KLMI7:	LDX TEMP3
	CPX I,ZKLMINES
	BCS 20$			;WAS KILLERMINE
	TAY			;STORE ANGLE
	LDA X,COMTYP-ZCOMET		;LOW BIT ON SAYS GO STRAIGHT
	LSR
	TYA			;RESTORE ANGLE FROM STACK
	BCC 25$			;NORMAL
	BCS 35$			;HEADED OFF
20$:	BIT KLMOFF
	BMI 35$			;MINES GOING OFF SCREEN
25$:	SEC
	SBC X,CANGLH-ZCOMET
	ASL			;CARRY SET IF SHIP ON RIGHT
	LDA X,CANGCH-ZCOMET	;ANGLE INCREMENT ALLOWED
	BCC 30$
	EOR #0FF
	ADC #0			;CARRY SET
30$:
;DIVIDE BY 4
;THE INITIAL STATE OF TEMPA IS NEGLIGIBLE
	CMP I,80
	ROR
	ROR TEMPA
	CMP I,80
	ROR
	ROR TEMPA
	TAY			;STORE UPPER BYTE ON STACK
	LDA TEMPA
	CLC
	ADC X,CANGLL-ZCOMET
	STA X,CANGLL-ZCOMET
	TYA			;RECALL UPPER BYTE FROM STACK
	ADC X,CANGLH-ZCOMET
	STA X,CANGLH-ZCOMET

;FROM UPPER BYTE OF KILLER MINE ANGLES,
;DETERMINE XINC,YINC
;WHEN A MINE IS STUNNED, WE SET
;ITS SPEED VALUE TO ZERO. IT IS INCREASED
;HERE UNTIL IT REACHES ITS FINAL SPEED,
;WHICH IS IN OBJ.
;ALL SPEEDS TO BE POSITIVE
35$:	LDA X,CSPEED-ZCOMET
	CPX #ZKLMINES
	IFCS			;KILLERMINE
	SBC X,OBJ		;DIFFERENCE BETWEEN NOW & THEN
	IFCC			;NOT AT SPEED
	JSR COMP
	LSR
	IFEQ
	LDA #1			;AT LEAST 1
	ENDIF
	ADC X,CSPEED-ZCOMET
	ELSE
	LDA X,CSPEED-ZCOMET	;HOLD AT PRESENT
	ENDIF
	ELSE			;NOT KILLER MINE
	CMP X,OBJ
	BCS OK1			;AT SPEED
	ADC #4			;ELSE ADD 4 ALWAYS
	CPX #ZCOMET+<NMCOMETS/2>
	IFCS			;SOME COMETS ACCEL FASTER THAN OTHERS
	ADC DWFRMP+1		;SECOND PLAYER TARGETS
	ELSE
	ADC DWFRMP
	ENDIF
	ENDIF
	STA X,CSPEED-ZCOMET
OK1:

	STA TEMP1		;MULTIPLIER IN MULTIPLY
	LDA X,CANGLH-ZCOMET
	JSR COS			;RESULT IS X COMPONENT
	JSR MULTIPLY		;MULTIPLY BY KSPEED
;	LDA TEMP2+1		;UPPER BYTE OF RESULT
	LDX TEMP3
	STA X,XINC

;SIMILAR FOR Y COMPONENT

	LDA X,CANGLH-ZCOMET
	JSR SIN			;RESULT IS Y COMPONENT
	JSR MULTIPLY		;MULTIPLYBY KSPEED
;	LDA TEMP2+1
	LDX TEMP3		;IS THIS NEEDED?YES, SIN USES X
	STA X,YINC
90$:	;FALL THROUGH TO ENEMY

;FIGURE OUT WHICH ENEMY TO LAUNCH
;WHEN IS RIGHT FRAME AND ROCK TIMER
;OR ENEMY TIMER OR ROCKS ARE LOW,
;A RANDOM ENEMY, EITHER SAUCER OR COMET
;APPEARS DIRECTED AT SOMEONE DEPENDING
;ON THE FRAME AND THE GAME.
;WANT TO WAIT UNTIL TARGET IS ALIVE
;FOR COMPETITIVE, WANT TO WAIT
;FOR OTHER PLAYER, IF HE IS ELIGIBLE
;TO COME BACK
ENEMY:	LDA UPDFLG
	AND UPDFLG+1		;ATTRACT INITIALS?
	BPL 90$
	LDA FRAME
	AND I,3
	BEQ 10$
	CMP I,1
	BEQ 90$			;NO ACTION
;MUST BE 2 OR 3
;FIRE APPROPRIATE SAUCER
	JMP EFIRE
90$:	RTS
;DETERMINE THE TARGET
10$:
	LDA FRAME		;MULTIPLE OF 4
	AND I,4
	LSR
	LSR
	TAX			;X=0 OR 1
	STA TEMP1		;WHO OWNS THE ENEMY
	BEQ 11$			;SAUCER 0 ALWAYS OK
	BIT SUPRSAC		;SUPER SAUCER?
	BMI 90$			;SKIP #1 IF SUPER SAUCER
11$:	ADC I,ZSHIP		;CARRY CLEAR
	TAY			;MAYBE TEMP1+1 NOT NEEDED
;IF ALONEGAME, WANT ALL ENEMIES TO BE AGAINST THE SINGLE PLAYER
	LDA GAME
	CMP I,ALONEGAME
	BNE 12$			;NOT ALONE GAME
	TXA
	BEQ 12$			;IF X=0, THIS IS NORMAL
	LDA FRAME+1
	AND I,0E0
	BEQ 90$			;TOO EARLY (FOR THIS EXTRA TROUBLE)
	DEY			;AGAINST SINGLE PLAYER
12$:	STY TEMP1+1
	LDA X,OBSAUCER
	BNE 18$			;SAUCER ENGAGED
	LDA ATRACT
	BEQ SCENT5		;ACC=0, MEANS TARGET A ROCK
;IF IN BONUS TIME, NO NEW ENEMIES
	LDA RDELAY
	BNE 92$
18$:
20$:	LDA X,PRTDAMAGE
	BPL 30$			;THIS SHIP IS WHOLE
;IF OTHER SHIP ALIVE, GET HIM
22$:	LDA Y,REVSHIP-ZSHIP
	TAY
	LDA Y,OBJ		;OTHER SHIP.
	BEQ 30$
	BMI 30$
	STY TEMP1+1		;OTHER SHIP ALIVE, GIVE HIM THE PROBLEMS
;SEE IF ALIVE
30$:	LDY TEMP1+1
	LDA Y,OBJ
	BMI 90$
	BEQ 90$
	BIT TOGCOMB
	BPL 40$		;NOT THE PAIR
;FIND BEST OF EACH
	LDA RTIMER
	ORA RTIMER+1
	BEQ 60$			;TIME
	LDA ENMDEL
	ORA ENMDEL+1
	BEQ 60$
	BNE 80$
;OTHER TYPE, SEPARATE PLAYERS
40$:	LDA GAME
	BEQ 50$			;COMPET. GAME
;SINGLE ALONE GAME
	LDA RTIMER
	BEQ 60$
	LDA ENMDEL
	BEQ 60$
	BNE 80$
50$:
	LDA X,RTIMER
	BEQ 60$
	LDA X,ENMDEL
	BEQ 60$
80$:	LDA DIFCTY
	BEQ 92$
	CMP NROCKS
	BCS 60$
92$:	RTS
60$:	
;DETERMINE WHICH TYPE OF ENEMY TO ENTER
	LDA WAVE		;WAVE 1?
	LSR
	BEQ SCENT5		;ROCK DIRECTED SAUCER ALWAYS
	LDA POKEY1+POKRAN
	AND I,7
;3:7 FOR COMETS
;1:2 FOR NORMAL SAUCER
;0   FOR ROCK DIRECTED SAUCER
	CMP I,0+1
	BCC SCENT5		;ROCK DIRECTED SAUCER
	CMP I,3
	BCS SCENT2		;NORMAL SAUCER
	LDA NROCKS
	BEQ 92$
	JMP INCOMET
	
;SAUCER ENTRY
SCENT:
SCENT2:	LDA TEMP1+1
SCENT5:	LDY X,OBSAUCER
	BEQ 1$
100$:	RTS

1$:	STA X,ETARGET		;OVERRIDES EXISTING TARGET
	LDA X,ETIMER
	BNE 100$
	LDA LNGTIMER+1
	BMI 6$			; HE DAWDLED, ENTER SAUCER DESPITE ROCKS
	LDY NROCKS
	CPY I,8
	BCS 100$
;EARLY IN ALL BUT FIGHT GAME
;ONLY ALLOW ONE SAUCER
	LDA GAME
	BEQ 6$
	LDA OBSAUCER
	ORA OBSAUCER+1
	BEQ 6$
	LDA X,UMONHITS
	BNE 6$
	LDA X,LMONHITS
	CMP I,60.
	BCC 100$
6$:	LDA POKRAN+POKEY2	;RANDOM NUMBER
	AND #40			;SELECT PIC
	ORA #1			;ACTIVATE OBJECT
	STA X,OBSAUCER
	CPX #0			;ONLY FOR SAUCER 0
	BNE 7$
	LDY #0			;GUESS REGULAR SAUCER
	LDA OBSAUCER+1		;SAUCER 1 ACTIVE??
	BNE 3$			;IF YES, NO SUPERSAUCER
	LDA POKEY2+POKRAN	;*****TEMP DEC MAKER *****
	AND #1
	BNE 3$
	LDA COMTIMER		;ONSLAUGHT??
	BNE 3$			;NO SUPER DURING ONSLAUGHT
	LDA DIFCTY		;DIFCTY AT 3??
	CMP #03
	BCC 3$			;DON'T ALLOW TILL WAVE 3 AT LEAST
	LDA #41
	STA OBSAUCER		;ALWAYS THIS PIC
	LDY #80			;SET TO SUPER SAUCER
3$:	STY SUPRSAC
7$:	LDA I,0
	STA X,OBJXL+ZSAUCER
	STA X,OBJXH+ZSAUCER
	STA X,OBJYL+ZSAUCER
	LDA POKEY1+POKRAN	; RANDOM NUMBER
	STA TEMPA
	AND #1F			;APPROX 1 SCREEN
	CMP I,YTOP
	BCC 10$			;MUST BE 0 TO 767
	AND I,YTOP-1
10$:	BIT SUPRSAC
	BPL 15$			;NOT SUPRESAUCER
	AND #03			;PREVENT WRAP ON START
15$:	STA X,OBJYH+ZSAUCER	;STARTING VERTICAL POSITION
	INC X,OBJYH+ZSAUCER	;1TO 3 MINIUM START
	LDA WAVE
	LSR
	LSR			;WAVE #/4
	TAY
	CPY #04
	BCC 16$
	LDY #4
16$:	LDA Y,SSPOS		;GET MIN POS SAUCER SPEED
	BIT TEMPA		; ORIGINAL RANDOM NUMBER
	BVS 20$			;PICK DIRECTION
	LDA I,XRIGHT-1
	STA X,OBJXH+ZSAUCER
	DEC X,OBJXL+ZSAUCER	;START ON RIGHT SIDE
	LDA Y,SSMINUS		;MIN NEG SPEED
20$:	LDY X,SCSHSP		;THIS GUY SHOOTING FAST?
	STA X,SAUMIN
	BIT SUPRSAC		;SUPER SAUCER?
	BPL 25$			;NOPE
	ASL			;MOVE 2 TIMES SPEED
25$:	STA X,XINC+ZSAUCER
	CLC
	LDA DIFCTY		;GET STARTING DISTANCE
	ADC #04			;MIN DISTANCE (THIS MAXES AT 9)
	STA SUPRDIS
	LDA I,60.		;SHOULD BE ONE SCREEN WIDTHS DELAY
	STA X,ETIMER
;ONLY USE SMALL SHIP
40$:				;WHEN ENEMY HAS SUCCESSFULLY ENTERED,
90$:
				;RESET THE TIMERS
EHASENTERED:
;ONCE AN EMEMY HAS ENTERED, RESET THE TIMERS
;
;ENTRY (TEMP1)=WHO ENEMY IS TARGED TO (0,1)
	LDX TEMP1
HASENT:	LDA X,SENMDEL
	STA X,ENMDEL

;SET ROCK COUNTER HIGH ENOUGH SO
;THAT SECOND ENEMY NOT COME IMMEDIATELY.
	LDA X,MXRTIMER
	LSR
	LSR
	CMP X,RTIMER
	BCC 80$
	STA X,RTIMER
80$:
EFIREX:	RTS
	
	.SBTTL EFIRE-ENEMY FIRE CONTROL
;EFIRE-ENEMY FIRE CONTROL OF SAUCER(X) RELATIVE TO OBSHIP
;USES TEMP3 TO STORE RELATIVE OBJECT
SAUANG:	.BYTE 040,0C0		;ANGLE TO SHOOT
EFIRE:	SBC I,2			;CARRY WAS SET
	TAX			;X NOW 0 OR 1
	STX TEMP3
	LDA FRAME
	AND I,0F0		;LAST TWO BITS SORT OF KNOW
	ASL
	BNE 10$			;NOT TIME TO CHANGE DIRECTION
	LDA POKEY1+POKRAN
	AND I,03
	TAY
	LDA Y,EXVEL		;VERTICAL SAUCER VELOCITIES
	STA X,YINC+ZSAUCER
10$:
;THIS TEST WILL CAUSE SAUCER TO NOT SHOOT SOMETIMES
	BIT LNGTIMER+1
	BMI 30$		; HE DAWDLED, NOT CARE ABOUT ROCKS

	LDA NROCKS
	CMP I,10.
	BCS EFIREX		;NOT ENOUGH TIME FOR COLLISIONS
30$:	DEC X,EDELAY
	BEQ 50$			;NOT TIME TO SHOOT
40$:	RTS			;EXIT
50$:	BIT SUPRSAC		;SUPER SAUCER??
	BPL 51$			;NOPE
	LDA X,SAUANG
	STA X,ANGLE		;FORCE ANGLE
	LDA SUPRTIM		;AND SET SHOOT DELAY TIMER BASED ON DISTANCE
	STA X,EDELAY
	JMP DOFIRE	
51$:	LDA I,10		;WAS 10. CHEAP WAY TO LIMIT SOTS
	LDY X,SCSHSP		;FAST SHOTS??
	BPL 55$			; NO DAWDLE
	LDA I,9			; CAN SHOOT TWO
55$:	STA X,EDELAY		;DELAY BEFORE NEXT SHOT

EFIRE3:
; SHOOT FROM SAUCER X AT SHIP Y
; X RELATIVE TO ZSAUCER, Y TO OBJ
; BECAUSE FIRE WANTS COMMON BASE
;ENTRY (TEMP3)=X, REL TO OBSAUCER
	LDY X,ETARGET
	CPY I,NMROCKS-1
	BCS 50$
	LDY I,NMROCKS
10$:	LDA Y,OBJ
	BEQ 20$
	BPL 40$
20$:	DEY
	BNE 10$
;Y IS EITHER ORRIGINAL TARGET, AN ACTIVE ROD
;OR ELSE ROCK (0) IF NO ACTIVE ROCKS
40$:	TYA
	STA X,ETARGET
50$:	LDA X,OBJ+ZSAUCER
	BMI EFIREX		;DEAD
	BEQ EFIREX		;GONE
	LDA Y,OBJ
	BEQ EFIREX		;TARGET DEAD
	BMI EFIREX		;TARGET GONE
	LDA X,XINC+ZSAUCER	;BEGIN SIGNED DIVIDE BY TWO
	CMP I,80
	ROR
	STA TEMP2+1		;(XINC/2)
	LDA Y,OBJXL		;GET X DISTANCE TO SAUCER
	SEC
	SBC X,OBJXL+ZSAUCER
	STA TEMP2
	LDA Y,OBJXH
	SBC X,OBJXH+ZSAUCER
	ASL TEMP2
	ROL
	ASL TEMP2
	ROL			;-7F TO +7F
	SEC			;REMEMBER TORPEDO VELOCITY DEPENDS ON
	SBC TEMP2+1		;SAUCER SPEED
	PHA			;SAVE DENOMINATOR FOR ARC TANGENT
	LDA X,YINC+ZSAUCER
	CMP I,80
	ROR
	STA TEMP2+1
	LDA Y,OBJYL
	SEC
	SBC X,OBJYL+ZSAUCER
	STA TEMP2
	LDA Y,OBJYH
	SBC X,OBJYH+ZSAUCER
	ASL TEMP2
	ROL
	ASL TEMP2
	ROL			;-5F TO +5F
	SEC
	SBC TEMP2+1		;REMEMBER TO ACCOUNT FOR OUR MOTION
	TAY			;-60 TO +60
	PLA
	TAX			;RESTORED DENOMINATOR FOR ATAN
	JSR ATAN		;ARCTAN (Y/X)
	LDX TEMP3
	STA X,ANGLE
;MAKE SAUCE A LITTLE LESS THAN
;PERFECT. BETTER AFTER A COUPLE MINUTES
;THIS SECTION NOT CORRECT YET
	LDY FRAME+1
	CPY I,30		;UNITS OF ABOUT 4 SECONDS
	LDA POKEY1+POKRAN	;RANDOM WCOMBER
	AND I,0F
	BCC 90$			;IF NOT TO LIMIT YET
	LSR			;MORE ACCURRACY
90$:	BIT POKEY2+POKRAN
	BPL 95$
	EOR I,0FF		;INVERT
95$:
	ADC X,ANGLE		;DONT BE TOO GOOD-JUST CLOSE
96$:	STA X,ANGLE		;ANGLE TO AIM
DOFIRE:	LDY X,STLOK		;START LOOKING HERE
	LDA X,FIRSAU		;FIRE FOR SAUCER
	STA TEMP3+1		;2 SAUCER TORPEDOS FOR EACH SAUCER
	LDA X,SCSHSPEED
	ORA SUPRSAC		;OR SUPERSAUCER
	BPL DOFR2			;NO DAWDLE
	LDA I,80		;FAST FOR DWADLED
DOFR2:	STA TEMP2		;FAST OR SLOW
	JMP FIRE1		;FIRE A TORPEDO
	
STLOK:	.BYTE ZCOMINES+2-1,ZCOMINES+4-1	;STARTING VALUES
FIRSAU:	.BYTE ZCOMINES-1,ZCOMINES+4-1-2	;STOPPING VALUES
EXVEL:	.BYTE -10,-8,8,10	;DIFFERENT SAUCER VELOCITIES IN Y
SSPOS:	.BYTE 10,18,20,28,30
SSMINUS:	.BYTE -10,-18,-20,-28,-30
	.SBTTL FIRE-FIRE SHIPS TORPEDOS
;FIRE-	FIRE SHIP TORPEDOS
;
FIRE:	BIT ATRACT
	BMI 10$
	LDA POKEY1+POKRAN
	JMP 11$
10$:	LDA X,FIRESW		;BIT 6 ON WHEN PUSHED
11$:	ASL
	ASL
	ROR X,LASTSW		;??? CONFLICT
	BPL FIRE2		;IF NOT ON
	LDA X,LASTSW
	ASL
	BMI FIRE2		;WAS ON LAST TIME
;HAVE DETERMINED HE WANTS TO FIRE
	BIT TOGDRONE
	BPL 20$			;NOT DRONE GAME
;WILL TELL OTHER SHIP TO FIRE AFTERWARDS
	JSR 20$
	LDX I,1
20$:
	LDA X,OBJ+ZSHIP
	BEQ FIRE2		;DEAD
	BMI FIRE2		;EXPLODING
;NOT ALLOW TO FIRE IF HAVE SHIELDS ON
	LDA X,TOGGLE
	AND I,80
	BNE FIRE2		;SHIELDS ON
50$:
;QUICK FUDGE,FIRE3 USES X RELATIVE TO SAUCER
	INX		;X=1 OR 2
	INX
	STX TEMP3		;X= 2 OR 3 FOR 'FIRE3' ROUTINE
;WANT SHIPS SOTS TO BE FAST
	LDA I,80
	STA TEMP2
	LDA X,SERNDTABLE-ZZZSHIP
	STA TEMP3+1		;STOPPING INDEX FOR SHIP
	LDY X,SERSTTABLE-ZZZSHIP	;STARTING INDEX
	LDA X,PRTDAMAGE-ZZZSHIP
	BEQ 60$			;STARTING VALUE WHEN DAMAGED
	LDY X,PRTSTTABLE-ZZZSHIP
60$:
;TEMP2=80 FOR FAST, 0 FOR SLOW SHOT
FIRE1:	LDA Y,OBJ
	BEQ FIRE3		;WE FOUND INACTIVE ONE
	DEY
	CPY TEMP3+1
	BNE FIRE1		;TRY NEXT ONE
FIRE2:	RTS			;
	
FIRE3:
	LDA I,12
	BIT TEMP2
	BMI 10$			;FAST SOT
	ASL
10$:	STA Y,OBJ		;SET TIMER FOR LENGTH OF LIFE
	LDA X,ANGLE
	JSR COS			;COS(ANGLE)-SHIPS SPEED=X CHANGE TO TORPEDO
	CMP I,80		;DIVIDE BY 2
	ROR			;SS999.BBB
	BIT TEMP2
	BMI 15$			;FAST SHOT
	CMP I,80
	ROR			;DIVIDE AGAIN
15$:	STA TEMP1+1
	CLC
	LDX TEMP3
	ADC X,XINC+ZSAUCER
	BMI 23$			;IF NEGATVE
	CMP I,70
	BCC 30$			;IF MAX NOT EXCEEDED
	LDA I,6F
	BNE 30$			;ALWAYS
	
23$:	CMP I,-6F
	BCS 30$			;IF MIN NOT EXCEEDED
	LDA I,-6F
30$:	STA Y,XINC		;SET X SPEED
	LDA X,ANGLE		;SHIP'S ANGLE FOLLOWS SAUCER'S
	JSR SIN			;SIN (ANGLE)
	CMP I,80		;DIVIDE BY 2
	ROR			;SSAAA.BBB
	BIT TEMP2
	BMI 32$			;FAST SOT
	CMP I,80
	ROR
32$:	STA TEMP2+1
	LDX TEMP3
	CLC
	ADC X,YINC+ZSAUCER
	BMI 33$			;IF NEGATIVE
	CMP I,70
	BCC 40$			;IF IN RANGE
	LDA I,6F		;SET MAX
	BNE 40$			;ALWAYS
	
33$:	CMP I,-6F
	BCS 40$			;IF IN RANGE
	LDA I,-6F
40$:	STA Y,YINC
	LDA TEMP1+1		;SCALE TO PUT TORP AT NOSE OF SHIP
	CMP I,80
	ROR
	CLC
	ADC TEMP1+1		;MULTIPLY BY 3/2
	CLC
	ADC X,OBJXL+ZSAUCER	;ADD SHIPS POSITION TO GET STARTING POSITION
	STA Y,OBJXL
	LDA I,0
	ADC X,OBJXH+ZSAUCER
	BIT TEMP1+1		;TEST SIGN
	BPL 45$			;WAS POSITIVE
	CLC
	ADC I,-1		;CARRY CLEAR UNLESS ALLOW NEGATIVE
45$:	STA Y,OBJXH
	LDA TEMP2+1		;SCALE AGAIN TO PUT AT NOSE
	CMP I,80
	ROR
	CLC
	ADC TEMP2+1		;MULTIPLY BY 3/2
	CLC
	ADC X,OBJYL+ZSAUCER	;ADD SHIPS POSITION TO GET STARTING POSITION
	STA Y,OBJYL
	LDA I,0
	ADC X,OBJYH+ZSAUCER
	BIT TEMP2+1		;TEST SIGN
	BPL 50$			;WAS POSITIVE
	CLC
	ADC I,-1		;PERHAPS NOT NEEDED
50$:	STA Y,OBJYH
; X=2=PLAYER 0, X=3=PLAYER 1, X<2=SAUCER
	CPX #ZZZSHIP
	BCS 60$
	JMP SAUCSN		;JSR & RETURN
60$:	BNE 65$			;WHICH SHIP?
	JMP PL0FIR		;PLAYER 0
65$:	JMP PL1FIR		;PLAYER 1
	
SERSTTABLE:			;STARTING Y FOR SEARCH FOR EMPTY MINE
	.BYTE ZP0MINES+NMP0MINES-1
	.BYTE ZP1MINES+NMP1MINES-1
SERNDTABLE:			;ENDING Y FOR SEARCH FOR EMPTY MINE
	.BYTE ZP0MINES-1
	.BYTE ZP1MINES-1
PRTSTTABLE:		;ENDING Y IF DAMAGED
	.BYTE ZP0MINES
	.BYTE ZP1MINES
;THESE TABLES USED TO GO FROM
;(0,1) TO (ZSHIP,ZSHIP+1)
;WHITE REVSHIP USED TO GO FROM
;(ZSHIP,ZSIP+1) TO (ZSHIP+1,ZSHIP)
GZSHIP:	.BYTE ZSHIP
REVSHIP:
	.BYTE ZSHIP+1,ZSHIP
	.SBTTL START AN ENEMY	
	.PAGE
GETIN4:	LDA #0E0
	LDX #48
	JSR MESGPOS
	LDX #1
	JSR LANGOFF
	LDY I,2
	JSR VGMSG		;DISPLAY MESSAGE 2 - INSTRUCTIONS
	LDA #0B3
	LDX #38
	JSR MESGPOS
	LDX #2
	JSR LANGOFF
	LDY I,3
	JSR VGMSG
	LDA #0AA
	LDX #2E
	JSR MESGPOS
	LDX #3
	JSR LANGOFF
	LDY I,4
	JSR VGMSG
	LDA #096
	LDX #24
	JSR MESGPOS
	LDX #4
	JSR LANGOFF
	LDY I,5
	JSR VGMSG		;(END MESSAGE)
	LDA #-250./4
	LDX #-80		;BALANCE DISPLAY
	JSR VGVTR5
	LDA #600./4
	LDX #0
	JSR VGVTR5
	LDA #-600./4
	LDX #0
	JMP VGVTR5		;FULL BALANCE
	.SBTTL GETINT-GET PLAYERS INITIALS FOR HIGH SCORE
;GETINT-GET PLAYERS INITIALS FOR HIGH SCORE
;
PLAYR	=TEMP5
GETINT:	LDA UPDFLG
	AND UPDFLG+1
	BPL GETIN5		;GET PLAYERS INITIALS
	LDA #0
	STA HSCFLG
GETIN2:	RTS
10$:
	
;PUT MESSAGE UP ONCE FOR NORMAL
GETIN5:	LDA FRAME+1
	BMI 5$			;CONTINUE
	BNE GETIN2		;NOT DOING THIS
	LDA #-1
	STA UPDFLG
	STA UPDFLG+1		;DONE DOING THIS TOO
	JMP GOUT			;FINISH EXIT PROCEDURE
5$:	LDA CABINET
	IFPL			;SKIP THIS IS COCKTAIL
	JSR GETIN4
	ENDIF
	LDX I,1
	STX PLAYR
	JSR GETIN6
	LDX I,0
	STX PLAYR
GETIN6:	LDA X,UPDFLG
	BMI GETIN2		;TO RTS
;PUT MESSAGE OF CORRECT ORIENTATION
;FOR COCKTAIL
	LDA CABINET
	IFMI			;DO IF COCTAIL ONLY
	LDA X,UPDOWTABLE
	STA UPDOWN
	JSR GETIN4
	ENDIF
	JSR VGCNTR
	LDA I,0			;DOUBLE SIZE
	JSR VGSCA1
	BIT CABERET		;CABERET CAB?
	BVS 21$			;YEP
	LDA CABINET		;COCKTAIL TABLE?
	BPL 25$			;IF NO, SKIP THIS
21$:	LDA #0F0		;C  POSITION FOR FLIPPED DISPLAY
	LDX #08
	LDY PLAYR		;D WHICH PLAYER?
	BEQ 30$
	LDA #0			;C SET FOR PLAYER 1
	BEQ 30$			;*******ALWAYS********
25$:	LDA I,14
	LDX I,04
	LDY PLAYR
	BEQ 30$
	LDA I,0D8		;SECOND PLAYER
30$:	JSR VGVTR5		;POSITION BEAM
	LDX PLAYR
	LDY X,UPDFLG
	STY TEMP2
	TYA
	CLC
	ADC X,UPDINT
	STA TEMP2+1		;INDEX FOR THE INITIAL WE ARE WORKING ON
	JSR INITAL		;DISPLAY INITIAL
	LDY TEMP2
	INY
	JSR INITAL		;DISPLAY INITIAL
	LDY TEMP2
	INY
	INY
	JSR INITAL		;DISPLAY THIRD INITIAL
50$:	LDX PLAYR		;ONLY
	LDA X,FIRESW		;BIT 6 HERE
	ROL			;INTO BIT 7....
	ORA X,HYPSW
	ORA X,THRUST		;WANT ANY BUTTON TO ENTER
	ROL			;GET SWITCH INTO CARRY SPOT
	ROL X,LASTSW		;SWITCH DEBOUNCE
	LDA X,LASTSW
	AND I,1F
	CMP I,07		;ON EXACTLY THE LAST THREE OF LAST FIVE
	BNE GETSTP			;NOT A VALID SWITCH
	INC X,UPDINT		;ADVANCE TO NEXT LETTER
	LDA X,UPDINT
	CMP I,03
	BCC GOTIT			;IF WE ARE NOT DONE
	LDA I,-1
	STA X,UPDFLG		;CLEAR UPDATING FLAG
	CPX #01
	IFEQ
	STA SPFLG		;CLEAR THIS ONE ALSO
	ENDIF
GOUT:	LDX I,0F1		;PREVENT TIMEOUT IF BOTH PLAYERS SET HIGH SCORE
	STX FRAME+1		;BRING UP HIGH SCORE TABLE NEXT
	LDA UPDFLG
	AND UPDFLG+1
	IFMI
	STX SHHIGH		;SET SHOW SCORE FLAGS
				;DISPLAY
	STA HALT		;FORCE HALT FOR NEXT
	JSR INSET		;REINIT AREAS
	JSR EASETUP		;MOVE SCORES TO BUFFER
	JSR WRHIIN		;START UPDATE OF EA ROM
	JSR BIGBANG		;REMOVE ALL OLD EXPLOSIONS
	SEC			;DONE FLAG
	RTS
	ENDIF
	CLC
	RTS			;(EXIT)
	
GOTIT:
	LDX TEMP2+1
	LDA I,0F4		;ABOUT 64 SECONDS
	STA FRAME+1		;RESET TIMEOUT
	LDA PLAYR		;PLAYER 2?
	BEQ 58$			;NO
	BIT SPFLG		;DOING SPECIAL INITIALS
	BMI 58$			;NO
	LDA #11.
	STA X,SPINT+1-1E		;INIT NEXT TO A
	RTS
58$:
	LDA I,11.
	STA X,INITL+1		;SET INITIAL TO A
	RTS
GETSTP:	LDA FRAME
	AND I,07
	BNE 90$			;EVERY 8TH FRAME
	LDY I,-1		;ASSUME LETTERS GO DOWN
	LDA X,ROTL
	BMI 75$			;ROTATING LEFT
	
70$:	LDA X,ROTR
	ASL
	BPL 90$			;NOT ROTATING RIGHT
	LDY I,1
75$:	TYA
	LDX PLAYR
	BEQ 76$			;NOT PLAYER 2
	BIT SPFLG		;SPECIAL PLAYER 2?
	BMI 76$			;NO
	LDX TEMP2+1		;COPY BELOW PROCEDUR
	CLC
	ADC X,SPINT-1E
	BMI 88$
	CMP #11.
	BCS 10$
	LSR
	BNE 13$
	LDA #11.
	BNE 15$
88$:	LDA #36.
10$:	CMP #37.
	BCC 15$
13$:	LDA #0
15$:	STA X,SPINT-1E
	LDA #0
	RTS
76$:	LDX TEMP2+1
	CLC
	ADC X,INITL		;CHANGE INITIAL
	BMI 78$			;BEFORE A BLANK MUST BE Z
	CMP I,11.
	BCS 80$			;IF GREATER THAN A
;IN THIS NO MANS LAND, EITHER USED
;TO BE <BLANK> OR <A>
	LSR
	BNE 83$

;INCREASE FROM BLANK TO A
	LDA I,11.		;A
	BNE 85$			;ALWAYS

78$:	LDA I,36.		;MAKE IT A Z
80$:	CMP I,37.
	BCC 85$			;LESS THAN Z
83$:	LDA I,0			;BACK TO BLANK
85$:	STA X,INITL
90$:	LDA I,0			;MUST BE POSITIVE ON RETURN IS THIS NEEDED?
	RTS


UPDOWTABLE:	.BYTE 0,80

SHPPLACE:
	LDA POKEY1+POKRAN
;CURRENTLY ONLY USE THIS TO PLACE TWO
;SEPARATE SHIPS, WANT SHIP 1 TO APPEAR
;ON LEFT SIDE, OF SCREEN SHIP 0 ON THE RIGHT
	AND I,XRIGHT/2-1
	CPX I,0
	BNE 1$
	ORA I,XRIGHT/2
1$:
	CMP I,1B		;STAY AWAY FROM THE EDGE
	BCC 2$
	LDA I,1A
2$:	CMP I,5
	BCS 4$			;STAY AWAY FROM THE EDGE
	LDA I,5
4$:
60$:	STA X,OBJXH+ZSHIP
	LDA POKEY1+POKRAN
	AND I,1F
10$:	CMP I,13
	BCC 12$			;STAY AWAY FROM TOP
	LDA I,12
12$:	CMP I,5
	BCS 20$			;STAY AWAY FROM BOTTOM
	LDA I,5
20$:	STA X,OBJYH+ZSHIP	;NEW Y POSITION
	RTS
;ZERO ALL RAM PAST SAVE POINT
;LATER WORRY ABOUT PAGE 1
INSVRAM:
	LDX I,SAVTOP
	LDA I,0
10$:	STA X,0
	INX
	CPX I,SAVZTOP
	BNE 10$
	TAX			;X=0
20$:	STA X,200
	INX 
	BNE 20$
	LDX I,SAVBOT-300
30$:	STA X,300
	DEX
	BNE 30$
	RTS
	
	.SBTTL INIT-INITIALIZATION
INIT:	JSR INSVRAM
;	LDA #0			;A=0 FALLING IN FROM ABOVE
	STA $LOCKCOIL		;NO MORE COINS
;ZERO SCORES AND COMBINED SCORES
	LDX I,8
30$:
	STA X,SCORE		;CLEAR SCORE
	DEX
	BPL 30$			
	STA NROCKS		;CLEAR NUMBER OF ROCKS
	STA RDELAY
	STA SUPRSAC		;CLEAR ANY OLD SAUCER
;SIGNIFY THAT WANT TO COMPLETE NEW SCORES
	LDX I,2
	LDA I,80+3F		;BIT 7 ON(SCORE), BIT 6 OFF (LIVES)
35$:	STA X,PL0SCFLAG
	DEX
	BPL 35$
	JSR GTOPTN		;READ OPTIONS AND SET LIVES AND BONUS
	LDA I,80
	STA ATRACT
	DEC UPDFLG
	DEC UPDFLG+1		;STOP HIGH SCORE ENTRY
	LDA I,1
	STA LNGTIMER+1
	TAX			;X=1*****************************
36$:	LDA I,0A0
	STA X,SENMDEL		;STARTING ENEMY DELAY
	LDA I,1
	STA X,SDELAY
	LDA I,1*COMMUL
	STA X,DWFRMP
	LDA I,0
	STA X,FCACH
	LDA I,8*COMMUL*2	;A=20 (IT BETTER)
	STA X,NWCACH
	STA X,NWCSPD
	STA X,FCSPD
	ASL			;A=40
	ASL			;A=80
	STA X,IANGLE
	STA X,MXRTIMER
	DEX
	BPL 36$
	LDA I,ZCOMET
	STA COMSTART
	LDA I,ZCOMET+<NMCOMETS/2>
	STA COMSTART+1
	LDA I,-1
	STA BCOMSTART+1
;SET TOGGLES ACCORDING TO GAME
	LDX GAME
	LDA X,TTOGDRONE
	STA TOGDRONE
	LDA X,TTOGCOMB
	STA TOGCOMB
	CPX I,ALONEGAME
	BNE 38$
;MAKE INTO ONE SHIP GAME
	LDA I,0
	STA SDELAY+1		;CAN BE DEC
	STA HITS+1
	DEC PRTDAMAGE+1		;ASSUME WAS 0
38$:
	LDA I,1		;ALWAYS START WITH 1 COMET
	STA COMLIMIT
INSET2:	JSR ROCKINI
	JSR INISOU		;INITIALIZE SOUNDS,PROB NOT NEEDED
	.SBTTL	INSET-INITIALIZE SCORE HEADINGS
;WILL CREATE IN VGRAM
;THE SCORE HEADINGS FOR EACH AREA.
;THE SCORE HEADING WILL JUMP
;TO APPROPRIATE SCORE

INSET:
	LDX #50
	LDA #0C0		;AN RTSL
5$:	STA X,PL0SET		;FILL SCORE AREAS WITH RTSL'S
	DEX
	BPL 5$
	LDX #02
	LDA CABINET
	BPL 10$			;NOT COCKTAIL
	LDA GAME		;NOT ON GAME 3 PLEASE
	CMP #03
	BEQ 10$
	LDX #03			;NEED EXTRA MESSAGE IF COCKTAIL
10$:	STX TEMP3+1		;COUNTER FOR WHICH AREA
	LDA X,115$
	STA VGLIST
	LDA X,110$
	STA VGLIST+1		;VGLIST INITIALIZED
;SEE IF ONE SCORE GAME
	LDX TEMP3+1
	BEQ 20$			;THIS SCORE FOR SURE
	CPX I,2
	BCC 14$			;NOT THE COMBINED SCORE
	BIT TOGCOMB
	BPL 16$
14$:	LDY GAME
	CPY I,ALONEGAME
	BNE 20$			;ONE SCORE ONLY
;ADD RTSL AT BEGINNING OF SECTION
16$:	JSR VGRTSL
	BNE 90$			;ALWAYS$
20$:	LALJSR CNTSCL
	LXHJSR CNTSCL
	JSR VGADD2
;NOT DONE IN ROM SO CAN CHANGE BRIGHTNESS
;VECTOR TO CORRECT PLACE
	LDA CABINET		;FLIP?
	BPL 25$			;NOPE
	LDA GAME		;NO FLIP ON GAME 3 (1 PLAYER, 2 SCORES)
	CMP #3
	BEQ 25$
	LDY TEMP3+1		;GET Y POINTER
	LDA Y,130$		;ELSE GET FLIP INFO
25$:	STA UPDOWN
	LDX TEMP3+1		;GET COLOR OF SCORES
	LDA X,SCRCLR
	TAY			;PUT IN Y FOR VGSTAT INST
	JSR VGSTAT
	LDY TEMP3+1
	LDA Y,100$		;X/4
	LDX #05B		;THIS IS ALWAYS 05B, NO TABLE NEEDED HERE
	JSR VGVTR5
	LDA TEMP3+1
	CMP #02			;ONLY MEGGASE FOR 'COMBINATION'
	BCC 26$
	LDA I,2
	JSR VGSCA1
	LDY #0F			;GET CORRECT MESSAGE
	LDA Y,SCRCLR-0D		;GET COLOR
	JSR VGMSG4		;COMBINED SCORE
	LDA I,0-128./4		;X DIRECTION
	LDX I,-24./4		;Y DIRECTION
	JSR VGVTR5
;JUMP TO CORRECT SCORE AREA
26$:	LDY TEMP3+1
	LDA Y,120$
	LDX Y,125$
	JSR VGJMPL
	LDY TEMP3+1
	LDA Y,120$
	STA VGLIST+1		;PUT VGLIST AT THAT NEW AREA
	LDA Y,125$
	STA VGLIST
	LDA I,1			;FULL SIZE
30$:	JSR VGSCA1		;SET SCALE
	LDA I,-70/4		
	LDX I,-24./4			;CHARACTERS ARE 24. TALL
	JSR VGVTR5		;DOWN & TO LEFT
90$:	LDX TEMP3+1
	LDA GAME
	CMP #03		;IF GAME 3 (1 PLR S.S.) NO OTHER SCORES
	BEQ INSELO
	DEX
; KLUDGE FOR FOCUS GROUP
	BMI INSELO
	JMP 10$

;INITIAL ADDRESS AREA
100$:	.BYTE 320./4,-400./4,208.,-64./4
110$:	BADH PL0SET
	BADH PL1SET
	BADH CMBSET
	BADH CMSBSET
115$:	BADL PL0SET
	BADL PL1SET
	BADL CMBSET
	BADL CMSBSET
;WILL HAVE SIX BYTES OF SETUP BEFORE THE SCORES
120$:	BADH PL0AREA-6
	BADH PL1AREA-6
	BADH CMBAREA-6
	BADH CMSBAREA-6
125$:	BADL PL0AREA-6
	BADL PL1AREA-6
	BADL CMBAREA-6
	BADL CMSBAREA-6
130$: .BYTE 0,80,0,80
;SCORE COLOR BASED ON Y ABOVE
ROCKINI:
	LDA #5
	STA ROCKMAX
	LDA #-5
	STA ROCKMAX+1
	LDA #3
	STA ROCKMIN
	LDA #-3
	STA ROCKMIN+1
	RTS
SCRCLR:	.BYTE PL0COL+0E0,PL1COL+0E0,YELLOW+0E0,YELLOW+0E0
INSELO:
;FILL THE ROCK AREAS WITH RTSL'S
	LDY I,^H2300-VROCK1-1
	LDA I,0C0
20$:	STA Y,VROCK1
	DEY
	BPL 20$
	LDA #RED+0F0
	STA SAU11		;INIT SAUCER COLORS
	LDA #WHITE+0E0
	STA SAU12
	LDA #BLUE+0F0
	STA SAU13
	LDA #64		;AND ADD COLOR INSTRUCTION
	STA SAU11+1
	STA SAU12+1
	STA SAU13+1
	RTS

	.PAGE
	.SBTTL HIGH SCORE UTILITIES
INITA3:	LDY TEMP3+3
	
	
	.SBTTL INITAL-DISPLAY AN INITIAL ON THE SCREEN
;INITIAL-DISPLAY INITIAL ON SCREEN
;ENTRY	(Y)=INDEX INTO INITL TABLE
INITAL:	INC TEMP3+3		;FOR USE IN SCORES
	LDA PLAYR
	BEQ 10$			;NOT PLAYER 2
	BIT SPFLG		;SPECIAL INITIALS?
	BMI 10$
	LDA Y,SPINT-1E		;GET SPECIAL
	JMP 11$
10$:	LDA Y,INITL		;INITIAL
11$:	CMP #25			;DONT LET PAST Z
	BCS 14$			;BAD--SET TO BLANK
	CMP #0B			;OR UNDER AN A
	BCS 15$			;WERE OK HERE
14$:	LDA #0
15$:	ASL
	TAY
	BNE VGCHAR		;IF NOT A BLANK
	LDA UPDFLG
	AND UPDFLG+1
	BMI VGCHAR		;NOT UPDATING INITIALS
	LDA I,0A8		;ASSUMES .BRITE=7
	BIT UPDOWN		;D UPSIDE DOWN CHAR?
	BPL 12$
	LDA #1C			;C UNDERLINE UPSIDEDOWN
12$:	LDX I,40		;VCTR 8,0,7
	JSR VGADD2		;UNDERLINE
	LDA I,04		;ACC WAS DESTROYED
	BIT UPDOWN		;D UPSIDE DOWN UNDERLINE?
	BPL 13$
	LDA #38			;C UPSIDEDOWN SPACEING
13$:	LDX I,40		;VCTR 4,0,0
	JMP VGADD2
	
	
;VGCHAR-DISPLAY A CHARACTER
;
;ENTRY	(Y)=INDEX OF CHARACTER (0=BLANK,2=0,4=1,ETC)
;USES	A,X,Y
VGCHAR:	LDX AY,VGMSGA+1
	LDA AY,VGMSGA
	BIT UPDOWN
	BPL 10$
	LDX AY,VGMSGU+1
	LDA AY,VGMSGU
10$:	JMP VGADD2		;ADD TO VECTOR LIST

;ENTERING DWARF AMOUTNS
ENTCOTABLE:
	.BYTE 2,3,4,5,6,7,8,8,8,8,8
	.BYTE 8,8,8,8,8
ENTDWTABLE:
	.BYTE 3,4,5,6,7,8,9,0A,0B
	.BYTE 0C,0C,0C,0C,0C,0C
	.BYTE 0C
	.SBTTL MOTION - MOTION UPDATE ROUTINE
;MOTION-MOTION UPDATE ROUTINE
;
;THIS ROUTINE ALSO UPDATES THE EXPLOSION INDEX TO SEQUENCE
;THRU THE PICTURES.
;HAVE COMMENTED OUT SOME UNUSED FEATURES
	.SBTTL	CKSTRADDLE-CHECK STRADDLE

;DURING THE CAGE PHASE
;THE COMBINED SHIPS COULD BE
;STRADDLING AN EDGE AND
;BOUNCE WOULD GET CONFUSED
;SO WE WAIT FOR IT TO LEAVE THE
;EDGE BEFORE ALLOWING A BOUNCE
MOTION:
;STRADDLE=(XY------)
;BIT SET IF STILL STRADDLING
	LDA COMTIMER
	BEQ 90$
	BIT TOGCOMB
	BPL 90$
	LDA X,OBJYH+ZSHIP
	SEC
	SBC OBJYH+ZSHIP+1
	JSR ABS
	CMP I,YTOP/2
	BCS 30$
	LDA STRADDLE
	AND I,0FF-40		;NO LONGER STR ADDLING INY
	STA STRADDLE
30$:
	LDA X,OBJXH+ZSHIP
	SEC
	SBC OBJXH+ZSHIP+1
	JSR ABS
	CMP I,XRIGHT/2
	BCS 90$
	LDA STRADDLE
	AND I,0FF-080		;NO LONGER STRADDLING X
	STA STRADDLE
90$:	
	.PAGE
MOTI20:
	LDA I,0			;NO RODS DRAWN
	STA RODSTATUS
	LDX I,ZLAST		;NUMBER OF OBJECTS TO MOVE
11$:	STX TEMP3		;SAVE FOR LATER USE
	LDA X,OBJ
	BNE 15$			;ACTIVE OBJECT
13$:	DEX
	BPL 11$			;MORE OBJECTS
	RTS
	
15$:	BPL 60$			;IF OBJECT ACTIVE
	JSR COMP		;TIME REMAINING (0 TO 60)
	LSR
	LSR
	LSR
	LSR
	CPX I,ZSHIP
	BCC 30$
	CPX I,ZSHIP+NMSHIPS
	BCS 32$
	LDA FRAME
	AND I,01		;ADD 1 EVERYOTHER FRAME
	LSR
	BEQ 32$			;ALWAYS

30$:	SEC			;1+ VALUE /16
32$:	ADC X,OBJ		;NEW EXPLOSION PICTURE
	BMI 45$			;STILL INACTIVE
	.SBTTL LASTROCK-CHECK FOR LAST ROCK
36$:	CPX I,ZCOMET+NMCOMETS
	BCS 40$			;NOT ROCK OR COMET
	CPX I,NMROCK
	BCC 37$			;WAS ROCK
	DEC NCOMET
	BPL 40$			;ALWAYS (I HOPE)
37$:	DEC NROCKS
	BNE 40$			;IF MORE ROCKS REMAIN
	LDA I,0
	STA SCRFUL
	LDY I,7F		;DELAY BEFORE STARTING
	STY RDELAY
	LDA ATRACT
	BEQ 40$			;IN ATRACT
	LDA I,0FF
	STA KLMOFF		;MINES OFF
	CLC
	LDA WAVE		;ONSLAUGHT AMOUNT
	ADC DIFCTY
	LSR			;SO IT MOVES ALONG WITH DIFF LEVEL
	LSR
39$:	TAY
	CPY I,0F
	BCC 38$
	LDY I,0F
38$:	BIT COMOFF
	BMI 40$			;JUST DIED
	LDA Y,ENTCOTABLE	;ENTERING COMET AMOUNTS
	STA NENTCOMETS
	LDA Y,ENTDWTABLE	;ENTERING DWARF A MOUNTS
	STA NENTDWARFS
	BIT TOGCOMB
	BPL 35$
	LDA I,0FF		;ASSUME ARE STRADDLING
	STA STRADDLE
35$:	LDA I,060
	STA COMTIMER		;START ONSLAUGHT
	LDA #0FF
	STA SFREQ		;RESET HUM FREQ
40$:	LDA I,0
42$:	STA X,OBJ		;RESET PICTURE
	JMP 13$

	
45$:	STA X,OBJ
;ALLOW EXPLOSION TO HAVE MOTION

60$:	CLC
	LDY I,0
	LDA X,XINC
	BPL 62$			;SIGN EXTENSION
	DEY
62$:	ADC X,OBJXL
	STA XCOMP
	TYA
	ADC X,OBJXH
	CMP I,XRIGHT
	BCC 27$			;IF 0 TO 1023(SHORTCUT TO 85$)
	STA XCOMP+1
;IMPORTANT TO SEE IF ROCK OR COMET GET OFF SCREEN
70$:	CPX I,NMROCK
	BCC 75$			;WAS ROCK
	CPX I,ZSHOT
	BCS 79$			;A SHOT
	CPX I,ZKLMINES+NMKLMINES
	BCC 76$			; COMET OR KILLERMINE
	CPX I, ZSAUCER+NMSAUCER
	BCS 71$			;NOT SAUCER OR BELOW
	BIT SUPRSAC		;A SUPER SAUCER HIT EDGE?
	BPL 77$			;IF NO, REMOVE
	PHA
	LDA SUPRDIS		;DISTANCE
	;CLC
	ADC #1			;WIDER NEXT PASS
	CMP #12
	BCS 72$
	STA SUPRDIS
72$:	PLA
	BIT SCRFUL
	BMI 77$
	LDY COMTIMER
	BEQ 75$
77$:	JSR RSAUCR
	JMP 13$
;SHIP OR PAIR
;IF A SHIP IS OFF AN EDGE
;WANT TO SHOW ROD TWICE
71$:	INC RODSTATUS
	LDA COMTIMER
	BEQ 79$			;NOT THE CAGE
	BIT STRADDLE
	BMI 79$			;STILL STRADDLING
	CPX I, ZPAIR
	BEQ 74$			; WAS PAIR
				;MUST BE A SHIP
	JSR REVXSHIP
74$:	JSR REVANGULAR
	JSR PREVXBAR
; SET THIS PICTURE AT THE EDGE, NOT BEYOND
	BIT XCOMP+1
	BMI 24$
	LDA I,XRIGHT-1
	LDY I,0FF
	BNE 26$
24$:	LDA I,0
	TAY
26$:	STY XCOMP
27$:	JMP 85$
76$:	CPX I,ZKLMINES
	BCC 73$			;WAS COMET OR DWARF
	BIT KLMOFF
	BPL 80$			;STAY
	BMI 81$			;LEAVE
;TURN THIS POSSIBLE DWARFD INTO COMETS
73$:
	LDA X,COMTYP-ZCOMET
;IF BIT 0 SET, GET THIS OFF SCREEN
	ROR
	BCS 83$			;TAKE AWAY
	ROL
	BMI 79$			;ALREADY COMET
	JSR STCOMET
	BPL 79$			;ALWAYS
;IF SOME ONE RECENTLY KILLED
;INDICATED BY NEGATIVE SCRFUL
;HOLD ROCKS ON EDGE OF SCREEN
75$:	BIT SCRFUL
	BPL 80$		;ROCK WRAPS AROUND
	JMP 13$			;NOT SHOW THIS ROCK

83$:
	DEC NCOMETS
81$:	LDA I,0
	STA X,OBJ
102$:	JMP 13$
79$:	LDA XCOMP+1
80$:	AND I,XRIGHT-1
85$:	STA XCOMP+1
	CLC
	LDY I,0
	LDA X,YINC
	BPL 88$			;SIGN EXTENSION
	DEY
88$:	ADC X,OBJYL
	STA XCOMP+2
	TYA
	ADC X,OBJYH		;0 TO 767 PLEASE
	CMP I,YTOP
	BCC 92$			;ALREADY 0 TO 767
	STA XCOMP+3
	CPX I,NMROCKS
	BCC 84$
	CPX I,ZKLMINES+NMKLMINES
	BCC 58$
	INC RODSTATUS
	LDA COMTIMER
	BEQ 89$			; TIME IS GONE
	BIT STRADDLE
	BVS 89$			;STILL STRADDLING
	CPX I,ZPAIR
	BEQ 54$			; WAS THE ROD
	CPX I,ZSHIP+NMSHIPS
	BCS 89$			;NOT A SHIP
	CPX I,ZSHIP
	BCC 89$			;NOT A SHIP
	JSR REVYSHIP
	JSR REVANGULAR
54$:	JSR PREVYBAR
; GET SHIP OR BAR AT CORRECT EDGE
	BIT XCOMP+3
	BMI 52$
	LDA I,YTOP-1
	LDY I,0FF
	BNE 53$
52$:	LDA I,0
	TAY
53$:	STA XCOMP+3
	STY XCOMP+2
	JMP 92$
58$:
	CPX I,ZKLMINES
	BCC 82$			;WAS COMET
	BIT KLMOFF
	BPL 89$			; STAY
	BMI 81$			;LEAVE
;IF BIT 0, SET,GET OFF SCREEN
82$:
	LDA X,COMTYP-ZCOMET
	ROR
	BCS 83$			;GET OFF SCREEN
	ROL
	BMI 89$			; ALREADY COMET
	JSR STCOMET
	BPL 89$			 ; ALWAYS
84$:	BIT SCRFUL
	BMI 102$		;LEAVE IT AT EDGE
89$:	LDA XCOMP+3
	BPL 90$			;IF 768 UP
	LDA I,YTOP-1		;WRAP TO TOP OF SCREEN
	BNE 92$			;ALWAYS

90$:	LDA I,0
92$:	BIT SUPRSAC
	BPL 95$			;NOT SUPER SAUCER
	CPX #ZSAUCER		;CONTROLL SAUCER
	BNE 95$			;NOPE
	CMP #1			;LIMIT ON BOTTOM TRAVEL
	BEQ 93$			;IF SAME, HOLD THERE ON UP
	BCC 100$		;DON'T ALLOW CHANGE
	STA TEMP5
	CLC
	ADC SUPRDIS		;CHECK TOP DISTANCE
	CMP #YTOP-1		;AT TOP??
	BEQ 93$			;IF SAME, LEAVE THERE
	BCC 94$
	DEC X,OBJYH		;FORCE OFF TOP
93$:	LDA X,OBJYL		;STORE POSTIONS
	STA XCOMP+2
	LDA X,OBJYH
	STA XCOMP+3		;FOR PICTURE ROUTINE
	BNE 96$			;WE KNOW THIS WILL NEVER BE 0
94$:	LDA TEMP5
95$:	STA X,OBJYH
	STA XCOMP+3
	LDA XCOMP+2
	STA X,OBJYL
;YES WE DID WISH TO CHANGE POSITION
96$:	LDA XCOMP
	STA X,OBJXL
	LDA XCOMP+1
	STA X,OBJXH
	CPX I,ZPAIR
	BEQ 99$			;NO PICTURE FOR BAR IT COMES WITH SHIPS
	BIT SPECEX		;SPECIAL EXPLOSIONS?
	BPL 121$		;NO
	LDA X,OBJYH
	CMP X,OBJ		;OBJ HOLDS DEST Y
	BCC 121$		;NOT THERE YET
	LDA #0
	STA X,YINC		;STOP MOTION
	LDA #0A0
	STA X,OBJ		;EXPLODE
	JSR EXPLOS		;SOUND
	LDX TEMP3		;RECALL X
121$:	JSR PICTUR		;DISPLAY PICTURE
	LDX TEMP3
99$:	JMP 13$
100$:	INC X,OBJYH		;FORCE OFF BOTTOM
	JMP 93$
120$:	;TABLE TO TELL IF OBJECT IS A SHIP OR SAUCER
;$80 MEANS SHIP & $40 MEANS SAUCER
		
	.REPT NMSAUCER
	.BYTE TYSAUCER
	.ENDR
	
	.REPT NMSHIPS
	.BYTE TYSHIP
	.ENDR
;	.SBTTL	STCOMET
STCOMET:
;ENTRY X A COMET, Y A SHIP
;BOTH RELATIVE TO OBJ
	LDY X,CTARGET-ZCOMET
	LDA I,80
	STA X,COMTYP-ZCOMET	;NOW A COMET
	LDA Y,NWCACH-ZSHIP
	STA X,CANGCH-ZCOMET
	LDA Y,NWCSPD-ZSHIP
	STA X,OBJ
	RTS
	.SBTTL KILXSCR - KILL X SAUCER
KILXSCR:
	STX TEMP1
	LDA I,30
	JSR POINTS
	LDX TEMP1
	JSR EXPLOS		;EXPLOSION SOUND
	LDA I,0A0
	BNE RSAUC3		;ALWAYS
	.SBTTL RSAUCR - RESET SAUCER VALUES
RSAUCR:	LDA I,0
RSAUC3:	STA X,OBJ		;CLEAR SAUCER
	LDA #0
	STA SUPRSAC		;GOODBYE SUPER SAUCER
	LDA X,100$-ZSAUCER
	TAX
	JMP HASENT		;DELAY BEFORE NEXT
100$:	.BYTE 0,1
	.SBTTL	EENMWAIT-WAIT FOR DIRECTED ENEMIES
;WAIT FOR ENEMIES DIRECTED AT ONE OBJECT
;
;ENTRY(Y)=WHICH OBJECT IS TARGETED
;
;USES X
;Y PRESERVED
;
;EXIT (CC) IS EQUAL IF NO MORE SUCH ENEMIES
EENMWAIT:
	STY TEMPA
	LDX I,NMSAUCER-1+1
20$:	LDA X,ETARGET-1
	CMP TEMPA
	BNE 30$
	LDA X,OBSAUCER-1
	BNE 80$
30$:	DEX
	BNE 20$
	LDX I,NMCOMETS-1+1
55$:	LDA X,CTARGET-1
	CMP TEMPA
	BNE 70$
	LDA X,OBCOMET-1
	BNE 80$
70$:	DEX
	BNE 55$
80$:	RTS
	.SBTTL ENMDEAD-ENEMY ALL INACTIVE
;CHECK TO SEE THAT ALL 
;COMETS ARE INACTIVE
;ENTRY-NO REQUIREMENTS
;EXIT-CONDITION EQUAL FOR ALL CLEAR
;USES-Y
;
ENMWAIT:
	LDA #0
;CAN BE ORA NCOMETS
	LDY I,NMCOMETS-1
10$:	ORA Y,OBCOMETS
	DEY
	BPL 10$
	TAY			;SET CONDITION CODES
	RTS
; REVERSE Y TRAVEL VELOCITY
REVYSHIP:
	DNEGATE <X,YINCL-ZSHIP>,<X,YINC>
	RTS
REVXSHIP:
; REVERSE THE SHIPS X TRAVEL DIRECTION
; CAN DO THIS FOR BOTH RIGID AND ALONE GAME
	LDA I,0
	SEC
	SBC X,XINCL-ZSHIP
	STA X,XINCL-ZSHIP
	LDA I,0
	SBC X,XINC
	STA X,XINC
	.SBTTL REVANGULAR- REVERSE ANGULAR MOMENTUM



;
REVANGULAR:
	LDA I,0
	SEC
	SBC LWBAR
	STA LWBAR
	LDA I,0
	SBC UWBAR
	STA UWBAR
	RTS


	.SBTTL PREVXBAR-POSSIBLE REVERSE X VELOCITY OF BAR
; CHECKS TO SEE THAT THE EXCESS X VALUE AGREES WITH CURRENT VELOCITY
; BEFORE REVERSING
PREVXBAR:
	LDA XCOMP+1
	EOR BXINC
	BMI 90$
	DNEGATE BXINCL,BXINC
90$:	JMP DROPS


PREVYBAR:
	LDA XCOMP+3
	EOR BYINC
	BMI 90$
	DNEGATE BYINCL,BYINC
90$:	;JMP DROPS
	.SBTTL	SHIELD ACTION ON BOUNCE
; DROP SHIELDS IF WALL HIT AND SHIELDS ON
DROPS:	LDX #1
10$:	JSR SHILSW		;SWITCH PUSHED??
	BPL 20$			;NOPE
	JSR DROPSHI		;YEP..TAKE AWAY ENERGY
20$:	DEX
	BPL 10$
	LDX TEMP3		;RESTORE X
	RTS
;
CKUM3::	.BYTE 068 			;CHECKSUM FOR 5000


	.SBTTL MOVE-MOVE SHIP
;MOVE-MOVE SHIP (X), X=(0,1)
;
MOVE:	STX TEMP3
	BIT TOGCOMB
	BMI 30$
	LDA X,OBSHIP
	BPL 2$
	JMP SHIPFRICTION	;IF EXPLODING
2$:	BEQ 7$		;NOT VISIBLE
	JMP 5$			;ACTIVE
7$:	LDA X,SDELAY
	BEQ 91$			;SHIP NOT TO APPEAR
	DEC X,SDELAY		;DECREMENT COUNT
	BNE 91$			;NOT DONE YET
	LDA COMTIMER		;ONSLAUGHT GOING?
	BNE 94$			;IF YES, DONT RE-ENTER A SHIP (BONUS)
	JSR SHPPLACE
	JSR NEARBY		;CHECK FOR AREA FREE OF ROCKS
	BNE 94$			;IF SOMETHING CLOSE BY
	LDY X,GZSHIP
	JSR EENMWAIT
	BEQ 92$			;NO SUCH
94$:	LDX TEMP3
8$:	INC X,SDELAY
;FOR USE IN COMPETITIVE GAME
91$:	RTS			;(EXIT)

30$:	CPX #0			;LAST PASS THROUGH?
	BEQ 91$
31$:	JMP DORIGID		;MOVE PAIR
;WAIT FOR ENEMIES
92$:
	LDX TEMP3
	LDA I,0
	STA X,XINC+ZSHIP
	STA X,YINC+ZSHIP
	LDA GAME
	CMP I,ALONEGAME
	BNE 93$			;NOT ALONE GAME
	LDA X,HITS
	BEQ 8$			;GAME IS OVER
	LDA I,0
	STA COMOFF		;ALL ACTIVE
	BEQ 95$			;ALWAYS
;IF HIT BY OTHER SHIP, WHOSHOT IS NEGATIVE
;IF OUT OF LIVES PRTDAMAGE LEFT ON
93$:	LDA X,WHOSHOT
	BPL 99$		;LOST A LITE
	LDA X,PRTDAMAGE
	BPL 97$			;REINCARNATE
99$:	LDA X,HITS
	BNE 95$			
;ONLY WANT TO REENTER A DAMAGE SHIP IF OHTER
;SHIP HAS LIVES OR IS NOT DAMAGE
	LDY X,REVSHIP
	LDA Y,PRTDAMAGE-ZSHIP
	BMI 94$			;OTHER IS DEAD WAIT
	BPL 97$
;A COMPLETE SHIP IS TO APPEAR
95$:	BIT ATRACT		; ATTRACT?
	BPL 1$			;IF YES, DON'T LOSE LIFE
	DEC X,HITS
1$:	LDA I,80+3F		;LIVES & SCORES
	STA X,PL0SCFLAG
96$:	LDA I,0
	STA X,PRTDAMAGE		;NO PARTIAL DARMAGE
97$:	LDA I,BGSHENG		;BEGINNING SHIELD ENERGY
	STA X,SHLDENG		;RESTORE SHIELDS
	LDA I,2
	STA X,OBSHIP		;USE 1/2 SIZE PICTURE
	LDA I,0
	STA SCRFUL		;LET ROCKS COME BACK
	STA NENTCOMETS
	STA NENTDWARES
	LDA X,MXRTIMER
	CLC
	ADC I,10
	BCS 98$			;OVER FLOW
	STA X,MXRTIMER		;GIVE A LITTLE MORE ROCK TIME
	STA X,RTIMER
98$:	LDA #07F		;GIVE MAX DELAY HERE
	STA X,ENMDEL
	LDA #10			;EFFECT TIMER
	CPX #01
	BEQ 10$
	STA ENTER
	JMP EN0SN		;REENTER SOUND & EXIT
10$:	STA ENTER+1		;REENTER SOUND & EXIT
	JMP EN1SN
;CHECK THRUST OF ONLY ONE SHIP THIS FRAME
5$:	TXA
	EOR FRAME
	LSR 			;SET CARRY
	BCS 70$			;CHECK THRUST ON ALTERNATE FRAMES ONLY
	BIT ATRACT		;DON'T READ IN ATRACT
	BMI 11$
	LDA FRAME
	ASL			;USE OTHER THAN 7
	ASL
	JMP 12$
11$:	LDA X,THRUST
12$:	BPL SHIPFRICTION	;NO THRUST
	JSR THRUSN		;THRUST SOUND
	LDA I,0
	STA TEMP1		;SIGN EXTENSION
	LDA X,SANGLE
	JSR COS			;COS(ANGLE)=(CHANGE IN XINC)*4
;MULTIPLY BY 4
;WILL GET SIGN EXTENSION  FROM TABLE
	ASL
	BCC 20$
	DEC TEMP1
20$:
;IF DAMAGED, ONLY MULTIPLY BY 2
	LDX TEMP3
	LDY X,PRTDAMAGE
	BNE 25$
	ASL
	ROL TEMP1
25$:
	CLC
	ADC X,XINCL		;ADD TO SHIPS VELOCITY
	STA X,XINCL
	LDA TEMP1
	ADC X,XINC+ZSHIP
	JSR MOVE2		;CHECK FOR RANGE
	STA X,XINC+ZSHIP
	LDA I,0
	STA TEMP1
	LDA X,SANGLE
	JSR SIN			;SIN(ANGLE)
50$:	ASL
	BCC 60$
	DEC TEMP1
60$:
	LDX TEMP3
	LDY X,PRTDAMAGE
	BNE 65$
	ASL
	ROL TEMP1
65$:	CLC
	ADC X,YINCL
	STA X,YINCL
	LDA TEMP1
	ADC X,YINC+ZSHIP
	JSR MOVE2		;CHECK FOR RANGE
	STA X,YINC+ZSHIP
70$:	RTS			;(EXIT)
	.SBTTL	 SHIPFRICTION

SHIPFRICTION:
;SUBTRACT (XINCL,XINC)/12.+1 FROM LOW BYTE
	LDY I,0
	LDA X,XINCL
	STA TEMPA
	ORA X,XINC+ZSHIP
	BEQ 87$			;IF XMOTION IS NULL
	LDA X,XINC+ZSHIP
	ROL TEMPA
	ROL
	EOR I,0FF
	SEC			;FORMS THE +1
	BPL 86$			;IF IT WAS POSITIVE
	DEY			;SIGN EXTEASION
	CLC
86$:
;PUT IN ANOTHER ASL,ROL TEMPB
;IF WANT MORE FRICTION
;SAVED STATUS BECAUSE IF ORIGINAL
;XINCL WAS -1 OR 1,WANT TO
;GET IT TO 0, WITHOUT GOING PAST 0
	ADC X,XINCL
	STA X,XINCL
	TYA
	ADC X,XINC+ZSHIP
	STA X,XINC+ZSHIP
87$:	LDY I,0
	LDA X,YINCL
	STA TEMPA
	ORA X,YINC+ZSHIP
	BEQ 89$			;IF Y=0
	LDA X,YINC+ZSHIP
	ROL TEMPA
	ROL
	SEC
	EOR I,0FF
	BPL 88$			;IF WAS POSITIVE
	DEY			;SIGN EXTENSION
	CLC
88$:
;PUT IN ANOTHER ASL, ROL TEMPB
;IF WANT MORE FRICTION
	ADC X,YINCL
	STA X,YINCL
	TYA
	ADC X,YINC+ZSHIP
	STA X,YINC+ZSHIP
89$:	RTS

MOVE2:	BMI 30$			;IF OUT OF RANGE
	CMP I,40
	BCC 35$			;IF IN RANGE
	LDA I,3F		;SET MAX POSITIVE
	RTS

30$:	CMP I,0C0
	BCS 35$			;IF IN RANGE
	LDA I,0C0		;SET MAX NEGATIVE
35$:	RTS
;SINCE SHOTS USE INDIVIDIAL VELOCITIES
;OF THE SHIPS, WANT TO UPDATE THOSE
;ALSO NEED TO UPDATE POSITIONS OF THE SHIPS
;MAY ONLY NEED TO DO THIS WHEN
;SHOT IS GENERATED.
;WILL ASSUME RADIUS OF BAR IS 100 (WITH THREE FRACTIONAL BITS
;X=R * COS (ANGLE TO CENTER OF MASS)
;NET GAME.
POSBAR:
;IF SHIP 0; AND 1 WAS ALREADY CALCULATED(SDELAY+1<NOT ZERO)
;USE ITS VALUES
	TXA
	BNE 15$			;VALUES NOT CALCULATED
	LDA SDELAY+1
	BNE 15$
	LDY I,0
	TYA			;A=0
	SEC
	SBC XPOSSAVE		;RECALL SAVED X POSITION RELATIVE TO BAR
	ASL
	BCC 72$
	DEY
72$:	CLC
	ADC OBJXL+ZPAIR
	STA OBJXL+ZSHIP
	TYA
	ADC OBJXH+ZPAIR
	STA OBJXH+ZSHIP
	LDY I,0
	TYA			;A=0
	SEC
	SBC YPOSSAVE
	ASL
	BCC 73$
	DEY
73$:	CLC
	ADC OBJYL+ZPAIR
	STA OBJYL+ZSHIP
	TYA
	ADC OBJYH+ZPAIR
76$:	STA OBJYH+ZSHIP
	LDA XINC+ZPAIR
	SEC
	SBC XINCROT
	STA XINC+ZSHIP
	LDA YINC+ZPAIR
	SEC
	SBC YINCROT
	STA YINC+ZSHIP
	RTS		; (EXIT)
15$:
	LDA BANGLE
	CPX I,0
	BEQ 12$
	EOR I,80
12$:	STA TEMP7B		;HAVE ANGLE
20$:	JSR COS
	STA XPOSSAVE
	LDY I,0
	ASL
	BCC 25$
	DEY
25$:	LDX TEMP3
	CLC
	ADC OBJXL+ZPAIR		;LOW BYTE OF X COORD OF CENTER OF MASS
	STA X,OBJXL+ZSHIP
	TYA
	ADC OBJXH+ZPAIR
;NOT NEED TO ET SCREEN POSITION AS
;MOTION WILL DO THAT.
	STA X,OBJXH+ZSHIP
;CONTINUE BY STORING THE ROTATIONAL
;PORTION OF YINC INTO THE SHIPS
;YINC. SO FAR THIS IS ONLY USED
;FOR MUZZLE VELOCITY OF SHOTS, SO
;ONLY NEED THE HIGH BYTE OF ACCURACTY.
;NOTICE THAT THE NUMBER USEFUL FOR
;X POSTION IS THE SAME ONE USEFUL 
;FOR YINC.
;YINC(ROTATION)=R*COS(0)(COSINE OF ANGLE FROM CENTER OF MASS)
;COSINE OF ANGLE FROM CENTER OF MASS
	LDA XPOSSAVE
	STA TEMP1
	LDA UWBAR
	JSR SSMULT
;	LDA TEMP2+1
;MULTIPLY BY ROTATION FACTOR
TWOPI=TWOPI			;REMINDER FOR CROSS REF
;MULTIPLY BY 6
;NOT NEED TO WORRY BOUT OVERFLOW
;BECAUSE UWBAR STAYS SMALL
	ASL
	STA TEMPA
	ASL
	CLC
	ADC TEMPA
	LDX TEMP3
	STA YINCROT
	CLC
	ADC YINC+ZPAIR
	STA X,YINC+ZSHIP
;NOW SIMILIAR FOR Y COMPONENT
30$:
	LDA TEMP7B
	JSR SIN
	LDX TEMP3
;MULTIPLY BY TWO
	STA YPOSSAVE
	LDY I,0
	ASL
	BCC 35$
	DEY
35$:
	CLC
	ADC OBJYL+ZPAIR
	STA X,OBJYL+ZSHIP
	TYA
	ADC OBJYH+ZPAIR
	STA X,OBJYH+ZSHIP
;NOW WE DO THE XINC COMPONENT
;SIMILIAR TO YINC BEFORE
;XINC=-SIN(ANGLE FROM CENTER OF MASS)WR
	LDA YPOSSAVE
	JSR COMP
	STA TEMP1
	LDA UWBAR
	JSR SSMULT
;	LDA TEMP2+1
;MULTIPLY BY ROTATION FACTOR
TWOPI=TWOPI			;CROSS REF REMINDER
;MULTIPLY BY SIX
	ASL
	STA TEMPA
	ASL
	CLC
	ADC TEMPA
	LDX TEMP3
	CLC
	STA XINCROT
	ADC XINC+ZPAIR
	STA X,XINC+ZSHIP
	RTS
	
	.SBTTL RIGTHRUST-THRUST TWO SHIPS WITH RIGID BAR
;DETERMINE THE MOTION OF THE PAIR
;BOUND BY A RIGID BAR

;THE ANGLE OF THE BAR IS IN BANGLE
;THE ANGULA;THE SIN OF THE RELATIVE VECTOR IS THE
;ENERGY COMPONENT ENEMY SPLIT BETWEEN ROTATION
;AND CENTER OF MASS
;THE COSINE OF THIS ANGLE IS THE
;PURE CENTER OF MASS MOVEMENT
;VALUE OF THRENG ASSUMES WILL BE MULTIPLED
;BY A SIGNED NUMBER TWICE
;EFFECTIVELY DIVIDING ITS VALUE BY 2 EACH TIME
;ROTENG=THRENG12R*(DEG/RAD);R=100;(DEG/RAD)=100/2PI
;THUS ROTENG=THRENG/4PI
;WHERE ROTENG IS THE INCREASE IN
;ANGULAR VELOCITY THAT IS TO OCCUR
;ACTUALLY DO MORE DIVIDE BY 4
;SINCE NOT HAVE A SIGNED MULTIPLY
;SO ROTENG=THRENG/8PI
;USES TEMP1,(TEMP2,TEMP2+1)
;(TEMP4,TEMP4+1 FOR MULTIPLY
;ALSO USES TEMP5,TEMP6,TEMP7
RIGTHRUST:
	LDA BANGLE
	CPX I,0
	BEQ 5$
	EOR I,080
5$:	STA TEMP7B
	LDA I,ROTENG
	STA TEMP1
	LDA X,SANGLE
	SEC
	SBC TEMP7B
	STA TEMP5		;RELATIVE ANGLE
	JSR SIN
	STA TEMP7		;SIN OF RELATIVE ANGLE
	JSR MULTIPLY
;POSSIBLE ADJUSTMENT
	LDY I,0
;	LDA TEMP2+1		;RESULT OF MULTIPLY
	TAX			;SET STATUS
	BPL 10$
	DEY			;SIGN EXTENSION
10$:	CLC
	ADC LWBAR
	STA LWBAR
	TYA
	ADC UWBAR
	STA UWBAR
;THE ROTATIONAL ACTION ALSO ADDS
;TRANSLATION ENERGY TO THE
;CENTER OF MASS
;FOR X COMPONENT THIS IS
;X=T/2[SIN(RELATIVE)COS(BAR+40 HEXDEG)]
;=-T/2[SIN(RELATIVE)SIN(BAR)]
;FOR Y COMPONENT THIS IS
;Y=T/2[SIN(RELATIVE)SIN(BAR+40 HEXDEG)]
;=T/2 [SIN(RELATIVE)COS BAR]
;LETS DO Y FIRST
	LDA I,THRENG/2
	STA TEMP1
	LDA TEMP7		;SIN OF RELATIVE ANGLE
	JSR MULTIPLY
;	LDA TEMP2+1
	STA TEMP6
	STA TEMP1		;PREPARE FOR NEXT MULTIPLY
	LDA TEMP7B		;ANGLE OF BAR
	JSR COS
	JSR SSMULT		;INTRINSIC DIVISION BY 2 OCCURRED
	LDY I,0			;SIGN EXTENSION
;SNCE SSMULT /MULTS RESULTS (-3F,+3F)
;WILL BE ABLE TO DOUBLE BY ASL
;	LDA TEMP2+1
	ASL			;SET STATUS
	BPL 20$
	DEY
20$:	CLC
	ADC BYINCL
	STA BYINCL
	TYA
	ADC BYINC
	JSR MOVE2
	STA BYINC
;SIMILIAR FOR Y COMPONENT
	LDA TEMP6
	STA TEMP1
	LDA TEMP7B		;ANGLE OF BAR
	CLC
	ADC I,40
	JSR COS
	JSR SSMULT
	LDY I,0			;SIGN EXTENSION
;	LDA TEMP2+1
	ASL			;SET STATUS
	BPL 30$
	DEY
30$:	CLC
	ADC BXINCL
	STA BXINCL
	TYA
	ADC BXINC
	JSR MOVE2
	STA BXINC
;NOW DETERMINE HOW MUCH THE
;CENTER OF MASS IS TO MOVE
;TRANSLATIONALLY
;X COMPONENT=T COS(RELATIVE)COS(BAR)
;SECTION INCLUDES A SIGNED MULTIPY
;WHICH DOES EFFECTIVE DIVIDE BY 2
	LDA I,THRENG/2
	STA TEMP1		;MULTIPLIER
	LDA TEMP5		;RELATIVE ANGLE
	JSR COS
	JSR MULTIPLY
;	LDA TEMP2+1
	STA TEMP6		;STORE TRANSLATION AMOUNT
	STA TEMP1		;FOR MULTIPLY
	LDA TEMP7B
	JSR COS
	JSR SSMULTIPLY
	LDY I,0			;SIGN EXTENSION
	ASL TEMP2		;BEGIN MULTIPLY BY TWO
	ROL
;ACC NOW HOLD AMOUNT TO BE ADDED TO
;SHIPS LOWER X INCREMENT
	BPL 40$
	DEY			;NEGATIVE
40$:	CLC
	ADC BXINCL
	STA BXINCL
	TYA
	ADC BXINC
	JSR MOVE2
	STA BXINC
;SIMILIAR FOR VERTICAL
;Y COMPONENT=T COS(RELATIVE)SIN(BAR)
	LDA TEMP6
	STA TEMP1		;FOR MULTIPLY
	LDA TEMP7B
	JSR SIN
	JSR SSMULTIPLY
	LDY I,0			;SIGN EXTENSION
	ASL TEMP2
	ROL
	BPL 50$
	DEY			;NEGATIVE
50$:	CLC
	ADC BYINCL
	STA BYINCL
	TYA
	ADC BYINC
	JSR MOVE2
	STA BYINC
	RTS
	
	.PAGE
	.SBTTL MOVE PAIR
DORIGEX:	RTS
DORIGID:
	LDA OBSHIP
	ORA OBSHIP+1
	BNE DORIG3		;AT LEAST ONE SHIP ON SCREEN
DORIG2:
	LDA HITS
	BEQ DORIGEX
;IF THE SHIPS ARE NOT HERE, SPEED IS UNIMPORTANT
;IS THIS CHECK NEEDED?
	LDA SDELAY
	ORA SDELAY+1
	BEQ DORIGEX			;THEY WERE NOT WAITING
	LDA SDELAY
	BEQ 10$
	DEC SDELAY
10$:	LDA SDELAY+1
	BEQ 20$
	DEC SDELAY+1
20$:	LDA SDELAY
	ORA SDELAY+1
	BNE DORIG4

;HAVE DETERMINED THAT BOTH SHIPS
;SHOULD COME BACK.
;WILL APPEAR

	JSR NEWPAIR
	LDX I,ZZPAIR
	LDY I,ZLENEMY
	JSR NEAR10		;CHECK FOR NEARBY OBJECTS
	BNE 25$			;TRAFFIC
	JSR ENMWAIT
	BEQ DORIG5		;NO ENEMIES
25$:	INC SDELAY
	INC SDELAY+1		;IF NEEDED
DORIG4:	RTS
;SHIPS TO COME BACK
DORIG5:	BIT ATRACT		; ATTRACT?
	BPL 1$			;IF YES, DONT LOSE LIVES
	DEC HITS
	DEC HITS+1
1$:	LDA I,80+3F		;SCORE AND LIVES
	STA CMBSCFLAG
	LDA I,SHPALIVE
	STA OBSHIP
	STA OBSHIP+1
	STA OBPAIR
	LDA I,0
	STA SCRFUL
	STA COMOFF		; ALLOW ENEMIES
	STA COMTIMER		; END THE ONSLAUGHT
	STA NENTDWARFS
	STA NENTCOMETS
	JSR RESTIMERS
9$:
DORIG3:
		.SBTTL 	PARTIAL DAMAGE TO STATIONS
	LDA SPARKTIME		;FUSE GOING???
	BPL 16$
	LDX #1
10$:	LDA X,OBSHIP		;THIS ONE HERE???
	BNE 15$			;YEP...SO SKIP IT
	LDA X,PRTDAMAGE		;NOT HERE...WAS DAMAGED??
	BEQ 15$			;IF NOT....NOT THIS ROUTINE PROBLEM
	LDA #2
	STA X,OBSHIP		;RETURN SHIP
	STA X,ENTER		;GIVE SHIELDS ON ENTRY
15$:	DEX
	BPL 10$			;DO BOTH
16$:	LDX I,1
20$:	STX TEMP3
;TO SHIP 1, THE BAR APPEARS TO BE ALTERNATED
;180 DEGREES. WILL TILT IT BACK FOR SHIP 0
;SEE IF SHIP IS ACTIVE
	LDA X,SDELAY
	BNE 71$
	BIT TOGDRONE
	BPL 50$			;NOT DRONE
;PROBABLY WILL WANT TO ELIMINATE THIS EXTRA THRUST
;ALLOW MORE THRUST ABILITY
	CLC			;YES, WANT TO THRUST THIS FRAME
	LDX I,0
	BEQ 55$			;(ALWAYS)
;CHECK THRUST
50$:	TXA
	EOR FRAME
	LSR			;SET CARRY
55$:	BIT ATRACT
	BMI 56$
	LDA POKEY2+POKRAN
	JMP 57$
56$:	LDA X,THRUST
57$:	BCS 70$			;NOT CHECK THRUST THIS FRAME
	BPL 70$			;NO THRUST
	JSR RIGTHRUST
	LDX TEMP3
	JSR THRUSN		;THRUST ON
70$:
	LDX TEMP3
75$:	JSR POSBAR
71$:	LDX TEMP3
	DEX
	BPL 20$
;MAY AS WELL DO UPDATE OF ROTATION
	LDA LWBAR
	CLC
	ADC BANGLL
	STA BANGLL
	LDA UWBAR
	ADC BANGLE
	STA BANGLE
;DRONE ANGLE NOW SET IN FRCALC
;PROVIDE FRICTION!
;DO NOT ACTIVATE THIS SECTION IF EITHER
;THRUST IS ON
	LDA THRUST
	BIT TOGDRONE
	BMI 80$			;PLAYER 1 THRUST NOT COUNT
	ORA THRUST+1
80$:	ASL
	BCC 82$			;NO ACTIVE THRUST IS ON
	RTS			;(EXIT)
82$:	LDY I,0
	LDA BXINCL
	STA TEMPA		;NOT NEEDED
	ORA BXINC
	BEQ 27$			;IF X=0
	LDA BXINC
	EOR I,0FF
	SEC
	BPL 26$			;IF IT WAS POSITIVE
	DEY			;SIGN EXTEASION
	CLC
26$:
;PUT IN ANOTHER ASL,ROL TEMPB
;IF WANT MORE FRICTION
;XINCL WAS -1 OR 1,WANT TO
;GET IT TO 0, WITHOUT GOING PAST 0
	ADC BXINCL
	STA BXINCL
	TYA
	ADC BXINC
	STA BXINC
27$:	LDY I,0
	LDA BYINCL
	STA TEMPA		;NOT NEEDED
	ORA BYINC
	BEQ 29$			;IF Y=0
	LDA BYINC
	SEC
	EOR I,0FF
	BPL 28$			;IF WAS POSITIVE
	DEY
	CLC
28$:
;PUT IN ANOTHER ASL, ROL TEMPB
;IF WANT MORE FRICTION
	ADC BYINCL
	STA BYINCL
	TYA
	ADC BYINC
	STA BYINC
29$:	
	LDY I,0
	LDA LWBAR
	STA TEMPA		;NOT NEEDED
	ORA UWBAR
	BEQ 90$			;IF X=0
	LDA UWBAR
	EOR I,0FF
	SEC
	BPL 36$			;IF IT WAS POSITIVE
	DEY		;SIGN EXTEASION
	CLC
36$:
;PUT IN ANOTHER ASL,ROL TEMPB
;IF WANT MORE FRICTION
;ADD	LSR TEMPB,ROR IF WANT LESS FRICTION
;SAVED STATUS BECAUSE IF ORIGINAL
;XINCL WAS -1 OR 1,WANT TO
;GET IT TO 0, WITHOUT GOING PAST 0
	ADC LWBAR
	STA LWBAR
	TYA
	ADC UWBAR
	STA UWBAR
90$:	RTS
	.PAGE
	.SBTTL NEW ASTEROIDS ROUTINES
	.SBTTL	 NEARBY - CHECK FOR ROCKS NEARBY
;NEARBY - CHECK FOR ROCKS NEAR SHIP
;ENTRY	(X)=SHIP RELATIVE TO OBSHIP (0,1),OR ZZPAIR
;EXIT	(CONDITION CODE IS EQUAL)=0 IF AREA FREE OF ROCKS
;USES	Y
;
;NOT ALLOW SHIP TO COME IN NEAR OTHER SHIP
;OWN SHIP DEAD, SO CAN ALWAYS START Y HERE
NRDIST=7
INDIST=3
NEARBY:	LDY I,ZSHIP+1
;X SHIP IS DEAD, SO WILL NOT CHECK SELF AGAINST SELF
NEAR10:
;TEMPA IS THE POSITIVE CRITERION FOR
;TEMPB IS THE NEGATIVE CRITERION FOR NEARNESS
NEAR20:
10$:	LDA Y,OBJ
	BEQ 80$			;OBJECT NOT ALIVE
	LDA Y,OBJXH
	SEC
	SBC X,OBJXH+ZSHIP
;CONTINUE CHECKING X FOR POSITION ONLY
	CMP I,NRDIST+1
	BCC 20$			;IF CLOSE ENOUGH
	CMP I,-NRDIST
	BCC 80$
; MAY BE CLOSE, BUT GOING OTHER WAY
	CMP I,-INDIST
	BCS 40$			; CLOSE IN X
	LDA Y,XINC
	BMI 80$			; GOING OUT OF THE WAY
	BPL 40$
20$:	CMP I,INDIST+1
	BCC 40$			; VERY CLOSE IN X
	LDA Y,XINC
	BPL 80$			;; GOING OUT OF WAY
;	BMI 40$			; COMING IN , NEED TO CHECK Y
40$:	LDA Y,OBJYH
	SEC
	SBC X,OBJYH+ZSHIP
	CMP I,NRDIST+1
	BCC 50$
	CMP I,-NRDIST
	BCC 80$			; FAR AWAY
; MAY BE GOING WRONG WAY
	CMP I,-INDIST
	BCS 90$			; TOO CLOSE
	LDA Y,YINC
	BMI 80$			; GOING OUT OF WAY
	BPL 90$		; CLOSE, AND COMING IN
50$:	CMP I,INDIST+1
	BCC 90$			; TOO CLOSE
	LDA Y,YINC
	BMI 90$
80$:
	DEY
	BPL 10$			;LOOP THRU ALL OBJECTS
90$:	INY			;ADJUST ZERO FLAG ON EXIT
	RTS
;
; INITIAL POSITION FOR SPACE DUEL NAME LETTERS
CUBX:	.BYTE 3,6,9,0C,0F,15,18,1B,1E,0,0,0,0,0,0
	
	.SBTTL NEWPLACE
;POSITIVE INITIAL COORDINATES OF ROCK TO
;RANDOMLY START ON X OR Y AXIS
;ALSO GIVES A VELOCITY
	.SBTTL	SPECIAL CUBE START
NEWP2:	BIT ATSTG
	BPL NEWPLACE		;NORMAL
	TXA
	AND #0F
	TAY			;POSITION INDEX
	LDA Y,CUBX-1
	STA X,OBJXH
	LDA #10
	STA X,OBJYH		;ALL SAME Y POSITION
	LDA #0
	STA X,XINC
	STA X,YINC		;NO MOTION
	STA X,OBJXL
	BEQ NEWOUT
	.SBTTL	FIND NEW PLACE
NEWPLACE:JSR NEWVEL		;GET NEW VELOCITY
	LDA POKEY1+POKRAN	;RANDOM NUMBER
	LSR
	AND I,1F
	BCC 50$			;START ON X AXIS
	CMP I,18		;START ON Y AXIS
	BCC 35$			;IF 0 TO 767
	AND I,17
35$:	STA X,OBJYH
	LDA I,0
	STA X,OBJXH
	STA X,OBJXL
	RTS			;(EXIT)
	
50$:	STA X,OBJXH
	LDA I,0
	STA X,OBJYH
NEWOUT:	STA X,OBJYL
	
NEWAEX:	RTS
	.SBTTL	 START UP NEW ASTEROIDS
;NEWAST-START NEW ASTEROIDS
;
;
;
NEWAST:	LDA GENDING
	BNE NEWAEX		;NOT IF IN GAME ENDING
	LDA ATRACT
	BMI 29$			;NOT ATTRACT
	LDA FRAME+1
	AND #<HSBIT*2>-1	;WAIT TO START ROCKS
	ORA SHHIGH		;WAIT FOR END OF INITIALS
	BNE NEWAEX		;ELSE WAIT
	JMP 1$
;IF IN COMBINATION, WAIT UNTIL
;BOTH SHIPS ARE BACK BEFORE RESTARTING ROCKS
29$:	JSR ENMWAIT
	BNE NEWAEX
;SEE IF ONSLAUGHT IS STILL GOING
	LDA NENTCOMETS
	ORA NENTDWARVES
	BEQ 71$			;NONE LEFT
	LDA COMTIMER		;ANY TIME LEFT?
	BNE NEWAEX		;WILL WAIT
;IF ONSLAUGHT DONE REDUCE TIME
71$:	LDA I,03
	CMP COMTIMER
	BCS 8$
	STA COMTIMER
8$:	LDA COMTIMER		;JUST IN CASE WE FELL THROUGH
	BNE NEWAEX
	LDA GAME		;WHICH GAME?
	BEQ 1$			;START ANYTIME ON GAME 0 (2PLR FIGHTERS)
	LDA SDELAY
	ORA SDELAY+1
	BNE NEWAEX
1$:	LDA #0			;MIGHT WANT TO TURN THIS OFF
	BIT ATRACT
	BMI 42$			;NOT ATRACT
	LDA ATSTG
	EOR #80			;ALT SPECIAL FLAG
42$:	STA ATSTG
	BIT ATSTG		;SPECIAL ATRACT?????HUH?
	BPL 44$			;NOT THIS TIME CHARLIE!
	LDA #0
DELAMT	=NMP0MINES+NMP0MINES+NMCOMINES+NMSHIPS+NMSAUCER+1
	LDX #DELAMT-1		;CLEAR ALL SHOTS TOO
43$:	STA X,OBSAUCER		;CLR SAUCERS, SHIPS, AND SHOTS
	DEX
	BPL 43$
44$:	LDA #0FF
	STA TEMP8		;USED FOR RANDOM SPINNER DIRECTION
	INC WAVE		;NEXT WAVE
	CLC
	LDA DIFCTY		;CURRENT DIFF LEVEL (GAME PLAY)
	LDX DIFF		;OPTION SETTING FOR INCREASE DIFF
	ADC X,UPDIFL
	CMP #09			;WANT TO MAX OUT AT 9
	BCC 2$
	LDA #9
2$:	STA DIFCTY
;IN ATTRACT WANT TO GO BACK
;TO MINIMUM DIFFICULTY
	LDA ATRACT
	BNE 4$
	LDA I,7
	BIT ATSTG		;SPECIAL ATRACT?
	BMI 22$			;YEP...DO 9 SHAPES
	LDA #1
22$:	STA DIFCTY
	STA WAVE
;GET RID OF KILLER MINES
	LDX I,NMKLMINES-1
	LDA I,0
3$:	STA X,OBKLMINES
	DEX
	BPL 3$
;COMPUTE STARTING ROCKS FROM
;SROCKS= DIFFICULTY +2
;MAY WANT IT TO DEPEND ON OPTION SWITCHES TOO
4$:
	LDA DIFCTY
;	ASL			;CARRY CLEAR FROM ASL
6$:	CLC
	ADC I,2
	TAX		;COUNTER FOR NUMBER OF ROCKS TO INITIATE
	STA NROCKS
;BASE ALL MOTION UPON A STILL ROCK
	LDY I,0
	TYA
	LDX #NMROCKS-1
7$:	STA X,OBJ
	DEX			;REMOVE ALL ROCKS
	BPL 7$			;BEFORE STARTING
	STA MODNUM		;SO IT WILL START OVER FIRST TIME
	LDX NROCKS
	STY XINC		;LOWEST ROCK
	STY YINC
10$:	JSR PICSEL
	ORA #4			;ADD SIZE
	STA X,OBJ		;SET PICTURE
	JSR NEWP2
	DEX
	BNE 10$			;LOOP FOR EACH NEW ROCK
75$:	LDA I,0
	STA SCRFUL		;SCREEN NOT FULL
	STA COMOFF
;FOR NON COMPETITIVE GAME,
;INTRODUCE AN EXTRA MINE
;EVERY TWO WAVES
;ALL MINES NEED TO BE REINTRODUCED
	LDA DIFCTY
	SEC
	SBC #1			;#=WAVE-1
	BEQ 80$
	STA TEMP1		;COUNTER
	LDA I,0
	STA KLMOFF		;MINES TO STAY
76$:	JSR INKLMINE
	DEC TEMP1
	BNE 76$
80$:	LDA WAVE
	TAY			;SAVE EXTRA COPY OF A
	LDX DIFF		;WILL USE THIS TO MAKE ROCKS FASTER
	AND X,RSPDTH		;EVERY N'TH FRAME, SPEED UP ROCKS HIGH END
	BNE RESTIMERS
	CLC
	LDA ROCKMAX		;UP MAX VELOCITY EVERY NEW WAVE
	ADC X,MAXA		;AMOUNT TO ADD
	CMP #3F			;DONT LET GO TO FAST
	BCS 81$
	STA ROCKMAX
	EOR #0FF		;DO THE MAX NEG ALSO
	ADC #01			;CARRY WAS CLEAR
	STA ROCKMAX+1
81$:	TYA
	AND X,RSPDTL		;EVERY X'TH FRAME SPEED UP ROCKS MIM ALLOWED VEL
	BNE RESTIMERS		;MOVE UP BOTTOM EVERY EIGHT FRAMES
	LDA ROCKMIN
	ADC X,MINA		;AMOUNT TO MOVE BOTTOM
	CMP #30			;MAX MIN WILL BE 30 
	BCS RESTIMERS
	STA ROCKMIN
	EOR #0FF
	ADC #01			;NEG
	STA ROCKMIN+1
	.PAGE
	.SBTTL NEW SHIP AND ENEMY ROUTINES
	.SBTTL	RESTIMERS-RESET ENEMY TIMERS
RESTIMERS:
	LDX I,1
85$:	LDA X,MXRTIMER
	STA X,RTIMER
	LDA #07F		;MAX DELAY ON NEW ASTEROIDS
	STA X,ENMDEL
	DEX
	BPL 85$
	RTS
	.SBTTL	NEWPAIR-INITIAIZE PAIR
;INITIAIZE THE BAR FOR THE PAIR OF SHIPS IN
;CENTER OF SCREEN.
;USES
NEWPAIR:
	LDA I,0
	STA BANGLE		;HORIZONTAL
	STA LWBAR
	STA UWBAR		;NO ANGUBR ACCELARATION
	STA BXINC		;NO VELOCITY
	STA BYINC
;INITIALIZE ROUNDING
	LDA I,80
	STA BANGLL
	STA BXINCL
	STA BYINCL
	STA SPARKTIME
	LDA I,BGSHENG
	STA SHLDENG
	STA SHLDENG+1
;OFFSET THE SECONDARY BYTES
	LDX I,ZZPAIR
;FALL INTO NEWSHP
;NEWSHP-POSITION SHIP FOR START
;ENTRY	(X)=SHIP NUMBER
;
	.SBTTL	NEWSHP-NEWSHIP 
NEWSHP:
	LDA I,0
	STA X,OBJXL+ZSHIP
	STA X,OBJYL+ZSHIP
	STA PRTDAMAGE			;RESET DAMAGE
	STA PRTDAMAGE+1
	LDA I,XRIGHT/2
	STA X,OBJXH+ZSHIP
	LDA I,YTOP/2
	STA X,OBJYH+ZSHIP
	CPX #ZZPAIR		;PAIR BACK?
	BNE 10$			;NO
	LDA #50			;SOUND & EFFECT
	STA ENTER
	STA ENTER+1
	JSR EN0SN
	JMP EN1SN
10$:	RTS


	.SBTTL	CPYPOS - COPY ATTRIBUTES OF ROCK
;CPYPOS - COPY ATTRIBUTES OF ROCK
;
;ENTRY (X)=NEW ROCK INDES
;      (Y)=OLD ROCK INDEX
;EXIT  X,Y PRESERVED
;USES TEMP1
CPYPOS:
	LDA Y,OBJXL		;COPY POSITION
	STA X,OBJXL
	LDA Y,OBJXH
	STA X,OBJXH
	LDA Y,OBJYL
	STA X,OBJYL
	LDA Y,OBJYH
	STA X,OBJYH
	LDA Y,XINC		;COPY VELOCITY
	STA X,YINC
	STA X,YINC
	LDA Y,OBJ		;COPY PICTURE
	BIT ATSTG		;RANDOM ROCKS?
	IFPL
	AND I,07
	STA TEMP1		;SAVE SIZE
	JSR PICSEL		;NEW PIC
	ORA TEMP1		;ADD SIZE
	ENDIF
	STA X,OBJ
;FALL INTO NEWVEL
	.SBTTL NEWVEL - NEW RANDOM VELOCITY USING OLD
;NEWVEL - NEW RANDOM VELOCITY FOR NEW VELOCITY
;GIVES RANDOM VELOCITY TO ROCK X
;THIS IS CLOS TO ROCK Y
;ENTRY	(X)=INDEX FOR NEW VELOCITY
;	(Y)=INDEX OF OLD VELOCITY
;
;EXIT	X,Y PRESERVED
NEWVEL:	LDA POKEY1+POKRAN	; RANDOM NUMBER
	AND I,0BF
	BPL 10$			;IF POSITIVE NUMBER 0 TO 3
	ORA I,0F0		;-1 TO -4
10$:	CLC
	ADC Y,XINC
	JSR NEWVE1		;CHECK RANGE OF VELOCITIES
	STA X,XINC
	LDA POKEY1+POKRAN
	AND I,0BF
	BPL 40$			;POSITIVE NUMBER 0 TO 3
	ORA I,0F0		;NEGATIVE -1 TO -4
40$:	CLC
	ADC Y,YINC
	JSR NEWVE1		;CHECK RANGE OF VELOCITY
	STA X,YINC
	RTS

NEWVE1:	BPL NEWVE5		;POSITIVE RESULULTS
	CMP ROCKMAX+1
	BCS 15$			;WITHIN RANGE
	LDA ROCKMAX+1
15$:
NEWVE3:
	CMP ROCKMIN+1
	BCC 20$			;NOT TOO CLOSE TO ZERO
	LDA ROCKMIN+1		;AT LEAST 1/2
20$:	RTS

NEWVE5:	CMP ROCKMAX
	BCC NEWVE7		;WITHIN RANGE
	LDA ROCKMAX
NEWVE7:	CMP ROCKMIN
	BCS 30$			;NOT TOO CLOSE TO ZERO
	LDA ROCKMIN
30$:	RTS
MINVEL:	BPL NEWVE7
	BMI NEWVE3
MAXA:	.BYTE 2,4,5,6		;ROCK SPEED UP AMOUNT
MINA:	.BYTE 1,3,4,5		;MIN VEL ADD AMOUNT
UPDIFL:	.BYTE 1,1,2,2		;'DIFCTY' INCREASE BASED ON DIFF (OPTIONS)
RSPDTH:	.BYTE 3,1,1,0		;ROCK SPEED UP EVERY N'TH FRAME BASED ON DIFF
RSPDTL:	.BYTE 7,3,1,0		;MIM VEL SPEED UP EVERY X'TH FRAME BADED ON DIFF
	.PAGE
	.SBTTL	DOSHIELD-PROCESS SHIELDS
;DECREASE SHEIELD ENERGY IF
;HYPERSPACE SWITCH DEPRESSED.
;USES X
DOSHIELD:
	LDX I,1
;REMOVE OLD SHIELDS ON
20$:	LDA X,TOGGLE
	AND I,0FF-SHLDON
	STA X,TOGGLE
	JSR SHILSW		;READ SHIELD SWITCH
	BPL 80$
	LDY X,OBSHIP
	BEQ 80$			;HE IS ALIVE, BUT NOT SHOWING NOW
	BMI 80$			;NO SHIELDS WHEN IN SUSPENDED ANIMATION
	LDY X,SHLDENG
	BEQ 80$
;TURN SHIELDS ON
	ORA I,SHLDON
	STA X,TOGGLE
	CPX #1
	BEQ 41$
	JSR SH0SN		;SHIELD SOUND
	JMP 43$
41$:	JSR SH1SN
43$:	JSR DROPSHI		;TAKE OUT SHIELD ENERGY
80$:	DEX
	BPL 20$
90$:	RTS
	.SBTTL	READ HYPE SWITCH
;IN TWIN GAME, BOTH SHIELDS OPERATE FROM SAME BUTTON
SHILSW:	BIT ATRACT
	BPL 40$			;SKIP THIS DURING ATTRACT
	LDY GAME
	CPY I,TWINGAME
	BNE 30$			;NORMAL
	LDY HYPSW		;ONE PLAYER
	JMP 40$
30$:	LDY X,HYPSW		;HYPERSPACE SWITCH
40$:	RTS
	.SBTTL	DROP SHIELD ENERGY
DROPSHI:	LDA GAME		;GAME 2&3, SHIELDS DROP HALF SPEED
	CMP #2
	BCC 45$
	LDA X,LSHLDENG
	SEC
	SBC #18
	JMP 46$
45$:	LDA X,LSHLDENG
	SEC
	SBC I,30
46$:	STA X,LSHLDENG
	LDA X,SHLDENG
	SBC I,0			;SBC 1 IF BORROW
	CMP I,MINSHENG
	BCS 70$
	LDA I,0
70$:	STA X,SHLDENG
	RTS
;
;ENTRY (A)=ADDRESS IN ZERO PAGE OF START OF NUMBER
;TEMP3=WHICH PLAYER(0,1,2)
;2 IS FOR COMBINED SCORE
;USES TEMP 1
DIGLIV:
	LDY I,3			;3 DIGIT PAIRS
	SEC			;ZERO SUPPRESSION ON
	JSR DIGITS
	LDA I,0
	JSR VGHEX		;ADD PHANTOM 0 TO SCORE
	LDX TEMP3
;SEE IF NUMBER OF LIVES HAS
;CHANGED;BIT 6 OFF=CHANGE
	LDA X,PL0SCFLAG
	ASL
	BMI 80$			;GOOD, DONT NEED TO CHANGE HUES
	BIT TOGCOMB
	BPL 30$			;NOT COMBINED LIVES
;NOT DISPLAY SEPARATE LIVES
;FOR COMBINE SCORE GAME
	CPX I,2			;FOR COMBINED LIVES
	BNE 70$			;NOT SHOW INDIVIDUAL LIVES
	LDX I,0			;CHECK PLAYER 0'S LIVES
30$:	LDA X,HITS
40$:	BEQ 70$
	BMI 70$			;MAY NOT BE NEEDED
50$:	STA TEMP1
	LDA GAME		;IF GAME 3, DON'T FLIP PLAYER 1
	CMP #3
	BNE 51$
	STA UPDOWN		;CLEAR 'UPDOWN' FOR REST OF ROUTINE AS WELL
51$:	LXHJSR LIVEPAR		;SCALE AND POSITIONING
	LALJSR LIVEPAR		;FROM LAST SCORE
	BIT UPDOWN
	BPL 55$			;NORMAL
	LXHJSR LIVUDPAR
	LALJSR LIVUDPAR
55$:	JSR VGADD2
	
60$:	LDY TEMP3
	LDA Y,LLIVESHIP
	LDX Y,ULIVESHIP
	BIT UPDOWN
	BPL 65$			;NORMAL
	LDA Y,LLIVUDSHIP-1
	LDX Y,ULIVUDSHIP-1
65$:	JSR VGADD2
	DEC TEMP1
	BNE 60$
;LIVES HAVE CHANGED
70$:	JSR VGRTSL
80$:
90$:	RTS
	.PAGE
	.SBTTL ENPARAMS-ENTER PARAMETER JSRL'S INTO VG
ENTPARAMS:
	LDA RDELAY
	BEQ 80$
	BIT ATRACT		;ATTRACT?
	BPL 80$	
	LDA FRAME
	AND I,4
	BEQ 80$
	LDA #0			;UP MESSAGE
	STA UPDOWN
20$:	LDA #0E0
	LDX #10
	JSR MESGPOS
	LDX #1			;USE OFFSET 1 HERE
	JSR LANGOFF
	LDY I,20.		;DISPLAY 'BONUS LEVEL'
;WANT BRIGHTNESS
	LDX I,0A7
	JSR VGMSG3
	LDY I,1
	LDA #DIFCTY		;DISPLAY BONUS AMOUNT
	SEC			;ZERO SUPPRESSION
	JSR DIGITS
	LDA I,0
	JSR VGHEX		;PHANTOM ZERO
	LDA UPDOWN
	BMI 80$			;ALREADY DID EXTRA
	LDA CABINET		;EXTRA MESSAGE NOT NEEDED
	BPL 80$			;NO
	STA UPDOWN		;NEED UPSIDE DOWN MSG?
	LDA GAME		;BUT...
	CMP #03			;NOT FOR GAME 3
	BNE 20$			;DO EXTRA MESSAGE
80$:	LDA COMTIMER
	BEQ 85$
	LDA FRAME		;USE FRAME FOR COLORS
	LSR
	LSR
	LSR
	LSR
	BNE 81$			;NO BLACK
	LDA #1
81$:	ORA INTEN
	TAY
	JSR VGSTAT
	LAL FRCFL9
	LXH FRCFL8
	JSR VGADD2
85$:
;JSRL TO SCORE AREAS
	LALJSR QHEADER
	LXHJSR QHEADER
	JSR VGADD2
	LALJSR CMBSET
	LXHJSR CMBSET
	JMP VGADD2		;TO COVER HARDWARS ASS.....
				;...IT WON'T DO 4TH RTSL CORRECTLY
	.PAGE
	.SBTTL PARAMS-DISPLAY PARAMETERS
;PARAMS-DISPLAY PARAMETERS
;IF A SCORE NEEDS TO BE CHANGED
;(INDICATES BY PLOSCEFLAG NEGATIVE)
;CHANGE IT. USES ABNORMAL VGLIST
PARAMS:	:LDA I,0
	STA TEMP3		;USED TO KEEP TRACK OF PLAYER IN DIGLIV
	BIT PL0SCFLAG
	BPL 10$			;SCORE NOT CHANGED
;USE ABNORMAL VGLIST
	LAL PL0AREA
	STA VGLIST
	LAH PL0AREA
	STA VGLIST+1
;PLAYER 0 ON RIGHT
;PROCESS FIRST PLAYER NOW
	LDA #0			;RESET FLAG
	STA PL0SCFLAG
	STA UPDOWN		;NO FLIP FOR COCKTAIL HERE
	LDA #SCORE		;PLAYER 0 SCORE
	JSR DIGLIV
10$:	INC TEMP3
	BIT PL1SCFLAG
	BPL 20$			;SCORE NOT CHANGED
	LDA #0
	STA PL1SCFLAG		;RESET FLAG
	LAL PL1AREA
	STA VGLIST
	LAH PL1AREA
	STA VGLIST+1		;ABNORMAL VGLIST
	LDA CABINET		;(80 OR 0 DEPENDING ON CABINET)
	STA UPDOWN		;SET UP FOR POSSIBLE FLIP
	LDA GAME
	CMP #03			;GAME 3 (1 PLYR STATIONS)?
	BNE 15$			;IF NOT, NEVER MIND.....
	STA UPDOWN		;ELSE, NO FLIP HERE
15$:	LDA I,SCORE+3
	JSR DIGLIV
20$:	
;	BIT HIGSCFLAG
;	BPL 30$			;NO CHANGE
;	LAL HSAREA
;	STA VGLIST
;	LAH HSAREA
;	STA VGLIST+1
;DISPLAY HIGH SCORE
;	LXHJSR HSCRPAR
;	LALJSR HSCRPAR
;	JSR VGADD2
;	LDA I,HSCORE
;	LDY I,2			;2 BYTES OF REAL BCD SCORE
;	SEC			;ZERO SUPPRESSION DESIRED
;	JSR DIGITS
;	LDA I,0
;	JSR VGHEX		;ADD A ZERO
;	LDA NPLAYR
;	BNE 50$			;GAME ON
;DISPLAY GAME NUMBER
;	LXHJSR GAMPAR
;	LALJSR GAMPAR
;	JSR VGADD2
;SCREEN GAME IS ONE MORE THAN INTERNAL GAME
;	INC GAME
;	LDA I,GAME		;ADDRESS OF GAME NUMBER
;	LDY I,1			;ONE BYTE
;	CLC			;NO ZERO SUPPRESSION
;	JSR DIGITS
;	DEC GAME
30$:	BIT CMBSCFLAG
	BPL 40$
	LDA #00
	STA UPDOWN		;THIS ONE ALWAYS UPRIGHT
	STA CMBSCFLAG		;RESTORE FLAG
	LAL CMBAREA
	STA VGLIST
	LAH CMBAREA
	STA VGLIST+1
;DISPLAY COMBINED SCORES & LIVES
	INC TEMP3		;TEMP3 =2 SIGNIFIES COMBINED LIVES
	LDA I,CMBSCORE
	JSR DIGLIV
	LDA #80
	STA UPDOWN		;FLIP EXTRA COMBINED SCORE FOR COCKTAIL
	LAL CMSBAREA
	STA VGLIST
	LAH CMSBAREA
	STA VGLIST+1
	LDA #CMBSCORE
	JSR DIGLIV
40$:
	LDA #0		;RESTORE UPDOWN FOR 'LATER' POSSIBLE CHANGE
	STA UPDOWN
50$:	RTS
	.PAGE
	.SBTTL PICTURE DISPLAY ROUTINE
;PICTUR-DISPLAY OBJECT PICTURE
;ENTRY (X) OBJECT BEING DISPLAYED
;	(XCOMP,XCOMP+3)=OBJECT POSITION
;EXIT	(X)=OBJECT NUMBER
;
PICTX2:	RTS
PICTUR:
;WE MAY NOTICE THAT THE THREE SIFT RIGHTS
;WILL LEAVE ZEROES IN THE PLACES FOR
;INSTRUCTION CODE AND INTENSITY, AS DESIRED
;WILL PUT THE VALUES IMMEDIATELY INTO
;THE VECTOR GENERATOR. TO DO THIS
;WILL START WITH AND END WITH SPECIFIC
;Y VALUES
;THE PURPOSE IS SPEED
	CPX #ZSAUCER		;JUST IN CASE SUPER SAUCER
	BNE 1$
	JSR SUPRC
1$:	LDY I,5
	LDA XCOMP+1		;PUT VALUES INTO RIGHT FORMAT
	SEC
	SBC I,XRIGHT/2		;CONVERT TO 2'S COMPLEMENT
;DO SCALING HERE
	LSR
	ROR XCOMP
	AND I,1F		;BRIGHTNESS OF 0
	STA NY,VGLIST
	DEY
	LDA XCOMP
	STA NY,VGLIST
	DEY
	LDA XCOMP+3
	SEC
	SBC I,YTOP/2		;CORRECT TO 2'S COMPLEMENT
	LSR
	ROR XCOMP+2
	AND I,1F		;INSTRUCTION OF 0
	STA NY,VGLIST
	DEY
	LDA XCOMP+2
	STA NY,VGLIST
	DEY
;PUT JSRL CNTSCL IN VG
;DOES A CENTER AND A SCALE
;CREATE LOAD ACC WITH UPPER BYTE
;OF JSRL
	LDA I,0
	.=.-1
	UBYJSR CNTHSC
	STA NY,VGLIST
	DEY
	LALJSR CNTHSC
	STA NY,VGLIST
;WILL DO JSR VGADD INLINE
;BECAUSE OF TIME PROBLEMS
	LDA VGLIST
	CLC
	ADC I,6	
	STA VGLIST
	BCC 20$
	INC VGLIST+1
20$:
	LDA X,OBJ
	BPL 35$			;IF NOT EXPLODING
	CPX I,ZSHIP
	BCC 32$			;NOT THE SHIP
	CPX I,ZSHIP+NMSHIP
	BCS 32$			;NOT THE SHIP
	JMP SHPEXP		; EXPLODE SHIP
;SET BINARY SCALE
32$:	LDA X,OBJ
	EOR I,0F0
	BIT SPECEX		;BIG ONES?
	IFPL
	CLC
	ADC I,10
	ENDIF
	LSR			;THIS IS A TEST
	LSR
	LSR
	LSR
	ORA I,070
	TAX
	LDA I,0
	JSR VGADD2

	LDX TEMP3
	LDA X,OBJ
	AND I,0E
	PHA
	BIT SPECEX		;SPECIAL EXPLOSIONS?
	IFMI
	TXA
	AND #07
	IFEQ			;NO BLACK
	LDA #RED		;DEFAULT RED
	ENDIF
	ORA #0F0
	LDX #64
	JSR VGADD2
	PLA
	TAY
	LDA Y,EXPSP
	LDX Y,EXPSP+1
	ELSE
	PLA
	TAY
	LDA Y,EXPPIC
	LDX Y,EXPPIC+1
	ENDIF
	JMP VGADD2		;ADD 2 BYTES TO VGLIST
	

;SET SCALE FACTOR
35$:	CPX I,NMROCKS
	BCS 40$
	BIT SPECEX		;SPECIAL EXPLOSION?
	BPL 8$			;NO
	LDX #72
	LDA #0
	JSR VGADD2
	LALJSR FLARE
	LXHJSR FLARE
	JMP VGADD2
8$:	LDY I,0
	TYA
	STA NY,VGLIST		;FULL LINEAR SCALE
	LDA X,OBJ
;GET THE SIZE
	AND I,7
	TAY
	LDA Y,110$-1
	STA TEMP8		;SAVE FOR POSSIBLE LATER USE
	LDY I,1
	STA NY,VGLIST
	INY
;STORE JSRL TO PICTURE BY HAND
	TXA
	AND #07			;ONLY 7 COLORS
	BNE 5$
	LDA #3
5$:	ORA #0E0		;ADD INTENSITY
	STA NY,VGLIST
	INY
	LDA #64
	STA NY,VGLIST
	INY
	BIT ATSTG		;WANT LETTERS
	BPL 7$
	LAL CUBNM9
	LXH CUBNM8
	STA NY,VGLIST
	INY
	TXA
	STA NY,VGLIST
	JMP 15$			;CONTINUE
7$:	LDA X,OBJ
	AND #38			;ONE OF 4 PICTURES
; CLOCK WISE ROCK, COUNTER-CLOCKWISE ROCK,
; PYRAMID, AND CUBE
	LSR
	LSR
;NOTICE CARRY IS CLEAR
	TAX
10$:	LDA AX,ROCKSA
	STA NY,VGLIST
	LDA AX,ROCKSA+1
	INY
	STA NY,VGLIST
;UPDATE VGLIST BY HAND
15$:	SEC
	TYA
	ADC VGLIST
	STA VGLIST
	BCC 37$
36$:	INC VGLIST+1
37$:	BIT ATSTG		;ATTRACT SPECIAL?
	BPL 39$
	INC TEMP8		;NEXT SCALE SIZE
	LDA TEMP8
	JSR VGSCA1		;ADD SCALE
	LDA TEMP3		;INDEX
	AND #0F
	TAX
	LDA X,CUBLTR
	JMP VGHEX1
39$:	RTS			;(EXIT)
40$:	LDY #0
	CPX I,ZMINE
	BCC 74$			;NOT SHOT
	LDA FRAME
	AND I,3
	BNE 85$
	DEC X,OBJ
85$:	LDA X,OBJ			;SHELL LIFE COUNTER
	ASL
	ASL
	ASL
	AND #0F0
	CLC
	ADC X,SHLCOL-ZMINE		;ADD COLOR
	STA NY,VGLIST		;CREATE A STAT INSTRUCTION
	LDA #64
	INY
	STA NY,VGLIST		;FINISH INSTRUCTION
	INY
	CPX #ZMINE+4		;SAUCER SHOT?
	BCS 86$			;NO
	LDA #0
	LDX #73			;SCALE FACTOR
	JSR VGAD2B
	LDA #WHITE+0C0
	LDX #64
	JSR VGADD2		;SET COLOR TO WHITE
	LALJSR SPARKB
	LXHJSR SPARKB		;ADD JSR TO VGLIST
	JMP VGADD2
86$:
	LALJSR SHOT
	LXHJSR SHOT
	BNE 79$			;GO ADD TO LIST(******ALWAYS******)
70$:	CPX I,ZSAUCER
	BCC 80$			;NOT KILLER MINE
	LDA X,OBJ		;WHICH PIC?
	AND #40
	BNE 71$
;
;DISPLAY MOVING SAUCER PIC
;
	LDA #0
	STA NY,VGLIST
	INY
	LDA #72
	STA NY,VGLIST		;SET SCALE
	INY
	LDA SAUCIX		;GET PIC CODE
	ASL
	TAX
	LDA X,SAUCRC		;ADD THE JSRL TO LIST
	STA NY,VGLIST
	INY
	LDA X,SAUCRC+1
	JMP VGAD1B
71$:	LDA #PL1COL+0D0
	CPX #ZSAUCER
	BNE 73$			;******ALWAYS********
	LDA #PL0COL+0D0
73$:	LDX #064		;REST OF COLOR INSTRUCTION
	JSR VGAD2B
	LDA #02
	JSR VGSCA1		;SET SCALE
	LALJSR SAUCER
	LXHJSR SAUCER
	JSR VGADD2
	LALJSR SPARKB		;ADD JSR TO PICTURE
	LXHJSR SPARKB
	JMP VGADD2
74$:	CPX I,ZSHIP
	BCC 70$			;NOT A SHIP
	JMP SHPPIC
80$:	
	CPX I,ZKLMINES
	BCC 90$			;NOT KILLER MINES
;MUST BE KILLERMINE
	LDA INTEN		;PULSE INTENSITY OF KILLERMINE
	ORA X,KLMINC-ZKLMINES
	STA NY,VGLIST
	INY
	LDA #64			;FINISH INSTRUCTION
	STA NY,VGLIST
	INY
	LALJSR MINE
	LXHJSR MINE
79$:	JMP VGAD2B
90$:	LDA X,COMTYP-ZCOMET
	BMI 95$			;GROWN UP
	LALJSR DWARF
	LXHJSR DWARF
	BNE 79$			;ALWAYS
95$:	LDY #0
	LDA FLASHCOL
	STA NY,VGLIST
	LDA #64
	INY
	STA NY,VGLIST
	INY
	LALJSR COMET
	LXHJSR COMET
	BNE 79$			;ALWAYS
	
;SIZE TABLE 71 FOR FULL SCALE
;	      72 FOR HALF SCALE
110$:	.BYTE 72,71,70,70
	
	
SHLCOL:	.BYTE WHITE+060,WHITE+060,WHITE+060,WHITE+060		;WHITE FOR SAUCERS
	.BYTE PL0COL+060,PL0COL+060,PL0COL+060,PL0COL+060		;RED
	.BYTE PL1COL+060,PL1COL+060,PL1COL+060,PL1COL+060		;AND 4 GREEN ONES
CUBLTR:	.BYTE 16,1D,1A,0B,0D,0F,0E,1F,0F,16,1D,1A,0B,0D,0F,0E,1F

	.PAGE
	.SBTTL POINTS-ADD POINTS TO SCORE
;POINTS-ADD POINTS TO SCORE
;
;ENTRY
;	(OWNER)=PLYER NUMBER(D OR 1 OR NEGATIVE)
;NEGATIVE OWNER SIGNIFIES NO BODY GETS POINTS
;	(A)=POINTS TO ADD (DECIMAL)
;USES X
POINTS:	BIT ATRACT		;NO SCORE IN ATTRACT
	BMI 5$
1$:	RTS
5$:	LDX OWNER
	BMI 1$
	SED
	CLC
	ADC DIFCTY
	SEC
	SBC #1			;BONUS DISPLAY=DIFCTY LEVEL -1
	STA TEMPA		;FOR COMBINED SCORE
	DEC X,PL0SCFLAG		;SIGNIFY TO INTERRUPT ROUTINE THIS SCORE HAS BEEN CHANGED
	CPX I,0
	BEQ 10$
	LDX I,3			;MULTIPLY X BY NUMBER OF BYTES IN SCORE
10$:	CLC			;MAY NOT BE NEEDED
	ADC X,SCORE
	STA X,SCORE
	BCC 60$			;NO EXTRA 1000
	LDA I,0
	ADC X,SCORE+1		;CANNOT INCREMENT WHILE IN DECIMAL
	STA X,SCORE+1
	STA TEMP9		;SAVE FOR HIGH SCORE COMPARE
	LDA I,0
	ADC X,SCORE+2
	STA X,SCORE+2
	BIT TOGCOMB
	BMI 65$			;WAS COMBINED
	LDA BONLVA		;BONUS ALLOWED
	BEQ 90$			;NO
	LDX OWNER
	LDA X,NXTBON
	CMP TEMP9		;CANNOT PASS ON ONE HIT
	BNE 90$			;NOT ACHIEVED
	CLC
	ADC BONLVA		;STEP TO NEXT BONUS LEVEL
	STA X,NXTBON
;INTERRUPT ROUTINE KNOWS LIVES ARE TO BE CHANGED
;WHEN BIT 7 ON BIT 6 OFF
	LDA I,80+3F
	STA X,PL0SCFLAG
	LDA X,HITS
	CMP I,10.		;LIMIT LIVES
	BCS 80$		;ONE MORE LIFE
	INC X,HITS		;ONE MORE LIFE
	BNE 80$			;ALWAYS
60$:	BIT TOGCOMB
	BPL 90$			;NOT COMBINED SCORES
65$:	DEC CMBSCFLAG		;SIGNIFY TO INTERRUPT ROUTINE THAT THIS SCORE WAS CHANGED
	LDA TEMPA
	CLC
	ADC CMBSCORE
	STA CMBSCORE
	BCC 90$
	LDA I,0
	ADC CMBSCORE+1
	STA CMBSCORE+1
	LDA I,0
	ADC CMBSCORE+2
	STA CMBSCORE+2
	LDA BONLVA
	BEQ 90$			;NO BONUS ALLOWED
	LDA NXTBON		;WILL USE PLAYER 0'S FOR COMBINED
	CMP CMBSCORE+1		;ACHIEVED
	BNE 90$			;NO
	CLC
	ADC BONLVA		;STEP TO NEXT LEVEL
	STA NXTBON
	LDA HITS
	CMP I,10.
	BCS 75$
	INC HITS		;GIVE NEW LIVES
	INC HITS+1
75$:	LDA I,80+3F
	STA CMBSCFLAG		;CHANGE LIVES AND SCORE
80$:	CLD
	JMP EXTLIF		;EXTRA LIFE SOUND
90$:	CLD
95$:	RTS
	.PAGE
	.SBTTL HIGH SCORE STUFF
	.SBTTL	 DISPLAY HIGH SCORE TABLE
POSITS:	.BYTE 88,10		;POSITIONS OF TABLES
POSITP:	.BYTE 98,22		;MESSAGE POSITIONS
;SCORES-DISPLAY HIGH SCORE TABLE
;
;(CC)=CARRY SET IF DISPLAYING TABLE
SOUT:	CLC
	RTS		;NOT DOING ANYTHING HERE
SCORES:
10$:
;SEE IF ARE ENOUGH CREDITS
;TO BE IN GAME SELECT
	LDA #0FF
	STA TEMP9		;NO NEED TO STAT GREEN YET
	LDA #01			;SHOW 2 TABLES
	STA TEMP6
13$:	LDA LASTG
	AND #02			;0 OR 2
	LDX SHHIGH
	BNE 17$			;SHOW HIGH SCORE EVEN IF CREDITS
	
;CHOOSE WHICH AREA TO SHOW
12$:	LDA FRAME+1
	AND #HSBIT
	BEQ SOUT
	LDA FRAME+1
	LSR			;SHOW BOTH TABLES
15$:	AND #1
	ASL			;0 OR 2
17$:	CLC			;IN CASE YOUR FROM ABOVE
	ADC TEMP6		;0,1,2, OR 3
16$:	TAX
	LDA X,HSCBEG
	STA TEMP3+2		;INDEX FOR SCORES
	STA TEMP3+3		;INDEX FOR INITIALS
	LDA I,1
	STA TEMP3		;PLACE INDICATOR
	STX TEMP5
;PUT GAME INDICATOR ON TOP
	LDA #0DC
	LDX #3C
	JSR MESGPOS
	LDX #5
	JSR LANGOFF
	LDX #GREEN+0C0
	LDY I,0
	JSR VGMSG3		;DISPLAY "HIGH SCORE" MESSAGE
	LDA I,0DD
	LDX I,0F0
	JSR VGVTR5
	LDX #06		;USE OFFSET 6
	JSR LANGOFF	;TO MOVE SHIP PICS
;******GAME PICTURE*************
	LDA TEMP5
	AND #02
	TAY
	BIT CABERET
	IFVS
	INY
	ENDIF
	LDX Y,PICADH		;GET PICTURE ROM ADDRESS
	LDA Y,PICADL
	JSR VGADD2
	BIT CABERET
	BVS 19$			;NO PLAYER MESSAGE NEEDED
	LDX TEMP6		;1,2 PLYR POSITION
	LDA X,POSITP
	LDX I,1C
	JSR MESGPOS
	LDX TEMP5
	LDY X,110$		;ONE OR A TWO PLAYER
	STY UPDOWN		;ALWAYS NORMAL
	JSR VGMSG5
19$:	LDA I,0
	STA TEMP3+1		;STARTING Y FOR EACH LINE
20$:	LDX TEMP3+2
	LDA AX,HSCORE
	ORA AX,HSCORE+1
	ORA AX,HSCORE+2
	BNE 21$
	JMP 80$
21$:
	JSR VGCNTR
	LDX TEMP6		;START POSITION
	LDA X,POSITS
	BIT CABERET
	IFVS
	LDA #0DA
	ENDIF
	LDX TEMP3+1
	JSR VGVTR5		;POSITION FOR START OF LINE
	LDA TEMP3+3		;INITIAL INDEX
	CMP FLSFLG		;LAST ENETRED?
	BEQ 23$
	CMP FLSFLG+1		;OTHER POSSIBILITY
	BEQ 23$
	BIT TEMP9		;D ALREADY SET BACK TO GREEN?
	BMI 24$
	LDY #GREEN+0C0		;C SET COLOR BACK TO YELLOW
	BIT CABERET
	IFVS
	LDY #RED+0C0
	ENDIF
	STY TEMP9		;SET ALREADY GREEN FLAG
	JSR VGSTAT
	JMP 24$
23$:	LDA FLASHCOL		;A GOOD SLOW FLASH COLOR
	TAY
	JSR VGSTAT
	LDA #0
	STA TEMP9		;SET 'NEED GREEN' FLAG
;
; IF YOU WANTED TO PRINT THE PLACE NUMBER
;YOU WOULD LDA #TEMP3; SEC; LDY #0;
;JSR DIGITS; LDY #0; JSR VGCHAR;
;HERE......
;
24$:
	LDA TEMP5		;WHICH GAME?
	CMP #02
	BNE 22$			;IF NOT GAME 2, SKIP IT
	LDY #0
	STY SPFLG		;SET SPECIAL FLAG FOR 'INITA3'
	JSR INITA3		;1ST INITIAL
	JSR INITA3		;2ND INITIAL
	JSR INITA3		;3RD INITIAL
	LDA #0FF
	STA SPFLG		;RESTORE FLAG TO NORMAL
	LDY #0
	JSR VGCHAR		;ADD A SPACE
	DEC TEMP3+3
	DEC TEMP3+3		;CORRECT FOR OTHER SET OF INITIALS
	DEC TEMP3+3
;TRANFER SCORES TO A ZERO PAGE AREA
22$:	LDY TEMP3+2
	LDX I,-3		;USE ZERO PAGE WRAP AROUND
30$:	LDA AY,HSCORE
	STA X,XCOMP+3
	INY
	INX
	BMI 30$
	LDA I,XCOMP		;ADDRESS OF SCORE
	SEC
	LDY I,3
	JSR DIGITS		;DISPLAY SCORE
	LDA I,0
	JSR VGHEX		;ADD A ZERO TO SCORE
	LDY I,0
	JSR VGCHAR		;ADD A BLANK AFTER SCORE
	JSR INITA3		;FIRST INITIAL
	JSR INITA3		;SECOND INITIAL
	JSR INITA3		;THIRD INITIAL
	LDA TEMP3+1
	SEC
	SBC I,32./4
	STA TEMP3+1		;STARTING Y FOR NEXT LINE
	INC TEMP3+2
	INC TEMP3+2
	INC TEMP3+2
;INCREMENT DECIMAL POSITION
;NOT NEED AS MANY BYTES IF LESS THAN 10 SCORES
	LDA TEMP3
	CLC
	SED
	ADC I,1
	CLD
	STA TEMP3
	CMP I,6
	BCS 80$
	JMP 20$
80$:	BIT CABERET
	IFVS
	DEC TEMP6
	DEC TEMP6
	ELSE
	DEC TEMP6
	ENDIF
	BMI 81$
	JMP 13$
81$:	SEC
	RTS
110$:	.BYTE 12.,11.,12.,11.
;FIFTH VALUE FOR UPDATE CHECK FOR OUT OF TABLE
HSCBEG:	.BYTE 0,HSCNUM*3,2*HSCNUM*3,3*HSCNUM*3,4*HSCNUM*3
HSCEND:	.BYTE 0+HSCNUM*3-3,2*HSCNUM*3-3,3*HSCNUM*3-3,4*HSCNUM*3-3


	.SBTTL SEARCH - SEARCH FOR FREE ROCK ENTRY
;SEARCH - SEARCH FOR FREE ROCK ENTRY
;
;EXIT	(CC)=POSITIVE IF ENTRY EXISTS
;	(X)=FREE ENTRY INDEX IF POSSIBLE
;
SEARCH:	LDX I,NMROCK-1
SEARC1:	LDA X,OBJ
	BEQ 20$			;FOUND ONE
	DEX
	BPL SEARC1		;LOOP TIL EXHAUSTED
20$:	RTS
	
	
	.SBTTL SHPEXP-SHIP EXPLODING PICTURES
;SHPEXP-SHP EXPLODING PICTURES
;ASSUMES X SET TO A SHIP, RELATIVE TO OBJ
;
COORD	=TEMP1
OLDVEC	=TEMP2
P2IECES	=TEMP4
ACTPIECE=TEMP4+1
;IF THIS SHIP WAS HIT BY OTHE PLAYER
;THEN WILL FLASH IT INSTEAD OF EXPLODING

SHPEXP:	LDA GAME		;FIGHTERS????
	BEQ 2$
	CMP #1
	BEQ 5$			;THIS GAME ALWAYS PIECES
	BNE 1$			;NOT FIGHTERS
2$:	LDA X,WHOSHOT-ZSHIP
	BPL 5$			;KILLED BY ROCK ON OTHER NON SHIP
1$:	LDA X,EXPDEC-ZSHIP	;DO WE WANT ONLY PIECES??
	BPL 5$
	LDA FRAME		;GET FLASH RATE
	AND I,4
	BEQ 3$			;NOTHING SHOWN
	JSR SHPPIC
3$:	LDA GAME		;SPACE STATION??
	BNE 5$			;IF YES, SHO PIECE FLOATING AWAY
	RTS			;ELSE JUST FLASH!
5$:
	LDA I,1			;FULL SCALE
	JSR VGSCA1
	LDX TEMP3
;SET EXPLOSION COLOR
	LDA #PL0COL+0F0
	CPX #ZSHIP
	BEQ 6$
	LDA #PL1COL+0F0
6$:	LDX #64
	JSR VGADD2
	LDX TEMP3
	LDA X,OBJ
	CMP I,0A2
	BCS 20$			;IF NOT THE FIRST EXPLOSION
	JSR EXPSET		;INIT PIECES
20$:
;HERE WE WANT TO DISPLAY THE EXPLOSION PIECES.  PIECES OF HIGHER NUMBER
;DIE OUT AS THE OBJECT NUMBER APPROACHES ZERO FROM BELOW.
;
	LDX TEMP3		;STILL VALID FROM PICTUR
	LDA X,OBJ
	EOR I,0FF
	AND I,70
	LSR
	LSR
	LSR
	AND I,0FE		;MAKE EVEN
	STA P2IECES		;2*NUMBER OF PIECES-2 (0 TO A)
;SET UP INDIRECT POINTER COORD WHICH POINT TO START OF EXPLOSION
;PIECES FOR THIS SHIP
	LDA X,SHPCOR-ZSHIP
	STA COORD
	LAH SH0XPCOORD
	STA COORD+1
	LDA I,0
	STA ACTPIECE
25$:	LDA VGLIST
	STA OLDVEC
	LDA VGLIST+1
	STA OLDVEC+1
	LDX ACTPIECE
	LDY I,0
	LDA AX,EXPDIR		;Y DIRECTION
	LDX I,0
	ASL
	BCC 40$
	DEX			;SIGN EXTENSION
40$:	ROR 
	CLC
	ADC NY,COORD
	STA NY,COORD		;STORE BACK Y LOWER
	INY
	TXA
	ADC NY,COORD
	STA NY,COORD		;STORE BACK Y UPPER
	DEY
	STA NY,VGLIST		;STORE UPPER BYTE OF POSITION IN LOW BYTE OF VECTOR RAM
	INY
	TXA
	AND I,1F
	STA NY,VGLIST		;UPPER Y OF LONG VECTOR
	INY
	LDX ACTPIECE
	LDA AX,EXPDIR+1		;X DIRECTION
	LDX I,0
	ASL
	BCC 50$
	DEX			;SIGN EXTENSION
50$:	ROR 
	CLC
	ADC NY,COORD
	STA NY,COORD
	INY
	TXA
	ADC NY,COORD
	STA NY,COORD
	DEY
	STA NY,VGLIST
	INY
	TXA
	AND I,1F
	STA NY,VGLIST
	JSR VGADD
;ADD THE EXPLOSION PIECE TO VG
;WILL DRAW AND THEN RETURN TO INITIAL POINT
	LDA ACTPIECE
	ASL 			;A HOLDS 4*NUMBER OF PIECES
	TAX
	LDY I,-1
60$:	INY
	LDA X,XPLPIECE
	STA NY,VGLIST
	INX
	CPY I,3
	BCC 60$
	JSR VGADD
;RETURN TO SHIPS POSITION
	JSR VGNEG
	LDA COORD
	CLC
	ADC I,4
	STA COORD		;NEXT EXPLOSION PIECE
	LDA ACTPIECE
	CLC
	ADC I,2
	STA ACTPIECE
	CMP P2IECES
	BCC 25$
	RTS
	.SBTTL 	SET UP EXPLOSION PIECES
EXPSET:	LDY X,SHPCOR-ZSHIP
;NMXPLPIECES IS NUMBER OF EXPLOSION PIECES
;THE COORDINATES ARE (Y LSB, Y MSB, X LSB, X MSB)
;WE INITIALIZE BOTH HIGH X AND HIGH Y HERE
	LDX I,0
10$:	LDA X,EXPDIR		;INITIALIZE POSITIONS OF PIECES
	STA Y,SH0XPCOORD&0FF00			;LOWER BYTE
	INY
	LDA X,UEXPDIR
	STA Y,SH0XPCOORD&0FF00	;UPPER BYTE
	INY
	INX
	CPX I,NMXPLPIECES*2
	BCC 10$
	RTS
SHPCOR:	BADL SH0XPCOORD
	BADL SH1XPCOORD

	.SBTTL SHPPIC-DISPLAY SHIP PICTURE
;SHPPIC-DISPLAY SHIP PICTURE (X)=OBJ NUMBER
;
;ENTRY	(ANGLE)=SHIP ROTATION (0 TO FF)
;EXIT	(VGLIST,VGLIST+1)=UPDATED VECTOR LIST POINTER
;USES	A,X,Y,(TEMP1,TEMP1+1),(TEMP2,TEMP2+1),REFLECT,TEMP4+2
;PUT OUT THE SHIELDS
;
REFLECT=TEMP4+2
SHPPIC:
	LDY I,0			;PREPARE FOR VGLIST
	LDA X,TOGGLE-ZSHIP
	AND I,SHLDON
	BEQ 40$			;0 IS IN ACC ON BRANCH
	LDA X,SHLDENG-ZSHIP
	AND I,0F0
;ADD COLOR
	ORA #WHITE		;SIELSD IN WHITE
;ACCUMULATOR NOW HOLDS Z VALUE, LOWER 4 BITS 0
40$:
	STA NY,VGLIST		;INTENSITY REGISTER
	INY
	LDA I,64		;REST OF STAT INSTRUCTION
	STA NY,VGLIST
	INY
	LALJSR SHIELD
	LXHJSR SHIELD
	JSR VGAD2B
	LDX TEMP3
;***TEMP COLOR BEAM IN***
	LDA FRAME		;BRING IN PLAYER COLOR 1/4
	AND #04
	BNE 45$
	LDA X,ENTER-ZSHIP
	BEQ 45$
	EOR #0F0
	AND #0F0
	ORA #WHITE			;WHITE
	BNE 50$
45$:	LDA #PL0COL+0D0		;SKIP COLOR
	CPX #ZSHIP
	BEQ 50$
	LDA #PL1COL+0D0
50$:	LDX #64			;REST OF STAT
	JSR VGADD2
	LDX TEMP3
90$:
	LDA X,SANGLE-ZSHIP
	CLC			;REFLECT Y OFF
	BPL 10$			;IF IN SECTORS 0,1
	LDA I,0
	SEC
	SBC X,SANGLE-ZSHIP	;256.-ANGLE=NEW ANGLE
	SEC			;REFLECT Y OFF
;REFLECT Y ON
10$:	STA TEMPA		;0 TO 80
	ROR REFLECT		;REFLECT NOW (Y--------)
	CLC			;REFLECT X OFF
	BIT TEMPA
	BMI 15$			;IF ANGLE=80
	BVC 20$			;IF IN SECTORS 1 OR 4
15$:	LDA I,80
	SEC
	SBC TEMPA		;128.-ANGLE=NEW ANGLE
	SEC			;REFLECT ON
20$:	ROR REFLECT		;REFLECT NOW (XY-------)
	AND I,0FC		;ROTATION/2=PICTURE NUMBER*2
	LSR
	CLC			;MAX OF 32.
	ADC X,SHADOF-ZSHIP	;OFFSET INTO TABLE OF ADDRESSES FOR SHIPS
	TAY
	JSR SHPDISPLAY
	.SBTTL	DRAWROD ROUTINE
DRAWROD:
	BIT TOGCOMB
	BMI 10$			;RIGID PAIR
5$:	RTS			;(EXIT POINT)
;ONLY WISH TO PUT OUT ONE BAR
10$:	LDA RODSTATUS
	BMI 5$			;ALREADY DREW A ROD
12$:	LDA #RODCOL+0F0		;YELLOW ROD
	LDX #64
	JSR VGADD2
	LDX TEMP3
	LDA X,OBJ		;STATUS
	BMI 5$			;SKIP IF EXPLODING
	DEC RODSTATUS		;WILL HAVE DRAWN THE ROD
	LDA SPARKTIME
	BMI 20$			;NOBODY DIED YET
	JSR FUSECK		;CRACKLE
	DEC SPARKTIME
	BNE 20$			;NOT DEAD YET
;EXPLODE THEIR SHIP NEXT FRAME
;THE SHIP NOT SHOWN THIS FRAME
	JSR STFUS		;STOP FUSE
	LDA I,0A0
	STA X,OBJ
	JSR EXPLOS		;EXPLOSION SOUND
	LDA I,20
	STA X,SDELAY-ZSHIP
	STA X,EXPDEC-ZSHIP	;PIECES ONLY
	JMP COMAWAY		;(EXIT)
;DRAW THE ROD AT SCALE DETERMINE BY SPARKTIME
20$:	
;REMEMBER THAT OBJECT POSITIONS HAVE THREE FRACTIONAL BITS
	LDA OBJXL+ZPAIR
	SEC
	SBC X,OBJXL
	STA XCOMP
	LDA OBJXH+ZPAIR
	SBC X,OBJXH
;DRAW ROD CORRECTLY AT EDGES OF SCREEN
	CMP I,XRIGHT/2
	BMI 30$
	SBC I,XRIGHT		;CARRY WAS SET
30$:	CMP I,-XRIGHT/2
	BPL 40$
	ADC I,XRIGHT		;CARRY WAS CLEAR
40$:
;NEED TO DIVIDE ONCE SINCE SCALE IS AT LIMIT
;DURING SPARKLE
	LSR
	STA XCOMP+1
	ROR XCOMP
;SIMILIAR FOR Y COMPONENT
	LDA OBJYL+ZPAIR
	SEC
	SBC X,OBJYL
	STA XCOMP+2
	LDA OBJYH+ZPAIR
	SBC X,OBJYH
;DRAW ROD CORRECTLY AT EDGES OF SCREEN
	CMP I,YTOP/2
	BMI 50$
	SBC I,YTOP
50$:	CMP I,-YTOP/2
	BPL 60$
	ADC I,YTOP
60$:
	LSR
	STA XCOMP+3
	ROR XCOMP+2
	LDY I,0AF
	STY VGBRIT
	LDA SPARKTIME
	BPL 70$			;ROD SHRINKING
	LDX I,XCOMP
	JMP VGVCTR		;(EXIT)
70$:	ASL
	STA TEMP1		;PREPARE FOR MULTIPLY

	LDX I,2			;START WITH Y COMPONET
;THIS ANCILLARY SUBROUTINE IS TO SAVE CODE
;FOR DRAWROD
;IT ASSUMES THAT THE ENTERING PAIR HAS
;SIGNIFIGANCE ONLY IN RANGE (-0FF,0FF)
;AS THE ROD DOES SINCE IT USES LIMITED SIN TABLE
;IT FIRST DIVIDES BY TWO TO GET IT ALL
;IN ONE BYTE
;IT MULTITLIES THE ACC BY SPARKTIME
;THEN MULTIPLIES BY 4, (BECAUSE MULTIPLY DOES INTRINSLE DIVIDE BY TWO) PUTTING THE
;RESULT IN A ZERO PAGE LOCATION INDEXED BY X
;
;ENTRY X,ACC, TEMP1 (SPARKTIME,PREPARING FOR MULTIPLY)
;
;USES ALSO TEMP4+1
75$:	STX TEMP4+1
;MAY NOT NEED THIS DIVIDE
	LDA X,XCOMP
	LSR X,XCOMP+1
	ROR

	JSR MULTIPLY

;MULTIPLY BY 4
	LDA I,0
	LDX TEMP4+1
	STA X,XCOMP+1
	LDA TEMP2+1
	ASL
	BCC 77$
	DEC X,XCOMP+1
77$:	LDA TEMP2+1
	ASL
	ROL X,XCOMP+1
	STA X,XCOMP

	DEX
	DEX
	BPL 75$

	LDX I,XCOMP
	JSR VGVCTR
	.SBTTL SPARKLE
;DRAW GROUP OF RAY SPARKS FROM END OF ROD
;THE TIMERS OF EACH ARE KEYED ON THE FRAME
;(AT 0, IN GROUPS 0F LONG) THEY START WITH RANDOM DIRECTIN AND LENGTH
SPARKLE:	LDA #WHITE+0F0		;WHITE SPARKLES
	LDX #64
	JSR VGADD2
	LDA #01		;MAKE FUSE SPARKS LARGE
	JSR VGSCA1
	LALJSR SPARKB
	LXHJSR SPARKB			;ADD JSR TO SPARK PICTURE
	JMP VGADD2
	.PAGE
	.SBTTL MAKE SPARKS ROUTINE
SPARK2:	LDA STSTSW
	AND #ST.BIT		;IF IN SELF TEST, DONT RUN THIS
	BEQ 90$
	LDA FRAME
	LSR
	BCC 90$			;EVERY OTHER FRAME
	LDA #SPARKB&0FF
	STA VGLIST
	LDA #SPARKB/100
	STA VGLIST+1
5$:
	LDY #NMSPARK-1			;NUMBER OF SPARK SPOKES
	STY TEMP3+1
10$:	LDY TEMP3+1
	LDA FRAME
	LSR			;CORRECT FOR EVERY OTHER FRAME
	CLC
	ADC Y,110$		;GROUP OFFSET, SO SPARKLETS START AT DIFFERENT TIMES
	AND I,0F
	STA TEMP1
	BNE 50$
;FIND NEW VECTOR
	LDA POKEY1+POKRAN
	STA Y,SPARKANGLE

50$:	LDA Y,SPARKANGLE
	JSR SIN
	JSR MULTIPLY
	STA TEMP6		;X RESULT
	LDY TEMP3+1
	LDA Y,SPARKANGLE
	JSR COS
	JSR MULTIPLY
	STA TEMP5		;Y RESULT
;PREPARE TO WRITE VECTOR

	LDX TEMP6
	LDY I,020		;BRIGHTNESS
	JSR VGVTR
;REVERSE THE VECTOR
	LDA I,0
	SEC
	SBC TEMP6
	TAX
	LDA I,0
	SEC
	SBC TEMP5
	LDY I,020
	JSR VGVTR
	DEC TEMP3+1
	BPL 10$
90$:	RTS
110$:	.BYTE 0,8,16.,24.
	.PAGE
SHADOF:	.BYTE 00,34.		;SHIP ADDRESS OFFSETS FROM START OF SHIPS
;WHERE THE FIRST BYTE OF BLANK VECTOR AT END OF WHOLE SHIP IS
SHPD1TAB:.BYTE 5B,53
SHPD2TABLE:.BYTE 16,14		;COUNT OF WHOLE SHIP VECTORS
SHPD3TABLE:.BYTE 1A,18		;COUNT OF SHIP WITH THRUST VECTORS (2 BYTES EACH)
SHPD4TABLE:	.BYTE 7,6
	.SBTTL	TWOBYTE PICTURE METHOD
;(TEMP2,TEMP2+1) WILL TRACK THE INPUT PAIRS
;WHILE (VGLIST,VGLIST+1) TRACKS THE OUTPUT QUADRUPLES
;TEMP1 COUNTS THE NUMBER OF INPUT PAIRS TO GO
;TEMPB SHOWS WHERE SOME VECTORS MAY NEED TO
;BE BLANKED (IE THE TWO INPUT WHOLE SHIP
;AND SHIP WITH THRUST
;ALSO USES X,Y
;REQUIRES REFLECT
SHPLUM=020
SHPDISPLAYS:
	STX TEMP3				;SAVE X
	LDA Y,SHIPS
	STA TEMP2
	LDA Y,SHIPS+1
	STA TEMP2+1
	LDY X,SHPD2TABLE-ZSHIP	;SET UP FOR COLOR THRUST
	STY TEMPA
	LDY X,SHPD1TABLE-ZSHIP
	STY TEMPB
;WHOLE SHIP, MAY HAVE THRUST
20$:	LDY X,SHPD2TABLE-ZSHIP
	STY TEMPA		;SAVE FOR COLOR THRUST LATER
40$:	BIT ATRACT
	BPL SHPDI3		;NO PICTURE OF THRUST DURING ATTRACT
 	LDA X,THRUST-ZSHIP
	BPL SHPDI3			; THATS ALL, NO THRUST PICTUR
	LDA X,OBJ
	BMI SHPDI3			;NO THRUST IN SUSPENDED ANIMATION
	LDA FRAME
	AND I,4
	BEQ SHPDI3
;SEE IF WAS DRONE
	CPX I,ZSHIP+1
	BNE 50$			;MUST BE REGULAR SHIP
	BIT TOGDRONE
	BMI SHPDI3			;WAS DRONE
50$:	LDY X,SHPD3TABLE-ZSHIP
;FALL
SHPDI3:	STY TEMP1
	LDY I,-1
;THE CODE IS DIVIDED TO SAVE
;OVERHEAD TIME
	BIT REFLECT
	BMI 5$			;X REFLECT ON
	JMP SHPDI5		;NO X REFLECT
5$:	BVS SHPDI4		;Y REFLECT ON
;X REFLECT ONLY
10$:	INY
	LDX #0
	LDA NX,TEMP2
	STA NY,VGLIST
	ASL		;SIGN INTO CARRY
	LDA I,1F		;NEGATIVE UPPER BYTE
	BCS 30$
	LDA I,0
30$:	INY
	STA NY,VGLIST
	INY
	INC TEMP2
	LDA I,0
	SEC
	SBC NX,TEMP2
	STA NY,VGLIST
	ASL			;SIGN INTO CARRY
	LDA I,1F+SHPLUM
	BCS 70$
	LDA I,0+SHPLUM
70$:	INY
	STA NY,VGLIST
	INC TEMP2
	JSR CLRTHR		;COLOR THRUST CHECK
	DEC TEMP1
	BPL 10$
	BMI SHPDI8		;******ALWAYS**********

;BOTH REFLECTS, 88 CYCLE MAX

SHPDI4:
10$:	INY
	LDA I,0
	TAX
	SEC
	SBC NX,TEMP2
	STA NY,VGLIST
	ASL		;SIGN INTO CARRY
	LDA I,1F
	BCS 30$
	LDA I,0
30$:	INY
	STA NY,VGLIST
	INY
	INC TEMP2
	LDA I,0
	SEC
	SBC NX,TEMP2
	STA NY,VGLIST
	ASL			;SIGN INTO CARRY
	LDA I,1F+SHPLUM
	BCS 70$
	LDA I,0+SHPLUM
70$:	INY
	STA NY,VGLIST
	INC TEMP2
	JSR CLRTHR		;COLOR THRUST CHECK
	DEC TEMP1
	BPL 10$

;THIS IS A CODICIL TO ALL FOUR REFLECT POSSIBILITIES
;IF NUMBER OF VECTORS IS SMALL,
;THEN IS PARTIALLY DAMAGED
;OTHERWISE BLANK OUT THE BLANK
;VECTORS AT END OF WHOLE SHIP

SHPDI8:
;IF PARTIAL DAMAGE, Y IS NOT LARGE
	CPY I,30.
	BCC 60$
;BLAND OUT LAST VECTOR
	LDA NY,VGLIST
	AND I,1F
	STA NY,VGLIST
	STY TEMP2
;IF Y IS FAIRLY LARGE THEN THRUST WAS ON
;BLANK OUT EARLIER VECTORS.
	LDY TEMPB
	LDA NY,VGLIST
	AND I,1F
	STA NY,VGLIST
	INY
	INY
	INY
	INY
	LDA NY,VGLIST
	AND I,1F
	STA NY,VGLIST
;BLANK OUT THE FIRST VECTOR
60$:	LDY I,3
	LDA NY,VGLIST
	AND I,1F
	STA NY,VGLIST
	LDY TEMP2
	JMP VGADD		;EXIT
SHPDI5:	BVC SHPDI7

;Y REFLECT ONLY
10$:	INY
	LDA I,0
	TAX
	SEC
	SBC NX,TEMP2
	STA NY,VGLIST
	ASL			;SIGN INTO CARRY
	LDA I,1F
	BCS 30$
	LDA I,0
30$:	INY
	STA NY,VGLIST
	INC TEMP2
	INY
	LDA NX,TEMP2
	STA NY,VGLIST
	ASL			;SING INTO CARRY
	LDA I,1F+SHPLUM
	BCS 70$
	LDA I,0+SHPLUM
70$:	INY
	STA NY,VGLIST
	INC TEMP2
	JSR CLRTHR		;COLOR THRUST CHECK
	DEC TEMP1
	BPL 10$
	JMP SHPDI8

;NO REFLECTS, 76 CYCLE MAX
SHPDI7:
10$:	INY
	LDX #0
	LDA NX,TEMP2
	STA NY,VGLIST
	ASL			;SIGN INTO CARRY
	LDA I,1F
	BCS 30$
	LDA I,0
30$:	INY
	STA NY,VGLIST
	INC TEMP2
	INY
	LDA NX,TEMP2
	STA NY,VGLIST
	ASL			;SIGN INTO CARRY
	LDA I,1F+SHPLUM
	BCS 70$
60$:	LDA I,0+SHPLUM
70$:	INY
	STA NY,VGLIST
	INC TEMP2
	JSR CLRTHR		;COLOR THRUST CHECK
	DEC TEMP1
	BPL 10$
	JMP SHPDI8
;
;COLOR THRUST CHECK -----
;ENTRY FROM 1 OF 4 ROUTINES ABOVE FOR 
;DRAWING SHIP IN 1 OF 4 QUADRANTS
;(TEMPA) = NUMBER OF VECTORS IN WHOLE SHIP
;(TEMP1) = NUMBER OF VECTORS TO DRAW
;
;THIS ROUTINE WILL ADD A STAT INSTRUCTION
;TO THE VGLIST IF FOUND TO BE DRAWING MORE
;VECTORS THAN A WHOLE SHIP NEEDS (IE:THRUST)
;
;
;THIS ROUTINE ALSO DOES BLANKING FOR DAMMAGE SHIP
;
CLRTHR:
	LDX TEMP3
	DEC TEMPA		;ANOTHER VECTOR
	LDA TEMPA
	CMP X,SHPD4TABLE-ZSHIP		;DAMAGE COUNT
	BNE 10$			;NOT DAMAGE CHECK SPOT
	LDA X,PRTDAMAGE-ZSHIP		;DAMMAGED??
	BPL 10$			;NOPE
	LDA #0			;YES...SO ADD BLACK STAT INSTRU.
	BEQ 15$			;********ALWAYS**********
10$:	LDA TEMPA
	CMP #-2			;TIME FOR WHITE THRUST??
	BNE 75$
	LDA #WHITE+0F0		;WHITE THRUST
15$:	INY
	STA NY,VGLIST
	INY
	LDA #64			;REST OF STAT
	STA NY,VGLIST
75$:
SPLIEX:	RTS			;ALSO USED FROM BELOW




	.PAGE
	.SBTTL SPLIT - SPLIT ROCK INTO FRAGMENTS
;SPLIT - SPLIT ROCK INTO FRAGMENTS
;
;ENTRY	(Y)=INDEX OF OBJECT BEING SPLIT
;
;USES TEMP1
;
SPLIT:	LDY TEMP3+1
	CPY I,ZSHIP
	BCS SPLIEX
	CPY I,ZSAUCER
	BCC 3$
	TYA
	TAX
	JMP KILXSCR		;(EXIT)
3$:	CPY I,ZKLMINES
	BCS SPLIEX		;NO ACTION
	CPY I,ZCOMETS
	BCC 5$			;WAS A ROCK
	.SBTTL KILYCOMET-KILL Y COMET
	JSR UPDIF
	LDY TEMP3+1
;KILL Y COMET
	LDA I,20
	JSR POINTS
	JMP 92$			;EXPLOSION SOUND (EXIT)
5$:	STY TEMP1
	LDX OWNER
	BMI 7$			;NOT DUE TO A SHIP
	LDA #16.		;2 SECONDS PER ROCK
	JSR LONGTIMER
	LDA X,RTIMER
	CLC
	ADC I,10		;INCREASE ROCK TIMER
	CMP X,MXRTIMER
	BCC 6$			;BUT LESS THAN A DECREASNG CEILING
	LDA X,MXRTIMER
6$:	STA X,RTIMER
7$:	LDA Y,OBJ
	TAX			;SAVE A
	AND #38			;SAVE PIC CODE
	STA TEMP9
	TXA			;RECALL A
	AND #07			;OLD SIZE
	LSR			;NEW SIZE
	TAX			;SAVE FOR SCORE INDEX
	ORA TEMP9		;RESTORE PIC
10$:	STA Y,OBJ		;NEW SOLD PICTURE OR ELSE EMPTY SIZE
;SHOULD BE NO WAY TO GET POINTS
;IN ATTRACT
	LDA X,110$
	JSR POINTS		;ADD POINTS AND CHECK FOR 10K
	LDY TEMP1
20$:	LDA Y,OBJ
	AND #07			;ONLY WANT SIZE HERE
	BEQ 90$			;ROCK DISAPEARRED
	BIT ATSTG		;SPECIAL ATTRACT?
	BPL 21$
	LSR			;LITTLE ONE?
	BEQ 90$			;SKIP IT!
	JSR SEARCH
	BMI 90$			;NO ROOM
	JSR CPYPOS		;COPY IT THERE
	LDA #0A0
	STA X,OBJ		;AND EXPLODE IT
	INC NROCKS		;ANOTHER "ROCK"
	TYA
	TAX			;WANT TO ADD VELOCITY TO OLD ROCK
	LDY #0			;BASE ON STILL ROCK
	JMP NEWVEL
21$:	JSR SEARCH		;SEARCH FOR NEW ENTRY
	BMI 93$			;NO MORE ENTRIES
	INC NROCKS
	JSR CPYPOS		;COPY POSITION FOR NEW ENTRY
	LDA X,XINC
	AND I,1F
	ASL
	EOR X,OBJXL
	STA X,OBJXL		;PREVENT OVERLAPING ROCKS
	JSR SEARC1		;LOOK FOR NEW ENTRY
	BMI 90$			;NO MORE ROOM
	INC NROCKS
	JSR CPYPOS		;COPY POSITION & PICTURE + VELOCITY
	LDA X,YINC
	AND I,1F
	ASL
	EOR X,OBJYL
	STA X,OBJYL
90$:
92$:
	LDA I,0A0
	STA Y,OBJ		;EXPLODE OLD ROCK
	JMP EXPLOS		;EXPLOSION SOUND
93$:	LDA #0A0
	STA Y,OBJ
	JMP POPSN

110$:	.BYTE 10,5,2		;SCORES FOR HITTING SMALL, MEDIUM & LARGE ROCKS
UPDATE:
	.SBTTL UPDATE-UPDATE HIGH SCORE TABLE
;UPDATE ONE OF THE 4 HIGH SCORE AND INITIAL TABLES
;DEPENDING ON THE GAME
;
;ENTRY	(GAME)
;
;USES	TEMP4=0 FOR RIGHT PLAYER, 1 FOR LEFT
;UPDATE DIFFERENT AREA OF HSCORE + INTIALS
;DEPENDING ON GAME
	LDA I,-1
	STA FRAME+1		;PUT UP HIGH SCORE TABLE NEXT
	STA UPDFLG
	STA UPDFLG+1		;CLEAR FLAGS
	STA SPFLG		;GUESS NO SPECIAL
	LDX GAME
	BNE 30$
;FOR GAME 0
15$:	LDA I,1
	STA TEMP4
	LDX I,3		;LEFT PLAYERS SCORE
	JSR UPDA20
20$:	LDX I,0			;RIGHT SCORE
	STX TEMP4
	JMP UPDA20
30$:	DEX
	BEQ 20$			;GAME 1
	DEX
	BNE 35$
	LDA #0
	STA SPFLG		;THIS IS SPECIAL CASE
35$:	LDX I,0
40$:	STX TEMP4
	LDX I,CMBSCORE-SCORE
;	JMP UPDA20
UPDA20:
	LDY GAME
	LDA Y,HSCBEG+1
	STA TEMP5		;THE END OF HIGH SCORES+1 FOR THIS GME
	LDA Y,HSCBEG
	TAY
;Y=BEGINNING OF SECTION OF HIGH SCORES
;X IS TO HOLD THE BEGINNING OF THE RELEVANT CURRENT SCORE
;THE RELEVANT SCORE
	
	.SBTTL UPDATE-UPDA30 HIGH SCORE TABLE
;UPDATE-UPDATE HIGH SCORE TABLE
;
UPDA30:
18$:
20$:	LDA Y,HSCORE
	CMP X,SCORE		;SETS CARRY
	LDA Y,HSCORE+1
	SBC X,SCORE+1
	LDA Y,HSCORE+2
	SBC X,SCORE+2
	BCC 30$			;NEW HIGH SCORE
25$:	INY
	INY
	INY			;NEXT ENTRY IN HIGH SCORE TABLE
	CPY TEMP5
	BCC 20$			;LOOP TILL PAST END OF THIS TABLE
	RTS			;(EXIT)
	
30$:	STX TEMP2		;SAVE CURRENT SCORE INDEX
	STY TEMP2+1		;SAVE WHICH HIGH SCORE ENTRY WE ARE ON
	LDX TEMP4
	TYA
	STA X,UPDFLG		;FLAG TO GET PLAYERS INITIALS
	STA X,FLSFLG		;SET LAST ENTERED
	BIT SPFLG		;SPECIAL INITIALS?
	BMI 35$
	STA UPDFLG+1		;WE WILL DO BOTH
;IF USE GAME LENGTH FOR SCORES & INITIALS
;CAN USE ONLY X OR ONLY Y HERE
35$:	LDY GAME
	LDX Y,HSCEND
	TXA
	TAY
40$:	CPX TEMP2+1
	BEQ 45$			;IF END OF COPY
	LDA X,INITL-3		;COPY INITIALS DOWN
	STA X,INITL
	LDA X,INITL-2
	STA X,INITL+1
	LDA X,INITL-1
	STA X,INITL+2
	LDA Y,HSCORE-3			;COPY HIGH SCORES
	STA Y,HSCORE
	LDA Y,HSCORE-2
	STA Y,HSCORE+1
	LDA Y,HSCORE-1
	STA Y,HSCORE+2
	BIT SPFLG			;SPECIAL CASE?
	BMI 44$			;NOPE
	LDA X,SPINT-3-1E		;MOVE INITIALS DOWN
	STA X,SPINT-1E
	LDA X,SPINT-2-1E
	STA X,SPINT+1-1E
	LDA X,SPINT-1-1E
	STA X,SPINT+2-1E
44$:	DEY
	DEY
	DEY
	DEX
	DEX
	DEX
	BNE 40$			;LOOP UNTIL X=0 OR DONE
45$:	LDA I,11.
	STA X,INITL		;START LETTERS AT A
	LDA I,0			;CLEARS SECOND AND THIRD INITIALS
	STA X,INITL+1
	STA X,INITL+2
	BIT SPFLG		;DOING SPECIAL?
	BMI 46$			;NOPE
	STA X,SPINT+1-1E
	STA X,SPINT+2-1E
	LDA #11.
	STA X,SPINT-1E		;INIT INITIALS
46$:	LDA I,0ED		;1 MINUTE AT 60HZ
	STA FRAME+1		;PREPARE TO TIMEOUT GETTING INITIALS
	LDX TEMP2		;X POINTS TO START OF CURRENT SCORE
	LDY TEMP2+1		;MOVE HIGH SCORE IN
	LDA X,SCORE+2
	STA Y,HSCORE+2
	LDA X,SCORE+1
	STA Y,HSCORE+1
	LDA X,SCORE
	STA Y,HSCORE
28$:	LDX TEMP4
	BNE 29$
	BIT SPFLG		;SPECIAL CASE?
	BPL 29$			;YEP!
	LDA UPDFLG+1
	BMI 29$			;NO PLAYER 2 HIGH SCORE
	CMP UPDFLG
	BCC 29$			;IF PLAYER 2 SCORE IS BETTER THAN PLAYER 1
	ADC I,02		;ADD 3 (ADJUST HIS PLACE IN THE TABLE OF INITIALS)
	CMP TEMP5
	BCC 27$			;IF NOT OUT OF TABLE NOW
	LDA I,-1		;PLAYER 2 DID NOT REALLY MAKE THE TABLE
27$:	STA UPDFLG+1
	STA FLSFLG+1		;FORGET IT
29$:	LDA I,0
	STA UPDINT		;STARTING WITH FIRST INITIAL
	STA UPDINT+1
	LDA #-1
	STA HSCFLG		;ALLOW SOUND ROUTINE TO MAKE NOISE
	STA SPECEX
	JMP BIGBANG		;REMOVE ALL OBJECTS
INEXIT:	RTS
	
	.SBTTL INKLMINE-INITIATE KILLER MINE
;EXTRY	(X) RELATIVE TO OBKLMINES
;INITIATES SPEED AND ANGLE CHANGE MAXIMUM
;EXIT X
	
INKLMINE:	BIT ATRACT
	BPL INEXIT		;NOT IN ATRACT
;SEARCH FOR NEXT UNUSED KILLER MINE
;RETURNS X RELATIVE TO OBKLMINE 
	LDX I,NMKLMINES-1
20$:	LDA X,OBKLMINE
	BEQ 25$
	DEX
	BPL 20$
	BMI 90$		;NONE LEFT
25$:
;FIND TARGET
	LDY I,ZSHIP		;DEFAULT FOR ALONE GAME
	LDA GAME
	CMP I,ALONEGAME
	BEQ 29$
	TXA
	LSR
	BCS 29$
	INY		;EVEN MINES TARGETED ON ZSHIP+1
29$:	TYA
	STA X,KTARGET
	STX TEMP10		;SAVE X
	LDA DIFF
	EOR #0FF
	AND #03			;WILL USE AS OFFSET INTO TABLE
	CLC
	ADC TEMP10		;ADD MINE OFFSET
	TAY			;Y AS AN INDEX
	LDA #1			;START COLOR (BLUE)
	STA X,KLMINC
	LDA POKRAN+POKEY1	;GIVE RANDOM START POINT
	STA X,OBJXH+ZKLMINES
	LDA POKRAN+POKEY2
	STA X,OBJYH+ZKLMINES
	LDA #0			;NOW PUT ON ONE EDGE
	BIT FRAME
	BPL 31$
	STA X,OBJXH+ZKLMINES
	BEQ 32$			;*******ALWAYS*********
31$:	STA X,OBJYH+ZKLMINES
32$:
;MAKE SLOWER IN BOUND RIGID PAIR GAME
	BIT TOGCOMB		;COMBINED LIVES??
	BPL 30$			;NOPE
	LDA Y,INKSPRIGTABLE	;YES -- GAMES 2 & 3 HERE
	STA X,OBKLMINE
	LDA Y,INKCHRIGTABLE
	JMP 35$
30$:
	LDA GAME
	BEQ 50$
	LDA Y,INKSPTABLE	;GAME 1 ONLY HERE
	STA X,OBKLMINES
	LDA Y,INKCHTABLE
35$:	STA X,KANGCH
40$:	LDA I,0
	STA X,KSPEED
	LDA GAME
	BEQ 90$			;NO ADJUSTMENT FOR TWO PLAYER FIGHTERS
;INCREASE SPEED ALLOWED COND BY TO WAVE
	LDA WAVE
	ASL
	BMI 90$			;NOT GO NEGATIVE
	ADC X,OBKLMINES
	BMI 90$
	STA X,OBKLMINES
90$:	RTS			;(EXIT)
50$:	LDA Y,INKSPCOMPETITIVE
	STA X,OBKLMINES
	LDA Y,INKCHCOMPETITIVE
	JMP 35$
	.SBTTL	ADD TO DIFFUCILTY TIMER
;
;	A= AMOUNT TO ADD, ROUTINE LIMITS TO 3
;
LONGTIMER:
	CLC
	ADC LNGTIMER		;UP TIMER
	STA LNGTIMER
	LDA LNGTIMER+1
	ADC #0			;PROP CARRY
	CMP #04
	BCS 10$
	STA LNGTIMER+1
	RTS
10$:	LDA #0FF		;SET TO MAX
	STA LNGTIMER
	RTS
	
	.PAGE
	.SBTTL MATH AND UTILITIES
	.SBTTL	ARCTANGENT
;ATAN-ARCTANGENT
;
;ENTRY	(X)=X PART OF ARCTAN (Y/X) (SIGNED NUMBER)
;	(Y)=Y PART (SIGNED NUMBER)
;EXIT	(A)=ARCTAN RESULT (0 TO FF, 40=RIGHT ANGLE
;USES	A,X,Y,(TEMP2,TEMP2+1)
ATAN:	TYA
	BPL ATAN1		;IF Y>-0
	JSR COMP		;+Y=-Y
	JSR ATAN1		;ATAN (-Y/X)
	JMP COMP		;ARCTAN(Y/X)=-ARCTAN(-Y/X)
		
ATAN1:	TAY			;DIVISOR
	TXA
	BPL ATAN2		;IF X=-0
	JSR COMP		;X=-X
	JSR ATAN2		;ATAN(Y/-X)
	EOR I,80		;ARCTAN(Y/X)=80-ARTCAN(Y/-X)
	JMP COMP
	
	
ATAN2:	STA TEMP2+1		;DIVISOR (X)
	TYA			;DIVIDEND (Y)
	CMP TEMP2+1
	BEQ 10$			;IF Y=X
	BCC ATAN3		;IF Y<X USE ARCTAN ON 45 DEGREE SECTOR
	LDY TEMP2+1
	STA TEMP2+1
	TYA
	JSR ATAN3		;ARCTAN (X/Y)
	SEC
	SBC I,40
	JMP COMP		;ARCTAN (Y/X)=40-ARCTAN(X/Y)
		
10$:	LDA I,20		;45 DEGRESS
	RTS
	
ATAN3:	JSR DIVIDE		;4 BIT DIVIDE
	AND I,0F
	TAX
	LDA X,ATANA		;TABLE LOOKUP
	RTS
	
ATANA:	.BYTE 0,2,5,7		;0-3
	.BYTE 10.,12.,15.,17.	;4-7
	.BYTE 19.,21.,23.,25.	;8-B
	.BYTE 26.,28.,29.,31.	;C-F
	
	.SBTTL	DIVIDE, FULL 8 BIT RESULT	
;DIVIDE-FULL 8 BIT RESULT
;
;ENTRY (A)=DIVIDEND=TOP (UNSIGNED)
;	(TEMP2+1)=DIVISOR=BOTTOM (UNSIGNED)

;FULDIV:	LDY I,8
;		BNE DIVI20		;ALWAYS
;DIVIDE-4 BIT RESULT DIVIDE
;
;ENTRY (A)=DIVIDEND (UNSIGNED) (LARGER THAN DIVIDEND)
;      (TEMP2+1)=DIVISOR (UNSIGNED)
;EXIT	(A)=QUOTUNT (4 BITS)
;USES TEMP2,X,Y
DIVIDE:
	LDY I,4			;4 BITS OF RESOLUTION
DIVI20:
10$:	ROL TEMP2		;SHIFT IN BIT OF ANSWER
	ROL
	CMP TEMP2+1
	BCC 20$			;NOT LARGE ENOUGH
	SBC TEMP2+1		;LEAVES CARRY SET
20$:	DEY
	BNE 10$
	LDA TEMP2
	ROL			;SHIFT IN LAST BIT
	RTS
	.SBTTL	COSINE
;COS-COSINE
;ENTRY	=ANGLE (0 TO FF)
;EXIT	(A)=COSINE(-127,127)
COS:	CLC			;COS(A)=SIN(A+PI/2)
	ADC I,40
;	JMP SIN
	
	.SBTTL	SINE	
;SIN-SINE
;
;ENTRY	(A)=ANGLE (0 TO FF REPRESENTS 0 TO 360 DEGREES)
;	(CC)=MINUS/PLUS FLAG SET CORRECTLY!!!
;EXIT	(A)=SINE (-127 TO +127)
;USES	A,X
SIN:	BPL SIN1		;IF PI > ANGLE >-0
	AND I,7F
	JSR SIN1		;SIN(A) WHEN PI > A >= 0
	JMP COMP		;SIN(PI+A)=-SIN(A)

SIN1:	CMP I,41
	BCC 10$			;PI/2 >- ANGLE >- 0
	EOR I,7F		;SIN(PI/2+A)=SIN(PI/2-A)
	ADC I,0			;ADD 1
10$:	TAX
	LDA AX,SINCOS
	RTS
	
	.SBTTL 	ABS,COMP - ABSOLUTE VALUE & COMPLEMENT

;ENTRY (A)=INPUT
;EXIT  (A)=ABSOLUTE VALUE

ABS:
	BPL COMP1
COMP:	EOR I,0FF	
	CLC
	ADC I,1
COMP1:	RTS
	.SBTTL 	SSMULT - SIGNED BY SIGNED MULT
;PARAMETERS THE SAME AS MULT EXCEPT BOTH ARE SIGNED
;ENTRY (A)=SIGNED BYTE
;   (TEMP1)=SIGNED BYTE

;EXIT (TEMP2,TEMP2+1)=RESULT (LSB,MSB)
;USES ALSO (TEMP4),X,Y

;RETURNS HIGH BYTE OF RESULT IN ACC
;BUT STATUS MAY BE WRONG
;IDEA IS IF TEMP1 IS NEGATIVE,
;CHANGE SIGN OF BOTH INPUTS.
;THE SPECIAL CASE IS WHEN AN INPUT WAS -80
;SINCE IT NEGATES TO ITSSELF WE CHANGE IT TO +7F
;BUT MAYBE WE DONT NEED TO CHECK.
;DECIDE LATER, SINCE IT MAY BE
;NECESSARY TO CHECK IF DO ASL LATER
;SO THAT ASL OF 40 NOT GO NEGATIVE
SSMULT:

	BIT TEMP1
	BPL MULT10
	PHA			;STACK ACC
	LDA TEMP1
	JSR COMP
;CHECK FOR SPECIAL CASE OF TEMP1=80
	BPL 10$
	LDA I,7F
10$:	STA TEMP1
	PLA			;RECALL ACC
	JSR COMP
;80 WILL CONVERT TO 80 BOTH NEGATIVE, 
;MAKE SPECIAL CASE
	CMP I,80
	BNE MULT10
	LDA I,7F
;FALL INTO MULTIPLY
	.SBTTL	FMULTIPLY-FAST MULTIPY

;METHOD DESIGNED FOR UNSIGNED.
;NEED TO CONDITIONALLY FIX THE RESULT
;FOR SIGNED OPERATIONS.
;USES NIBBLE METHOD
;FROM 4 SUMS
;(A4*B4*100)+(AH*BL+BL*AH)*10 +(AL*BL)
;INPUT (A)=SIGNED
;	(TEMP1)=UNSIGNED (PRESERVED)
;USES X,Y,TEMP4
;OUTPUT (TEMP2,TEMP2+1)
;HIGH BYTE ALSO IN ACC
;SAVE STATUS OF ORIGINAL
MULTIPLY:
MULT10:	TAX			;RESET STATUS
	PHP
;FORM AH*BH*100
	STA TEMP4
	LSR
	LSR
	LSR
	LSR
	EOR TEMP1
	AND I,0F
	EOR TEMP1
	TAX
	LDA AX,MULTBL
	STA TEMP2+1
;FORM AL*BL
	LDA TEMP4
	ASL
	ASL
	ASL
	ASL
	EOR TEMP1
	AND I,0F0
	EOR TEMP1
	TAX
	LDA AX,MULTBL
	STA TEMP2
;
;FORM AL*B4 INDEX AND SAVE INY
	LDA TEMP4
	EOR TEMP1
	AND I,0F
	EOR TEMP1
	TAY
;FORM AH*BL, SAVE IN X
	LDA TEMP4
	EOR TEMP1
	AND I,0F0
	EOR TEMP1
	TAX
	LDA AX,MULTBL
	CLC
	ADC AY,MULTBL
	TAX
	ROR
	LSR
	LSR
	LSR
	STA TEMP4
	TXA
	ASL
	ASL
	ASL
	ASL
	CLC
	ADC TEMP2
	STA TEMP2
	LDA TEMP2+1
	ADC TEMP4
	PLP
	BPL 90$			;OKAY AS IT WAS
;IF ORIGINAL SIGNED VALUE WAS NEGATIVE,
;SUBTRACT THE UNSIGNED VALUE
;FROM HIGH BYTE OF RESULT
	SEC
	SBC TEMP1
90$:	STA TEMP2+1
	RTS
	.PAGE
	.SBTTL POWERON ENTRY POINT
PWRON:	LDA I,0
	LDX I,0FE
	TXS
	CLD
	JSR INITVG
;INITIALIZE SCORE AREA
	JSR INSET2
	LDA I,80+3F
	LDX I,2
30$:	STA X,PL0SCFLAG
	DEX
	BPL 30$
	JSR INISOU
	LDA #01
	STA LASTG		;IN CASE CABERET
	LDA #0FF
	STA UPDFLG
	STA UPDFLG+1		;NO NEW HIGH SCORE
	STA SPFLG
	LDA #80			;INIT TO NO STARTS ALLOWED
	STA STRTLOK
	CLI			;ALLOW INTERRUPTS
	JSR PARAMS		;PUT UP SCORES AT FIRST
	JMP START1
		
	.SBTTL FRCAL-FRAME CALCULATIONS
;USES TEMP1,TEMP1+1,(TEMP2,TEMP2+1)
;TEMP3
;
FRCALC:	INC FRAME
	LDA FRAME
	ASL
	ASL			;PULSE INTENSITY
	ASL
	ASL
	ORA #80			;MIN BRIGHTNESS
	STA INTEN		;SAVE INTENSITY
;COIN OUT PUT TO LATCH
	LDA $LOCKCOIL		;LOCKOUT STATUS FROM MAIN LINE
	LDX CABINET		;COCKTAIL?????
	BMI 4$			;YEP...NO ADITIONAL FLIP NEEDED
	ORA #XINVERT!YINVERT	;ELSE FLIP FOR COCKTAIL NORMAL
;GUESS COIN COUNTER OFF, LOCKOUT IN, AND INVERTS SET
4$:	LDX $USE		;GAME PLAYING? (COIN ROUTINE OFF)
	BMI 3$			;IF YES,SKIP COUNTER STUFF
	LDX $CCTIM+2		;1ST COUNTER?
	BPL 1$			;NOPE
	ORA #01			;TURN IT ON
1$:	LDX $CCTIM+1		;NEXT
	BPL 3$
	ORA #02			;ITS ON
3$:
;IF GAME GOING ONE SECOND
;STOP COIN ROUTINE
	LDX ATRACT
	BPL 5$
	LDX FRAME+1		;WAIT SHORT TIME BEFORE STOPPING COIN ROUTINE
	BEQ 5$
	LDX GENDING
	BNE 5$
	LDX I,80
	STX $USE		;NO MORE COIN ROUTINE
;COUNT DOWN ROCK TIMERS AND SAUCER ENTRY TIMER
;AND ENEMY DELAY TIMERS
5$:	STA $COINCOUNTER
;************************************************************************
;NOW ENTER FRAME CALC DEPENDING ON FRAME.
;WILL ENTER AT HIGHEST POINT AND FALL THROUGH TO ALL LOWER
;(IE: IF FRAME&0F=0 THEN OBVIOUSLY FRAME&07=0
	LDA FRAME
	BEQ FRMFF		;FRAME IS 0, DO ALL
	AND #7F
	BNE 10$
	JMP FRM7F		;FRAME &7F=0
10$:	;NO 3F OR 1F
	AND #0F
	BNE 20$
	JMP FRM0F		;FRAME &0F=0
20$:	AND #07	
	BNE 30$	
	JMP FRM07		;FRAME & 07 =0
30$:	JMP MESSUP		;NONE THIS TIME
;************************************************************************
FRMFF:	;FRAME=0 (FRAME&OFF)
;************************************************************************
	BIT ATRACT
	BMI 6$			;NOT ATTRACT, ALWAYS UP FRAME NUMBER
	LDA UPDFLG
	AND UPDFLG+1		;INITIALS?
	BPL 6$
	LDA FRAME+1		;LOADED ABOVE SO CAN TEST OLD VALUE
	AND #HSBIT			;INITIALS?
	BNE 2$			;YES..DOING INITIALS (OR TABLE)
	LDA FRAME+1
	AND #03			;LOOKING FOR 3 IN BOTTOM BITS
	CMP #03
	BEQ 7$			;HOLD TILL WAVE OVER
2$:	LDA THRUST		;NOT SPECIAL, DO NORMAL
	ORA THRUST+1		;ONLY WANT BIT 7 HERE
	AND #80
	LDX #03
5$:	ORA X,FIRESW		;ANY BUTTON WILL HOLD INITIAL DISPLAY
	DEX
	BPL 5$
	AND #0C0
	BNE 7$			;PUSHED....SKIP UPDATE
6$:	INC FRAME+1		;TIS OK TO STEP UP FRAME
7$:	LDX I,1
12$:	LDA X,MXRTIMER
	BEQ 15$
	DEC X,MXRTIMER
15$:	DEX
	BPL 12$
30$:
;INCREASE KILLER MINES SPEED AND ANGLE CHANGE
	LDA FRAME+1
	AND I,3
	BNE 80$
	LDX I,NMKLMINES-1
35$:	LDA X,KLMINC		;DROP COLOR OF KILLER MINES
	CMP #01
	BEQ 36$
	DEC X,KLMINC
36$:	LDA X,KSPEED
	BEQ 45$			;NOT ACTIVE
	CMP X,KSPEND		;CHECK FOR TOP SPEED
	BCS 40$
	ADC I,2
	STA X,KSPEED
40$:	LDA X,KANGCH
	CMP X,KCHEND
	BCS 45$
	ADC I,1
	STA X,KANGCH
45$:	DEX
	BPL 35$
	JSR MDIF20
80$:
;CAUSE EXISTING COMETS TO
;CHANGE ANGLES FASTER
	LDX I,NMCOMETS-1
83$:	LDA X,OBJ+ZCOMET
	BEQ 85$
	LDA X,COMTYP
	BPL 85$		;NASCENT
	LDA X,CSPEED
	CMP I,10
	BCS 84$
	INC X,CSPEED
84$:
	LDA X,CANGCH
	CMP I,70
	BCS 85$
	INC X,CANGCH
	INC X,CANGCH
85$:	DEX
	BPL 83$
FRCA30:
;FOR COMPETITIVE ADD MINES EVERY
;SET TIME PERIOD
	LDA GAME
	BNE 20$
	LDA FRAME+1
	AND I,0F
	BNE 20$
	JSR INKLMINE
20$:
;IN RIGID GAMES TRADE THE ONE WITH
;MORE ENEMIES AIMED AT HIM
	BIT TOGCOMB
	BPL 40$
	LDA FRAME+1
	LSR
	BCS 30$
	LDA BCOMSTART
;	CLC
	ADC I,ZCOMET
	STA COMSTART
	LDA BCOMSTART+1
	CLC
	ADC I,ZCOMETS+<NMCOMETS/2>
	STA COMSTART+1
	BPL 40$			;ALWAYS
30$:	LDA BCOMSTART+1
	CLC
	ADC I,ZCOMET
	STA COMSTART
	LDA BCOMSTART
	CLC
	ADC I,ZCOMET+<NMCOMETS/2>
	STA COMSTART+1
40$:
;************************************************************************
;**************** END OF FRAME & 0FF ************************************
;************************************************************************
FRM7F:	;FRAME&07F
;DECREASE STARTING ENEMY DELAY
	LDX I,1
7$:	LDA X,SENMDEL
	CMP I,09
	BCC 8$
	DEC X,SENMDEL
8$:	DEX
	BPL 7$
;******************************************************************
;******************** END OF FRAME & 07F **************************
;******************************************************************
FRM0F:	;FRAME & 0F
	JSR PARAMS		;DISPLAY PARAMETERS HERE
	LDA COMTIMER
	BEQ 50$
	DEC COMTIMER
	BNE 50$
	LDA I,0
	STA NENTCOMETS
	STA NENTDWARFS
	JSR COMAWAY
50$:
;********************************************************************
;**************** END OF FRAME & 0F *********************************
;********************************************************************
FRM07:	;FRAME & 07
	BIT SPECEX			;WANT SPECIAL EXPLOSION?
	BPL 9$
	JSR FAN
9$:
	JSR SMINVEL		;KEEP SAUCERS MOVING
	LDA NROCKS
	BEQ 40$			;NO ROCKS
	LDX I,1
10$:	LDA X,RTIMER
	BEQ 20$
	DEC X,RTIMER
20$:	LDA X,ETIMER
	BEQ 25$
	DEC X,ETIMER
25$:
	LDA X,ENMDEL
	BEQ 30$
	DEC X,ENMDEL
30$:	DEX
	BPL 10$

;COUNT DOWN THE PENALTY FOR DAWDLERS
	LDA SCSHSP
	AND SCSHSP+1		;BOTH SHOTTING FAST?
	BMI 40$
	LDA LNGTIMER
	SEC
	SBC I,1
	STA LNGTIMER
	BCS 40$
	DEC LNGTIMER+1
40$:
;*********************************************************************
;***************** END OF FRAME & 07 *********************************
;*********************************************************************
MESSUP:	;DONE ABOVE
	.SBTTL MESS UP COLLISION LATCHES
;MESS UP COLLISION REGISTERS
;SO THAT IF NOT A ROCK
;LAST FRAME WILL NOT MATCH
;A ROCK NEXT FRAME
;IF COLBIT (MSB) NOT ON, PUT IT ON
;OTHERWISE SHIFT RIGHT, POTTING MSB ON
10$:	LDX I,1
22$:	LDA X,COLLIS		;MSB WAS NOT ON
	BMI 23$			;NO COLLISION LAST TIME
	ASL X,COLLIS		;PUT MSB
23$:	SEC
	ROR X,COLLIS
	DEX
	BPL 22$
;FOR ABOVE, COUNT ON AN INITIAL FRAME WITH NO COLLISION
	RTS
;ENDING VALUE FOR KILLER MINE SPEED
KSPEND:	.BYTE 70,60,60,50,40
KCHEND:	.BYTE 18,10,10,0C,08
	.SBTTL MDIFCOMET
;SINCE CANNOT GET IN, MUST BE BUSY
;INCREASE COMET CAPABILTY FOR PLAYER X
;ENTRY X=(0:1)
MDIFCOMET:
MDIF20:	LDX #1
	LDY DIFF		;USE DIFF SETTING
10$:	LDA X,NWCACH
	CMP I,40
	BCS 30$
	ADC Y,NWCHAM		;ADD AMOUNT BASED ON DIFF
30$:	LDA X,NWCSPD
	ADC Y,NWCSAM
	BMI 40$
	STA X,NWCSPD
40$:				;FOR NOW, CONSIDER IT BETTER THEY START STRAIGHT
50$:	LDA X,FCSPD
	CMP I,040
	BCS 60$
	ADC Y,FCSPAM
	STA X,FCSPD
60$:	DEX
	BPL 10$
	RTS
COMENTABLE:
	.BYTE ZCOMET,ZCOMET+<NMCOMETS/2>
	.SBTTL	ONSLAUGHT
ONSLAUGHT:
	LDA NROCKS
	ORA GENDING		;ENDING?
	BNE 90$
	LDA GAME
	CMP #ALONEGAME+1
	BCC 10$			;DON'T CARE ABOUT 1 DEAD
	BIT COMOFF
	BPL 10$
90$:	RTS
10$:	LDA NENTCOMETS
	ORA NENTDWARFS
	BNE 12$			;STILL SOME LEFT
11$:	RTS
;KLUDGE, AGAINST THEM BEING NEGATIVE
12$:	BMI 90$
	LDA COMTIMER
	BEQ 90$			;OUT OF TIME
	LDA FRAME
	AND I,0F
	BNE 90$
	LDY I,0			;WHOSE COMETS TO USE
	LDA I,ZSHIP
	STA TEMP1+1		;THE TARGET

	LDX I,ZCOMETS+<NMCOMETS/2>-1
;IS THIS CHECK NEEDED?
	LDA GAME
	CMP I,ALONEGAME
	BNE 50$
	LDX I,ZCOMET+NMCOMETS-1
	BNE 95$
50$:	LDA FRAME
	AND I,20
	BNE 95$
	INY
	INC TEMP1+1
	LDX I,ZCOMET+NMCOMETS-1
95$:	STY TEMP1		;FOR EHASENTERED
	JMP INCO10		;ALWAYS
	.SBTTL	QUICK END OF ONSLAUGHT
;
; QUICK-END	END ONSLAUGHT IF ALL "PAID" PLAYERS DEAD
;
QEND:	LDA ATRACT
	BEQ 20$			;NOT DURING ATTRACT
	LDA OBJ+ZSHIP		;BOTH EXPLODING
	AND OBJ+ZSHIP+1
	BPL 1$			;NO
	JSR STFUS		;STOP FUSE
1$:	LDA OBJ+ZSHIP		;SEE IF BOTH DEAD
	ORA OBJ+ZSHIP+1		;THIS IS 0 IF NOT ACTIVE
	BEQ 5$
	RTS
5$:	LDX #ZKLMINES-ZCOMET-1	;REMOVE COMETS
10$:	STA X,OBJ+ZCOMET
	DEX
	BPL 10$
	STA OBJ+ZSAUCER		;REMOVE SAUCERS
	STA OBJ+ZSAUCER+1
	STA NENTCOMETS
	STA NENTDWARFS
	STA SUPRSAC		;RESET SUPERSAUCER
20$:	RTS
;
; FUSE-CRACKLE	SOUND FUSE SPARKLE
;
FUSECK:	LDA POKRAN+POKEY		;RANDOM "FUZZ"
	AND #07
	BEQ 10$
	RTS			;NOT TIME
10$:	LDA OBJ+ZSHIP		;IS THIS ONE DEAD
	BMI 15$			;YES
	JMP FU1SN		;SOUND & RETURN
15$:	JMP FU0SN		;SOUND & RETURN
	.SBTTL	***STOP FUSE***
;
; STOP FUSE SOUND
;
STFUS:	LDA #0
	STA POINT		;STOP POINTERS
	STA POINT+1
	STA POINT+6
	STA POINT+7
	STA POKEY+1		;STOP POKEY
	STA POKEY+7
	RTS
;SBTTL INCOMET
;CHECK IF TARGET (INY) IS ALIVE
;THEN SENDS IN COMET DIRECTED
;AT HIM, DEPENDING ON GAME
INCOMET:
	LDY TEMP1		;WHO GETS IT (0:1)
	LDX Y,COMSTART
INCO10:	LDA Y,COMENTABLE

	.SBTTL INCOMET-INITIALIZE COMET
;FINDS SPOT ON PERMETER FROM WHICH TO
;ENTER A COMET
;THE SPORT IS NOT TO BE EXACTLY EQUAL TO
;THE TARGET, AND THE DISTANCE (TAXICAB) IS TO BE
;MORE THAN A TRIGGER VALUE
;ALSO EACH COORDNATE IS
;TO DIFFER BY AT LEAST 2
;IN THE UPPER BYTE
;SO DWARF WILL NOT IMMEDIATELY HIT
;ON EDGE
;TARGETS TO BE ONLY SHIPS
;ENTRY	(CTRIG)=TRIGGER DISTANCE
;	(X)=STARTING VALUE FOR POSSIBLE COMETS
;	(A)=STOPPING VALUE FOR POSSIBLE COMETS
;	REQUIRES CTARGET=TARGET FOR COMET
;
;EXIT	HORIZONTAL AND VERTICAL POSITON FOR COMET(X)
;
;USES	TEMP2,TEMP2+1
;
INCO20:	BIT ATRACT
	BPL 99$			;NOT DURING ATTRACT
	CPX #NMCOMETS+ZCOMET	;TO MANY TO START??
	BCC 4$			;OK TO START
	LDX #NMCOMETS+ZCOMET-1	;SET TO MAX
4$:	STA TEMPA
;DECIDE WHICH COMET, IF ANY IF FREE
5$:	CPX TEMPA
	BCC 99$
	LDA X,OBJ
	BMI 7$
	BEQ 10$
7$:	DEX
	JMP 5$
99$:	RTS			;(EXIT)
10$:
	LDA COMTIMER
	BNE 12$			;ONSLAUGHT
	LDA NCOMETS
	CMP COMLIMIT
	BCS 99$			;FULL ALREADY
12$:	INC NCOMETS
	LDA TEMP1+1
	STA X,CTARGET-ZCOMET
	TAY
	LDA POKEY1+POKRAN
15$:	PHA			;SAVE IT(MORE STACK:1)
	LDA I,0
	STA X,OBJXL
	STA X,OBJYL		
	PLA			;(LESS STACK:0)
	PHA			;(MORE STACK:1)
	LSR
	BCS 50$			;VARY Y INSTEAD OF X
	LSR
	PHA			;SAVE RANDOME VALUE (0-3F) (STACK:2)
	LDA I,0			;BOTTOM
	BCS 20$
	LDA I,YTOP-1		;TOP
	DEC X,OBJYL
20$:	STA X,OBJYH		;UPPER BYTE OF Y
	SEC
	SBC Y,OBJYH
	JSR ABS
	STA TEMP2		;DIFFERENCE IN Y
	CMP I,2			;MINIMU, DIFFERENCE
	PLA			;RECALL RANDOM VALUE (STACK:1)
	BCC 83$			;TWO CLOSE
	LSR			;(0-1F)
	STA X,OBJXH		;UPPER BYTE OF X
	SEC
	SBC Y,OBJXH
	JMP 80$
50$:	LSR
	PHA			;(MORE STACK:2)
	LDA I,0
	BCS 60$
	LDA I,XRIGHT-1
	DEC X,OBJXL
60$:	STA X,OBJXH
	SEC
	SBC Y,OBJXH
	JSR ABS
	STA TEMP2		;(LESS STACK:1)
	PLA
	LSR			;(0-1F)
;SOME OF THESE ARE BIGGER THAN YTOP
	CMP I,YTOP
	BCC 70$
	SBC I,18		;(0:7)
	STA TEMPA
	ASL
	ADC TEMPA		;(0:21)
70$:	STA X,OBJYH
	SEC
	SBC Y,OBJYH
80$:	JSR ABS
	CMP I,2
	BCS 85$			;WAS MINIMUM DISTANCE AT LEAST
83$:	PLA			;(STACK:0)
	ADC I,21		;VARY RANDOM NUMBER SLIGHTLY
	JMP 15$
85$:	ADC TEMP2
	CMP #04			;MIN DISTANCE TO START OBJECT
	PLA			;(GET STACK CORRECT)
	BCS 90$
	ADC I,81		;VARY RANDOM NUMBER TO OTHER SIDE
	JMP 15$
90$:
INCO30:
;NOW THAT WE HAVE THE POSITION, GET IT STARTED
;IN THE RIGHT DIRECTION
	LDY X,CTARGET-ZCOMET
	LDA Y,FCACH-ZSHIP
	STA X,CANGCH-ZCOMET
	LDA Y,FCSPD-ZSHIP
	STA X,OBJ
	LDA I,0			;DWARF
	STA X,CSPEED-ZCOMET
	STA X,XINC
	STA X,YINC
	STA X,COMTYP-ZCOMET
	LDA NENTCOMETS
	BEQ 30$
	DEC NENTCOMETS
	BPL 50$			; ALWAYS
30$:	LDA NENTDWARFS
	BEQ 40$
	DEC NENTDWARFS
	BPL 70$			;ALWAYS
40$:	LDA POKRAN+POKEY1
	CMP Y,PROBCOMET-ZSHIP
	BCS 70$
;START IT AS A COMET
50$:	JSR STCOMET
70$:
	STX TEMP3
	JSR KLMI3		;FIRST ANGLE
	LDX TEMP3
	STA X,CANGLH-ZCOMET
	JMP EHASENTERED		;(EXIT)
	.SBTTL DOCOMETS-COMET CALCULATIONS
;MOVE THE COMETS
DOCOMETS:	LDA FRAME
	BIT COMTIMER		;ONSLAUGHT?
	IFMI			;YES
	AND #07
	ELSE
	AND #1F			;ASSUME 8 NCOMETS=8
	LSR			;WILL DO COMETS ON ODD FRAMES ONLY
	BCS DOCOEX
	LSR
	BCS DOCOEX
	ENDIF
	CLC
	ADC I,ZCOMET
	TAX
	STX TEMP3
	LDY X,CTARGET-ZCOMETS
	LDA X,OBJ
	BMI DOCOEX
	BEQ DOCOEX
	LDA X,COMTYP-ZCOMET
	BMI 20$
	JMP KLMI6
20$:	JSR GWRANGLE
	JMP KLMI7
INITVG:	LDA I,1			;LSW OF VECTOR ADDRESS
	STA VECRAM
	LDA I,0E0		;JUMP INSTRUCTION
	STA VECRAM+1
	LDA I,020		;HALT INSTRUCTION
	STA VECRAM+3
	STA VECRAM+403
DOCOEX:	RTS
	.PAGE
	.SBTTL TABLES
XPLINI:	.BYTE -4,3
	.BYTE 5,-2
	.BYTE 0,-6
	.BYTE 6,2
	.BYTE 1,7
	.BYTE -4,-4
	
EXPDIR:	.BYTE -40,30		;(Y,X) CHANGE IN DIRECTION
	.BYTE 50,-20		;ALSO USED FOR STARTING POSITION OF EACH
	.BYTE 0,-60		;EXPLODING PIECE
	.BYTE 60,20
	.BYTE 10,70
	.BYTE -40,-40
;HOLDS SIGN FOR 2 BYTE ADD
UEXPDIR:.BYTE -1,0
	.BYTE 0,-1
	.BYTE 0,-1
	.BYTE 0,0
	.BYTE 0,0
	.BYTE -1,-1
;
; GAME 0 -- COMPETITIVE
; GAME 1 -- SINGLE PLAYER FIGHTER
; GAME 2 -- SPACE STATION 2 PLAYER
; GAME 3 -- SPACE STATION 1 PLAYER
	
;TABLE FOR INITIAL VALUES OF TOGGLES. FIRST ITEM
;IN EACH TABLE APPLIES TO GAME 0. SECOND TO GAME 1...
TTOGCOMB:
	.BYTE 0,0,80,80
TTOGDRONE:
	.BYTE 0,0,0,80
TTPLAYR:
	.BYTE 2,1,2,1
	.RADIX 16
;KILLER MINE TABLES	
INKSPTABLE:	;SPEED TABLE -- GAME 1 ONLY
	.BYTE 58,50,40,38,30,28,20,10,08
INKCHTABLE:	;ANGLE CHANGE SPEED -- GAME 1 ONLY
	.BYTE 9,7,6,6,6,6,6,3,2
INKSPRIGTABLE:	;SPEED TABLE -- SPACE STATION GAMES
	.BYTE 07F,6F,5F,4F,3F,2F,1F,0F,07
INKCHRIGTABLE:	;ANGLE CHANGE SPEED -- SPACE STATIONS
	.BYTE 1F,17,10,0C,09,07,06,05,3
INKSPCOMTITIVE:	;SPEED TABLE -- GAME 0 ONLY
	.BYTE 60,60,40,40,30,30,28,28,18
INKCHCOMPETITIVE:	;ANGLE CHANGE SPEED -- GAME 0 ONLY
	.BYTE 0C,0C,0A,0A,6,6,5,5,3
NWCHAM:		;NEW COMET ANGLE CHANGE AMOUNT BASED ON DIFF
	.BYTE 1,1,2,3
NWCSAM:		;NEW COMET TOP SPEED CHANGE AMOUNT "  "  "
	.BYTE 1,2,3,4
FCSPAM:		;FIRST COMET(S) TOP SPEED BASED ON DIFF
	.BYTE 2,3,4,5
	.RADIX 10
SINCOS:	.BYTE 0,3,6,9,12,16,19,22	;SIN(0 TO 7)
	.BYTE 25,28,31,34,37,40,43,46
	.BYTE 49,51,54,57,60,63,65,68
	.BYTE 71,73,76,78,81,83,85,88
	.BYTE 90,92,94,96,98,100,102,104
	.BYTE 106,107,109,111,112,113,115,116
	.BYTE 117,118,120,121,122,122,123,124
	.BYTE 125,125,126,126,126,127,127,127	;(SIN(0-63)
	.BYTE 127				;SIN(64)

	HLL65
	.END
                                                                                                                                                                                                                                                                                                                                                                                                                               