	.TITLE AS2TST-ASTEROIDS 2 SELF TEST
	.SBTTL AS2SLF
	.SBTTL ***************************
	.SBTTL *
	.SBTTL *PROGRAMMER: OWEN RUBIN
	.SBTTL *
	.SBTTL * DISK 77 & B49
	.SBTTL *
	.SBTTL ***************************
	.ASECT
	.RADIX 16
	.=0A0
TESTNM:	.BLKB 1		;NEED A BYTE HERE
FRAME:	.BLKB 1
	.=0F0
PNTTBL:	.BLKB 8
	.=080
ERPLC:	.BLKB 5
	.CSECT
	.INCLUDE HLL65F
	.SBTTL POWERON
	.GLOBL POWERON,PWRON,UPDOWN,REHIIN,EACOPY,BKCOPY
	.GLOBL START,POKEY,CHAN3F,CHAN4F,EAZERO,XYINIT
	.GLOBL CHAN1F,CHAN2F,CHAN1V,CHAN2V
	.GLOBL VGCNTR,VGVTR,VGSTAT,VGJSRL,VGSCA1
	.GLOBL VGMSGA,VGMSGU,VGVTR1,VGHEX,VGHEXZ,VGVTR5
	.GLOBL VGADD2,VGHALT,DIGITS,VGSCAL,VGHEX1
	.GLOBL HATCH8,HATCH9,QTST68,QTST69,WNDSE8,WNDSE9
	.GLOBL CNTR8,CNTR9,WHITE
	.GLOBL CLPT28,CLPT29
	.GLOBL CLPAT9,CLPAT8,CL739,CL738
	.GLOBL FRBOX8,FRBOX9,HYSTR9,HYSTR8
	.GLOBL FRCFL9,FRCFL8
	.GLOBL HLINE8,HLINE9,VLINE8,VLINE9
	.GLOBL IRQ
	.GLOBL STESTA,TSTCK,MOVIN
	.GLOBL SWTST,OPTND
	.GLOBL INISOU
; GLOBAL TABLES
	.GLOBL HSCBEG
	.GLOBL HSCORE,INITL
;GLOBAL VARIABLES
	
	.GLOBL EABAD,EAREQU,EAFLG
	.GLOBL SPINT,FLSFLG
	.GLOBB TEMP1,TEMP2,TEMP3,TEMP4,TEMP6,TEMP5,TEMP7
	.GLOBB TEMP8,TEMP9,TEMPA,TEMPB,SYNC
	.GLOBB VGBRIT,$CMODE
	.GLOBB VGLIST
	.ENABL AMA
	.RADIX 16
	.CSECT AS2TST
	
	.NLIST
	.INCLUDE ASCVG	;<<<<<<<<<<<<<<<<<<<<<<<<<
	.PAGE
	.INCLUDE VGMC	;<<<<<<<<<<<<<<<<<<<<<<<
	.INCLUDE AS2DEC		;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	.LIST
;INITIAL INITIALS
CKUM6::	.BYTE 0A
ININITLS:
	.BYTE 0,0,0		; EAROM WILL OVERWRITE
	.BYTE 19,1C,1C,1D,1C,0D
	.BYTE 0E,0F,1D,14,17,1C
	.BYTE 16,20,1C
POWERON:SEI
	LDX I,0FE		;C  INIT STACKF
	TXS
	LDA I,0
	STA STOPADD	;C RESET VEC GEN
	CLD
	TAX
	BEGIN
	STA ZX,0
	STA AX,100
	STA AX,200
	STA AX,300
	STA AX,VECRAM
	STA AX,VECRAM+100
	STA AX,VECRAM+200
	STA AX,VECRAM+300
	STA AX,VECRAM+400
	STA AX,VECRAM+500
	STA AX,VECRAM+600
	STA AX,VECRAM+700
	STA X,POKEY1
	STA X,POKEY2
	STA WTCHDG
	INX
	EQEND
	LDA #0C0
	STA INVERTS
	LDA #7
	STA POKEY1+SKCTL	;TURN ON POKEY
	STA POKEY2+SKCTL
	LDA STSTSW		;D  IF SELF TEST
	AND I,ST.BIT
	IFEQ
	JMP RAMTST
	ENDIF
	LDA I,1			;C  INIT VG BUFFER
	STA VECRAM
	LDA I,0E4
	STA VECRAM+1
	LDA I,20
	STA VECRAM+3
	STA VECRAM+403
	LDA CABINET
	STA UPDOWN		;INIT UPDOWN OUTPUT POINTER
	JSR MOVIN		;MOVE IN INITIALS
TSTCK:	CLI		;START THINGS RUNNING
	LDX #60		;EAROM WARM UP WAIT COUNTER
	BEGIN
	BEGIN
	LSR SYNC
	CSEND
	STA WTCHDG	;KEEP THING RUNNING
	DEX
	MIEND
	JSR REHIIN		;READ EA ROM INTO BUFFER
	BEGIN
	LDA EAFLG		;STILL READING IN?
	STA WTCHDG
	EQEND
	LDA EABAD		;DATA OK?
	LSR			;BIT 0
	IFCC
	PHA
	JSR EACOPY		;MOVE TO DISPLAY AREA
	PLA
	ENDIF
	JSR BKCOPY		;MOVE REST DOWN
	JMP PWRON
;SET UP INITIALS AND HIGH SCORE FOR EACH GAME
MOVIN:	LDY I,HSCNUM*3*4-1+1
	BEGIN
	LDX I,HSCNUM*3-1
	BEGIN
	LDA X,ININITLS
	STA Y,INITL-1
	LDA #0
	STA Y,HSCORE-1
	DEY
	DEX
	LDA I,5
	STA AY,HSCORE-1
	LDA X,ININITLS
	STA Y,INITL-1
	DEY
	DEX
	LDA X,ININITLS
	STA Y,INITL-1
	LDA #0
	STA Y,HSCORE-1
	DEY
	DEX
	MIEND
	TYA			; SET STATUS
	EQEND
;MOVE IN SPECIAL INITIALS
	LDX I,HSCNUM*3-1
	BEGIN
	LDA X,ININITLS
	STA X,SPINT
	DEX
	MIEND
	RTS
	.PAGE
	.SBTTL ZERO-PAGE TEST

RAMTST:	LDX	I,11		;BEGINNING PATTERN
	TXS			;S HOLDS PATTERN
	TXA
	STX	Z,0		;TEST CELL START @ 0
	LDY	I,0
2$:	LDX	I,1		;ONE LESS COUNT BEFORE IT WRAPS
;SCAN ALL FURLTE BYTES TO
;SEE IF ANY ARE ON AS A
;RESULT OF THIS LOAD
3$:	INY			;SCAN FORWARD
	LDA	AY,0		;ZERO ?
	BNE	5$		;NO - ERROR (HIGH BITS BAD)
	INX			;CHK HOW FAR SCANNED
	BNE	3$		;BRANCH - CONTINUE
	TSX
	TXA			;ACC = PATTERN
	STA	A,WTCHDG	;WTCHDGDOG
	INY			;POINT TO TEST CELL
	EOR	AY,0		;DOES IT HAVE PATTERN ?
	BNE	5$		;N0 - ERROR (HIGH BITS BAD)
	TXA			;ACC = PATTERN
	LDX	I,0
	STX	ZY,0		;ELSE - CLEAR CELL
	INY			;POINT TO NEXT TEST CELL
	BNE	4$		;IF PASS NOT COMPLETE
	ASL			;ELSE SHIFT PATTERN
	LDX	I,0		;IF DONE (0 = GOOD)
	BCS	STOP0		;BRANCH - DONE (GOOD)
4$:	TAX			;PATTERN -> X
	TXS			;	 -> S
	STX	ZY,0		;	 -> NEXT TEST CELL
	BNE	2$		;ALWAYS - REPEAT SCAN
5$:	TAX			;ANY HIGH BITS INDICATE BAD RAM
7$:	TXA
	LDY	I,82		;ASSUME LOW NIBBLE IS GOOD
	AND	I,0F		;CHECK IT
	BEQ	8$		;BRANCH - LOW NIBBLE GOOD
	LDY	I,12		;ELSE - SET Y ACCORDINGLY
8$:	TXA
	LDX	I,82		;ASSUME TOP NIBBLE IS GOOD
	AND	I,0F0		;CHECK IT
	BEQ	9$		;BRANCH - TOP NIBBLE GOOD
	LDX	I,12		;ELSE - SET X
9$:
	TYA
	TXS			;S = HIGH NIBBLE STATUS
	TAX			;X = LOW
RT.LP:	STX	A,POKEY		;NOISE = LOWER NIBBLE STATUS
	LDX	I,0A8
	STX	A,POKEY+1
	LDY	I,12.		;Y = HIGH BYTE OF COUNTER
10$:	LDX	I,100.		;X = LOW BYTE OF COUNTER
11$:	BIT	A,HALT
	BMI	11$		;BIT 7 (SIGN FLAG) OF HALT = 3000 HZ SQUARE WAVE
12$:	BIT	A,HALT
	BPL	12$
	STA	A,WTCHDG
	DEX
	BNE	11$		;INNER LOOP 255 * 333 US = 85 MS
	CPY	I,5
	BNE	13$
	STX	A,POKEY+1	;CLR NOISE
13$:	DEY
	BNE	10$		;OUTER LOOP 8 *  85 MS = 580 MS
	LSR			;TEST SIGN
	BCS	14$		;DONE
	TSX
	BNE	RT.LP		;ALWAYS
14$:
	JMP STOP1		;WAIT FOR SWITCH
STOP0:	LDX	I,0FF
	TXS			;INITIALIZE STACK (USED IN ROM TESTS)
	LDX I,0
	TXA
10$:	STA ZX,0		;ZERO ZERO-PAGE
	INX
	BNE 10$
	.PAGE
;
;	VECTOR GEN RAM TEST
;
	.SBTTL	VG RAM TEST
;
;
;
STEST1:	TAY			;Y=0
	LDA	I,1
5$:	STA	1		;START @ PAGE 1 (NY,0)
10$:	LDX	I,11		;STARTING PATTERN
	LDA	NY,0		;D  IF BAD CELL
	BNE 	20$
15$:	TXA
16$:	STA	NY,0		;WRITE
	EOR	NY,0		;AND COMPARE
	BNE	20$		;ERROR
	TXA
	ASL
	TAX
	BCC	16$		;NEXT PATTERN
	INY
	BNE	10$		;NEXT LOCATION
	STA	A,WTCHDG	;MUZZLE THAT BEAST
	INC	1
	LDX	1
	CPX	I,04		;PAGES 1 TO 3
	BCC	10$		;CHECK NEXT PAGE
	LDA	I,VECRAM/100
	CPX	I,VECRAM/100
	BCC	5$		;BEGIN NEXT @ 2000
	CPX	I,VECRAM/100+8
	BCC	10$		;CHECK UP TO 27FF
	JMP	STEST3		;RAM IS GOOD
20$:	LDX	1		;X = MSB (ADDRESS) ACC=BAD PATTERN
	CPX	I,VECRAM/100
	STA	2		;BAD PATTERN
	BCC	30$
	TXA
	SBC	I,<VECRAM/100>-4
30$:	LSR
	LSR
	AND	I,7
	TAY			;Y = # OF 1K BLOCK BAD
	LDA 	2
;THIS WILL BEEP TWO TONES FOR THE BAD RAM ONE OF THEM LOW
;THEN FOR TWICE THE NUMBER OF RAM SPACES BELOW IT WILL BEEP HIGH
STEST2:	STY	0		;0 = BAD RAM #
	STA	1		;1 = BAD BITS
5$:	LDA 	I,1
	STA	2
10$:	LDX	I,0A8
	LDY	I,82		;ASSUME GOOD RAM
	LDA	0
	BNE	30$		;IT IS
	LDA	1
	AND	I,0F		;LOW NIBBLE
	BEQ	30$		;GOOD
20$:	LDY	I,12		;BAD
30$:	STX	A,POKEY+1	;TONE/VOLUME
	STY	A,POKEY		;FREQUENCY
	LDA	I,9		;BAD
	CPY	I,12
	BEQ	35$		;YES
	LDA	I,1
35$:	TAY
	LDX	I,0
40$:	BIT	A,HALT
	BMI	40$
42$:	BIT 	A,HALT
	BPL	42$
	STA	A,WTCHDG	;NO WTCHDGIN' DOG
	DEX
	BNE	40$		;COUNT 256/3000 OF A SECOND
	DEY
	BNE	40$
	STX	A,POKEY+1	;CLR SOUND
	LDY	I,9
50$:	BIT	A,HALT
	BMI	50$
52$:	BIT	A,HALT
	BPL	52$
	STA	A,WTCHDG		;NO WTCHDGDOG
	DEX
	BNE	50$		;256/3000
	DEY
	BNE	50$
	LDA	0
	BNE	60$
	LDA	1
	LSR
	LSR
	LSR
	LSR
	STA	1
60$:	DEC	2
	BEQ	10$
	DEC 0
	BPL	5$		;ALWAYS
STOP1:	STA	A,WTCHDG	;NO WTCHDGDOG
	LDA #-1
	STA ERPLC			;BAD RAM
;
	.PAGE
	.SBTTL ROM TEST
;
;	ROM TEST
;
STEST3:	LDA	I,0		;EOR CKSUM ROMS
	TAX
	BEGIN
	STA X,100
	STA X,200
	STA X,300		;CLEAR RAM
	DEX
	EQEND
	TAY
	STA	TEMP1
	LDA	I,<VECROM/100>+8	;WILL DO 2800 AS SPECIAL CASE....
				;WILL START WITH 4K (16 PAGES) CHIPS
	BEGIN
	STA	TEMP1+1
	LDA	I,16.
6$:	STA	TEMP2		;# PAGES
	TXA			;SEED FOR CKSUM
	BEGIN
	BEGIN
	EOR 	NY,TEMP1
	INY
	EQEND
	INC	TEMP1+1
	STA	A,WTCHDG	;NO WTCHDGDOG
	DEC	TEMP2
	EQEND
	STA	ZX,PNTTBL+1	;CKSUMS (SPACE LEFT FOR 2800))
	INX
	BEQ SNDERR			;IF 0, WAS SPECIAL CASE 2800
	LDA	TEMP1+1
	CMP	I,<VECROM/100>+18	;6K OF VECROM
	IFEQ
	LDA 	I,PRGROM/100
	STA 	TEMP1+1
	ENDIF
	CMP	I,90		;UP TO 9000
	CSEND
;JUST FINISHED 4K ROMS...........
;MUST NOW DO SPECIAL CASE 2K ROM AT 2800
	LDX #-1			;WANT CHECKSUM AT PROPER LOCATION
	LDA #VECROM/100
	STA TEMP1+1		;START LOCATION
	LDA #8			;ONLY 8 PAGES HERE
	BNE 6$			;********ALWAYS************
;**********************************************************
SNDERR:				;JUST A LABEL
	LDA	PNTTBL
	ORA	PNTTBL+1	;ANY VGROM ERROR?
	IFNE
	LDA	I,0F0		;IF YES, SOUND OFF
	LDX	I,0A2
	STA	A,POKEY+4
	STX	A,POKEY+4+1
	ENDIF
;
; (TEMP2,+1) = SCRATCH
; (PNTTBL,+6) = 7 CHKSUMS FOR ROMS
; (TEMP3)    = DIAG STEP #
; (ERPLC,+3) = ERROR FLAGS FOR:
;	ERPLC:		RAM ERROR
;	ERPLC+1:	POKEY1
;	ERPLC+2:	POKEY2
;	ERPLC+3:	EAROM
;
	.PAGE
	.SBTTL TEST POKEY & EAROM
STEST4:	LDX #05
	LDA POKRAN+POKEY1
	BEGIN
	CMP POKRAN+POKEY1	;MAKE SURE ITS RUNNING
	BNE OK1			;YES -- RANDOM #'S DIFFERENT
	DEX			;ELSE CHECK 5 TIMES
	MIEND
	STA ERPLC+1		;BAD POKEY1
OK1:	LDX #05
	LDA POKRAN+POKEY2
	BEGIN
	CMP POKRAN+POKEY2
	BNE OK2
	DEX
	MIEND
	STA ERPLC+2		;BAD POKEY
OK2:	CLI
	JSR REHIIN		;READ EAROM
	LDY #02			;DEFAULT GOOD
	LDA EABAD		;ERROR??
	IFNE
	STA ERPLC+3		;BAD EAROM
	JSR EAZERO		;CLEAR IT IF BAD
	LDY #0
	STY EABAD
	ENDIF
	STY TESTNM		;WHICH STATE FIRST?
	JMP DIAGM		;DO DIAG MAIN LINE
	.PAGE
	.SBTTL BAD EAROM RECOVERY
STEST5:	
	LDA EAFLG
	ORA EAREQU
	IFEQ			;DONE ERASING?
	JSR REHIIN		;TRY ANOTHER READ
	LDA EABAD
	STA ERPLC+3		;STILL BAD? (REPORT)
	LDA #2
	STA TESTNM		;GO STRAIGHT TO REPORT
	ENDIF
	RTS

	.PAGE
	.SBTTL REPORT PROBLEMS & DISPLAY SWITCHES
STEST6:	BIT CABINET		;COCKTAIL??
	IFMI
	LDA #0
	STA INVERTS
	ENDIF
	LDY #WHITE+0A0
	JSR VGSTAT
	LAL CNTR9
	LXH CNTR8
	JSR	VGADD2
	LDA #-50
	LDX #-10
	JSR VGVTR5
	LDA #0			;SCALE 0
	JSR VGSCA1		;BIG NUMBERS
	JSR OPTN2		;OUTPUT OPTION SWITCHES
	LDA #1
	JSR VGSCAL		;RETURN TO NORMAL SCALE
	LDX	I,46
	STX	TEMP2+1		;STARTING Y VALUE CHECK SUMS
	LDX	I,6
	BEGIN
	LDA	ZX,PNTTBL
	IFNE
	STX	TEMP2		;SAVE CHKSUM #
	JSR	VGCNTR		;CENTER BEAM
	LDX	TEMP2+1
	TXA
	SEC
	SBC	I,08		;32. BELOW CURRENT LINE
	STA	TEMP2+1
	LDA	I,-10.
	JSR	VGVTR5		;POSITION BEAM
	LDA	TEMP2
	JSR	VGHEX		;ROM #
	LDA	I,24./4
	LDX	I,0
	JSR	VGVTR5
	LDA TEMP2
	CLC
	ADC I,PNTTBL
	LDY	I,1
	JSR	DIGITS		;DISPLAY 2 DIGITS
	LDX	TEMP2
	ENDIF
	DEX
	MIEND
	JSR VGCNTR
	LDA #-10.
	LDX #50
	JSR VGVTR5		;POSITION FOR ERROR LIST
	LDX #3
	STX TEMP2
	BEGIN
	LDX TEMP2
	LDY #0
	LDA X,ERPLC		;ANY BAD NEWS?
	IFNE
	LDY X,BADNWS
	ENDIF
	LDA Y,VGMSGA
	LDX Y,VGMSGA+1		;GET LETTER
	JSR VGADD2
	DEC TEMP2
	MIEND
	JSR SWTST		;BEEP ON SWITCH CLOSURE
	RTS
;
;
	.PAGE
	.SBTTL PATTERN TEST & ALPEHBET (TELL A FRIEND)
STEST7:	LAL QTST69
	LXH QTST68
	JMP VGADD2
	.SBTTL HYSTERSIS & SOUND TEST
STEST8:	LDA FRAME
	AND #03F
	IFEQ
	INC TEMP3
	ENDIF
	LDA TEMP3
	AND #07
	TAX
	LDY X,SNDTBL-1
	LDA #0
	STA Y,13F1
	LDY X,SNDTBL
	LDA X,SNDFRQ
	STA Y,13F0		;FAKE POKEY ADDRESS
	LDA #0A8
	STA Y,13F1
	LAL HYSTR9
	LXH HYSTR8
	JSR VGADD2
	JSR VGCNTR
	LDA TEMP3
	AND #07
	IFEQ
	LDA #01			;DON'T ALOW 0
	ENDIF
	JSR VGSCA1		;TEST SCALE
	LAL FRBOX9
	LXH FRBOX8
	JMP VGADD2
	.BYTE 16		;SNDTBL UNDERFLOW
SNDTBL:	.BYTE 0,10,2,12,4,14,6,16,0
SNDFRQ:	.BYTE 10,10,40,40,90,90,0FF,0FF 
	.PAGE
	.SBTTL COLOR BARS
STEST9:	LDA #01			;SET SCALE 1
	JSR VGSCA1		;SET SCALE
	LDY #06
	STY TEMP3
	BEGIN
	JSR VGCNTR		;CENTER
	LDY TEMP3
	LDA Y,POSIX		;POSITION THIS GROUP
	LDX Y,POSIY
	JSR VGVTR5
	LDA TEMP3
	EOR #0FF
	AND #07
	TAY
	JSR VGSTAT
	LDA TEMP3		;WHITE GROUP?
	IFEQ
	LAL CLPT29
	LXH CLPT28		;SPECIAL WHITE GROUP
	ELSE
	LAL CLPAT9
	LXH CLPAT8
	ENDIF
	JSR VGADD2
	DEC TEMP3
	MIEND
ST91:	LAL CL739		;LAST ON IS WHITE
	LXH CL738
	JSR VGADD2
	RTS
;
DECMEC:	.BYTE	1,4,5,6		;DOLLAR MECH MULTIPLIERS
;
;X POSITION FOR BARS
POSIX:	.BYTE -22,-63,1F,-63,-22,1F,-22
;Y POSITION
POSIY:	.BYTE -0C,-28,-28,10,-28,10,10

BADNWS:	.BYTE 56.,52.,54.,30.
	.PAGE
	.SBTTL CHECKER BOARD
STST10:	JSR VGCNTR
	LDA #1
	JSR VGSCA1
	LDX #07			;NINE BARS HORIZ
	STX TEMP2
	JSR VGCNTR
	BEGIN
	LDY TEMP2
	LDA #-512./4
	LDX Y,HLPOS
	JSR VGVTR5		;POSITION FOR THIS LINE
	LAL HLINE9
	LXH HLINE8		;DRAW LINE AND CENTER
	JSR VGADD2
	DEC TEMP2
	MIEND
	LDX #11.		;THIRTEEN BARS VERT
	STX TEMP2
;	JSR VGCNTR		;LAST LINE ABOVE CENTERED
	BEGIN
	LDY TEMP2
	LDA Y,VLPOS
	LDX #+384./4
	JSR VGVTR5
	LAL VLINE9
	LXH VLINE8
	JSR VGADD2
	DEC TEMP2
	MIEND
	LDA GAMSEL
	IFMI
	ASL TEMPA		;DEBOUNCE COLOR SWITCH
	IFCS
	INC TEMP8		;NEXT COLOR
	ENDIF
	ELSE
	LDA #20			;RESET NOT PUSHED
	STA TEMPA
	ENDIF
	RTS
HLPOS:	.BYTE -298./4,-213./4,-128./4,-43./4,43./4
	.BYTE 128./4,213./4,298./4
VLPOS:	.BYTE -433./4,-354./4,-276./4,-197./4,-118./4
	.BYTE -40./4,40./4,118./4,197./4,276./4
	.BYTE 354./4,433./4
	.PAGE
	.SBTTL DISPLAY OPTION SWITCHES
;
;		
OPTND:	JSR	VGCNTR		;CENTER BEAM
	LDA	I,-20./4
	LDX	I,4D
	JSR	VGVTR5		;POSITION BEAM
	LDA	I,1
	JSR	VGHEX		;1 FOR LEFT COIN MECH
	STA POTGO+POKEY2
	LDA ALLPOT+POKEY2	;READ 'OPTN3'
	STA $CMODE
	AND	I,10
	LSR
	LSR
	LSR
	LSR			;0 OR 1
	ADC	I,1		;1 OR 2
	JSR	VGHEX		;PUT CENTER MECH VALUE
	STA POTGO+POKEY2
	LDA ALLPOT+POKEY2	;READ 'OPTN3'
	AND	I,0C
	LSR
	LSR
	TAX
	LDA	AX,DECMEC
	JSR	VGHEX		;DOLLAR MECH VALUE
	LDA #-58.
	LDX #-18.
	JSR VGVTR5		;POSITION FOR NEXT LINE
	LDA #-1
	STA TEMP3		;FLAG FOR POSITION
OPTN2:	LDX	I,15.
	STX	TEMP2
	STA POTGO+POKEY1	;READ OPTN1
	LDA ALLPOT+POKEY1
	STA	TEMP2+1
	STA POTGO+POKEY2
	LDA ALLPOT+POKEY2	;READ 'OPTN3'
	BEGIN
	PHA
	AND	I,1
	JSR	VGHEX		;DISPLAY 0 OR 1
	LSR	TEMP2+1
	PLA
	ROR
	DEC	TEMP2
	MIEND
	LDY #09F		;GUESS MAIN TEST
	BIT TEMP3
	IFMI
	LDY #09E
	ENDIF
	TYA
	LDX #0F8		;POSITION FOR NEXT LINE
	JSR VGVTR5
	LDX #7			;DO ALL OTHER SWITCHES
	STX TEMP2
	BEGIN
	LDX TEMP2
	LDA X,INPUT
	ROL
	ROL			;LOOK AT FIRST BIT
	PHP			;SAVE COPY OF CARRY
	AND #01
	JSR VGHEX
	PLP
	ROL
	AND #01
	JSR VGHEX
	DEC TEMP2
	MIEND
	LDY #09F
	BIT TEMP3
	IFMI
	LDY #09E
	ENDIF
	TYA
	LDX #0F8
	JSR VGVTR5		;POSITION FOR NEXT LINE
	LDX #5
	STX TEMP2
	LDA STSTSW		;REMAINING SWITCHES
	AND #3F			;BIT 6 AND 7 DONT CARE
	BEGIN
	PHA
	AND #01
	JSR VGHEX
	PLA
	ROR
	DEC TEMP2
	MIEND
	LDX #09			;FILL REST WITH 'X'
	STX TEMP2
	BEGIN
	LDA #22
	JSR VGHEX1
	DEC TEMP2
	MIEND
	RTS
	.SBTTL	SWITCH TEST (BEEP)

SWTST:	LDX #03
	LDY #0
	STY TEMPA
	BEGIN
	LDA X,INPUT
	ASL
	ROL TEMPA
	ASL
	ROL TEMPA
	DEX
	MIEND
	LDA TEMPA
	IFNE
	ADC #40
	STA POKEY1+CHAN1F
	LDY #0A4
	ENDIF
	STY POKEY1+CHAN1V
	LDY #0
	STY TEMPA
	LDA INPUT+4		;BOTH BITS HERE
	ASL
	ROL TEMPA
	ASL
	ROL TEMPA
	ASL INPUT+5
	ROL TEMPA
	ASL INPUT+6		;ONLY BIT 7 HERE
	ROL TEMPA
	LDA $COINA
	EOR #0FF		;BACKWARDS
	LSR
	ROL TEMPA
	LSR
	ROL TEMPA
	LSR
	ROL TEMPA
	LDA TEMPA
	IFNE
	ADC #40
	STA POKEY1+CHAN1F+2
	LDY #0A4
	ENDIF
	STY POKEY1+CHAN1V+2
	RTS
;
;
	.PAGE
	.SBTTL MAIN LINE
DIAGM:				;MAIN LINE DIAG LOOP
	BEGIN
10$:	LDX #18
	BEGIN
	BEGIN
	BIT HALT		;16MS WAIT
	MIEND
	BEGIN
	BIT HALT
	PLEND
	DEX
	MIEND
	INC FRAME
	BEGIN
	BIT HALT		;STOPPED?
	VSEND
VGLD:	LDA #VECRAM&0FF		;RELOAD VG
	STA VGLIST
	LDA #VECRAM&0FF00/100
	STA VGLIST+1
	LDA $LAM
	EOR #0FF
	AND #$LMBIT!DIAGBIT	;SWITCH PUSHED?
	IFNE
	ASL TEMP9
	IFCS			;PRESSED LONG ENOUGH?
	LDA GAMSEL
	IFMI			;YES
	JSR INISOU		;SOUND OFF
	JMP XYINIT		;GONE TO SIG ANAL NOT TO RETURN
	ENDIF
	INC TESTNM
	INC TESTNM		;NEXT TEST
	LDA #0
	LDX #06
	BEGIN
	STA X,POKEY1+CHAN1V
	STA X,POKEY2+CHAN1V
	DEX
	DEX
	MIEND
	ENDIF
	ELSE
	LDA #20
	STA TEMP9		;NOT PRESSED, RESTART TIMER
	ENDIF
	LDA TESTNM
	CMP #0A			;SPECIAL COLORS HERE
	IFEQ
	LDA TEMP8
	AND #07
	IFEQ
	LDA #01
	ENDIF
	ORA #0C0		;INTENSITY
	TAY
	ELSE
	LDY #WHITE+0A0		;PUT UP WHITE BOX
	ENDIF
	JSR VGSTAT
	LAL FRCFL9
	LXH FRCFL8
	JSR VGADD2		;DO BOX
	JSR DOSTATE		;DO THIS ROUTINE
	JSR VGCNTR
	JSR VGHALT		;CENTER AND HALT
	STA GOADD		;START DISPLAY	
	STA WTCHDG
	LDA STSTSW		;STILL SELF TEST?
	AND #ST.BIT
	NEEND
WDRST:	BNE WDRST		;WATCH-DOG RESET FOR EXIT
	.PAGE
	.SBTTL DO-CASE ROUTINE
SFTJSR:
	.WORD STEST5-1		;EAROM ERROR CORRECTION
	.WORD STEST6-1		;DISPLAY SWITCHES & REPORT PROBLEMS
	.WORD STEST7-1		;CROSS HATCH $ ALPHA
	.WORD STEST8-1		;SOUND & HYSTERSIS
	.WORD STEST9-1		;COLOR BARS
	.WORD STST10-1		;HATCH
SFTJSE:
DOSTATE:
	LDX TESTNM
	CPX #SFTJSE-SFTJSR	;NON VALID STATE?
	IFCS
	LDX #2
	STX TESTNM		;START OVER
	ENDIF
	LDA X,SFTJSR+1
	PHA
	LDA X,SFTJSR
	PHA
	RTS			;RTS (JUMP CASE)
	.VCTRS 8FFA,POWERON,POWERON,IRQ
	HLL65
	.END
                                                                                                                                                                                                                      