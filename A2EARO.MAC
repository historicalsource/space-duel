	.TITLE	A2EARO-AST2RD EAROM
	.RADIX 16
	.CSECT A2EARO
	.ENABL AMA
	.SBTTL	**************************
	.SBTTL	*			 *
	.SBTTL	*MODULE-A2EARO		 *
	.SBTTL	*PROGRAMMER:DAVE THEURER *
	.SBTTL	*FUNCTION:SPACE DUAL EAROM	 *
	.SBTTL  * STOLEN BY OWEN RUBIN   *
	.SBTTL	*			 *
	.SBTTL	**************************
	.NLIST
	.INCLUDE AS2DEC	;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	.INCLUDE HLL65F ;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	.LIST
	.SBTTL	GLOBLS
;ENTRY POINTS
	.GLOBL VGADD2,DIGITS,VGSTAT,VGHALT,VGVTR5,INISOU
	.GLOBL VGCNTR,VGVTR1,VGMSG5,GTOPTN,VGHEX,VGMSG4
	.GLOBL VGHEX1,VGSCAL,BIGGOOF
	.GLOBL EAUPD,EAZERO,REHIIN,WRHIIN,EAFLG,WRBOOK,EAZBOO,EAZHIS
	.GLOBL EASETUP,EACOPY,SWTST,OPTND
	.GLOBL BOOK,BKCOPY,MOVIN,DECIMAL
	.GLOBL PWRON,POWERON,STESTA,START2
;DATA
	.GLOBL ULIVESHIP,LLIVESHIP
	.GLOBL PLAYTIME,GAMES1,ONTIME,BONTIME,GTIME,GAME
	.GLOBL EAZFLG,EAREQU,EARWRQ,EAFLG
	.GLOBL EABC,EAX,EACNT,EASEL,EACS
	.GLOBB EASRCE,LANG,FRAME,ATSTG,$USE
	.GLOBL WHITE,BLUE,RED,GRBLUE,YELLOW,NROCKS
	.GLOBL BONTIME
	.GLOBL	EABAD
	.GLOBL EABUF
	.GLOBB TEMP7,TEMP8,TEMP9,TEMP1,TEMP4,TEMPB,TEMPC
	.GLOBB TEMPA,TEMP12,TEMP11,ATRACT,DIFF
	.GLOBB TEMP5,OBJ
	.GLOBL SPINT,INITL,HSCORE
	.GLOBB VGLIST
	.GLOBL WNDSE8,WNDSE9,CNTSCL
	.GLOBB $CMODE,HITS
	.SBTTL	HARDWARE DEFINITIONS
VECRAM	=2000			;VECTOR RAM	
	
				;
				;EAROM HARDWARE DEFINITIONS
				;
;EAROMRD
EAIN 	=0A00
;EAIN				;HARDWARE READ PORT
;EAROMWR
EADAL	=0F00
;EADAL				;BASE ADDRESS (STORE TO EADAL +OFFSET
				;TO ENABLE ADDRESS)
;EAROMCON
EACTL	=0E80
;EACTL				;EA CONTROL BATCH;NOT C1,C2 FUNCTION
				;0 0 READ MODE
				;1 0 WRITE MODE
				;1 1 ERASE MODE
EACK	=1			;CLOCK BIT
EAC1	=4			;C1 (INVERTED TO CHIP)
EAC2	=2			;C2
EACE	=8			;CHIP SELECT
EAERAS	=80
EAWRIT	=40
EAREAD	=20
				;

	.SBTTL	TABLE FOR RAM-EAROM TRANSFER
;
;EAROM ACCESS TABLES:OTH BYTE IN TABLE CORRESPONDS TO D0 IN EAREQU/EARWRQ
;
	.MACRO ROML ...A	;INPUT ...A=BYTES OF DATA TO ACCESS
	.BYTE ...RPC		;OFFSET INTO EAROM OF LOWEST BYTE TO ACCESS
...RPC=...RPC+...A
	.BYTE ...RPC		;OFFSET INTO EAROM OF HIGHEST BYTE TO ACCESS
...RPC=...RPC+1
	.ENDM			; (CHECKSUM)
	...RPC	=0

TEAX:				;EAROM OFFSET OF LOWEST BYTE IN GROUP
...RPC	=2			;SKIP 2 BYTES
TEACNT	=TEAX+1			;EAROM OFFSET OF HIGHEST BYTE IN GROUP (CHECKSUM)
	ROML 27.			;INITIALS
	ROML 32.			;BOOKKEEPPING
TEASRL:
TEASRH	=TEASRL+1
	.WORD EABUF
	.WORD BONTIME
	.PAGE
	.SBTTL	EAROM APPLICATIONS

				;
				;ZERO EAROM
				;
EAZBOO:
	LDA I,02
	BNE GENZER		;ZERO BOOKKEEPING ONLY
EAZHIS:
	LDA I,01
	BNE GENZER		;ZERO HI SCORES/INITIALS ONLY
EAZERO:
	LDA I,03
GENZER:	LDY I,0FF		;REQUEST ZERO EAROM
	BNE GENREQ		;REQUEST ALL BATCHES
				;REQUEST WRITE

				;
				;
WRHIIN:	LDA I,01		;WRITE HIGH SCORES & INITIALS
	BNE NOZERO
WRBOOK:	LDA I,02		;REQUEST BOOKKEEPING UPDATE
NOZERO:	LDY I,0
GENREQ:	STY EAZFLG		;DO NOT ZERO EAROM
	PHA
	ORA EAREQU
	STA EAREQU
	PLA
	ORA EARWRQ
	STA EARWRQ
	RTS
REHIIN:	LDA I,03		;READ IN EVERYTHING
	STA EAREQU
	LDA I,0
	STA EARWRQ
;	JMP EAUPD		;GO GET IT NOW.
	.PAGE
	.SBTTL	EAROM IO MAINLINE
;INPUT:EAFLG:0=NO ACTIVITY;80=ERASE;40=WRITE;20=READ
;      EAX:INDEX INTO EADAL OF LOC TO ACCESS IN EAROM
;      EABC:OFFSET FROM @EASRCE OF RAM DATA TO ACCESS
;      EACNT:EAROM OFFSET OF LAST BYTE TO MODIFY (STOP WHEN EAX>EACNT)
;
;OUTPUT:EAROM ERASED, WRITTEN TOO, OR READ
;
EAUPD:
	LDA EAFLG
	IFEQ			;EA ACTIVITY?
	LDA EAREQU		;NO.
	IFNE			;ANY REQUESTED?
	LDX I,0			;YES
	STX EABC		;ZERO SOURCE INDEX
	STX EACS		;ZERO CHECKSUM
	STX EASEL		;ZERO SELECT BIT
	LDX I,8
	SEC
	BEGIN			;LOOP UNTIL 1ST BIT ON LEFT IS FOUND
	ROR EASEL
	ASL
	DEX
	CSEND			;EXIT WHEN SET BIT IS FOUND
	LDY I,EAERAS		;DEFAULT TO ERASE/WRITE
	LDA EASEL
	AND EARWRQ
	IFEQ			;READ OR ERASE/WRITE?
	LDY I,EAREAD		;READ
	ENDIF
	STY EAFLG		;SAVE REQUEST
	LDA EASEL
	EOR EAREQU
	STA EAREQU		;TURN OFF REQUEST BIT
	TXA
	ASL
	TAX
	LDA X,TEAX		;SET UP PARAMETERS FOR EAROM WRITE
	STA EAX
	LDA X,TEACNT
	STA EACNT
	LDA X,TEASRL
	STA EASRCE
	LDA X,TEASRH
	STA EASRCE+1
	ENDIF
	ENDIF
	LDY I,0			;DESELECT CHIP
	STY EACTL
	LDA EAFLG
	IFEQ			;ANY ACTIVITY?
	RTS			;NO. EXIT
	ENDIF
	LDY EABC		;YES.
	LDX EAX
	ASL
	IFCS			;YES. R/W OR ERASE?
				;ERASE
	STA X,EADAL		;STORE ADDRESS
	LDA I,EAWRIT		;REQUEST WRITE
	STA EAFLG
	LDY #EAC1+EAC2+EACE	;ERASE & SELECT CHIP

	ELSE
	IFMI			;NO. READ OR WRITE?
	LDA I,EAERAS		;WRITE A BYTE
	STA EAFLG		;REQUEST ERASE FOR NEXT BYTE

	LDA EAZFLG
	IFNE			;ZERO EAROM?
	LDA I,0			;YES.
	STA NY,EASRCE		;CLEAR RAM TOO
	ENDIF
	LDA NY,EASRCE		;GET RAM DATA (DEFAULT)
	CPX EACNT
	IFCS
	LDA I,0			;ALL DONE. SET DONE FLAG
	STA EAFLG
	LDA EACS		;GET CHECKSUM
	ENDIF
	STA X,EADAL		;WRITE DATA
	LDY #EAC1+EACE		;SELECT WRITE MODE & CHIP SELECT
	ELSE
				;
				;READ
	LDA #EACE
	STA EACTL		;SELECT CHIP AND READ FUNCTION
	STA X,EADAL		;SELECT ADDRESS
	LDA #EACE+EACK		;
	STA EACTL		;SELECT CHIP & CLOCK & READ
	NOP
	LDA #EACE
	STA EACTL		;SELECT CHIP
	CPX EACNT
	LDA EAIN		;READ EAROM
	IFCS			;CHECKSUM?
				;YES
	EOR EACS		;MATCH CHECKSUM?
	IFNE			;
	LDA I,0			;NO.
	LDY EABC
	BEGIN			;CLEAR BAD LOCS IN RAM
	STA NY,EASRCE
	DEY
	MIEND
	LDA EASEL		;SET BAD FLAG
	ORA EABAD
	STA EABAD
	ENDIF
	LDA I,0
	STA EAFLG		;ALL DONE
	ELSE
				;NO. RAW DATA
	STA NY,EASRCE		;SAVE DATA IN RAM
	ENDIF
	LDY I,0			;DESELECT
	ENDIF
	CLC
	ADC EACS
	STA EACS		;UPDATE CHECKSUM
	INC EABC
	INC EAX
	ENDIF
	STY EACTL
	TYA
	IFEQ			;READ?
	JMP EAUPD		;YES. DO ALL READS AT ONCE
	ENDIF
	RTS
	.PAGE
	.SBTTL EAROM SETUP AND COPY
;
;
HSCNUM	=5	;NUMBER OF HIGH SCORE FOR EACH GAME
;
;TRANSFER HIGH SCORES TO BUFFER AREA FOR EAROM
;
EASETUP:
	LDX #02		;3 OF EACH
	LDY #0		;BUFFER POINTER
10$:	LDA X,HSCORE	;2 PLAYER FIGHTERS
	STA Y,EABUF
	INY
	LDA X,HSCORE+<3*HSCNUM>		;1 PLAYER FIGHTER
	STA Y,EABUF
	INY
	LDA X,HSCORE+<3*HSCNUM*2>	;2 PLAYER SPACE STATION
	STA Y,EABUF
	INY
	LDA X,HSCORE+<3*HSCNUM*3>	;1 PLAYER SPACE STATION
	STA Y,EABUF
	INY
;
;NOW INITIALS
;
	LDA X,INITL			;2 PLAYER FIGHTER
	STA Y,EABUF
	INY
	LDA X,INITL+<3*HSCNUM>		;1 PLAYER FIGHTER
	STA Y,EABUF
	INY
	LDA X,INITL+<3*HSCNUM*2>	;2 PLAYER SPACE STATION
	STA Y,EABUF
	INY
	LDA X,SPINT			;2 PLR STATION, ALT SET
	STA Y,EABUF
	INY
	LDA X,INITL+<3*HSCNUM*3>	;1 PLAYER SPACE STATION
	STA Y,EABUF
	INY
	DEX
	BPL 10$				;NEXT INITIALS
	RTS
;
;
;COPY FROM BUFFER BACK TO RAM FOR DISPLAY
;
EACOPY:
	LDX #02			;SAME COMMENTS AS ABOVE
	LDY #0
10$:	JSR CHKEA
	STA X,HSCORE
	INY
	JSR CHKEA
	STA X,HSCORE+<3*HSCNUM>
	INY
	JSR CHKEA
	STA X,HSCORE+<3*HSCNUM*2>
	INY
	JSR CHKEA
	STA X,HSCORE+<3*HSCNUM*3>
	JSR CKLTR
	STA X,INITL
	JSR CKLTR
	STA X,INITL+<3*HSCNUM>
	JSR CKLTR
	STA X,INITL+<3*HSCNUM*2>
	JSR CKLTR
	STA X,SPINT
	JSR CKLTR
	STA X,INITL+<3*HSCNUM*3>
	INY
	DEX
	BPL 10$
	LDA HSCORE
	ORA HSCORE+1	;IS THIS SCORE ALL 0?
	ORA HSCORE+2
	BNE 20$		;IF NO, OK, ELSE....
	LDA #05		;...MUST HAVE JUST CLEARED EAROM
	STA HSCORE+1	;SO REINIT TOP SCORES
	STA HSCORE+1+<3*HSCNUM>
	STA HSCORE+1+<3*HSCNUM*2>
	STA HSCORE+1+<3*HSCNUM*3>
20$:	RTS
;
;CHECK NUMBER FOR VALID NUMBER
;
CHKEA:	LDA Y,EABUF		;SAVE COPY
	PHA
	CMP #9A
	BCS 20$
	AND #0F
	CMP #0A
	BCS 20$
	PLA		;RESTORE ORIGNAL DATA
	RTS
20$:	PLA		;THROW AWAY OLD (BAD) DATA
	LDA X,SUBNUM	;REPLACE WITH SUB NUMBER
	RTS
;
SUBNUM:	.BYTE 0,5,0
;
;CHECK LETTER FOR A VALID ASCII LETTER (VECTOR GEN INDEX)
;
CKLTR:	INY		;SAVE ORIGINAL
	LDA Y,EABUF	;INPUT 
	BEQ 30$		;A BLANK IS OK
	CMP #0A		;A?
	BCC 20$
	CMP #25		;Z?
	BCC 30$
20$:	LDA X,SUBL
30$:	RTS
;
SUBL:	.BYTE 0C,0B,0E
;
;

	.PAGE
	.SBTTL BOOKKEEPPING
;
;UPDATE INFO AT END OF GAME
;
BOOK:
	SED				;ALL IN DECIMAL
	LDY #0
	LDA GAME
	ASL
	ASL				;GAME #*4
	TAX
	CLC
12$:	JSR ADGMTM
	JSR ADGMTM		;ADD IN LAST GAME TIME
	JSR ADGMTM
	JSR ADGMTM		;4 BYTES OF TIME
	LDX #0
	LDY #3
	CLC
	BEGIN
	LDA X,GTIME
	ADC X,ONTIME
	STA X,ONTIME		;THIS COUNTER WAS OFF DURING THE GAME
	INX
	DEY
	MIEND
	LDA GAME
	ASL
	CLC
	ADC GAME		;*3 FOR GAME NUMBERS
	TAX
14$:
	CLC
	LDA X,GAMES1			;UPDATE NUMBER OF GAMES PLAYED
	ADC #01
	STA X,GAMES1
	LDA X,GAMES1+1
	ADC #0
	STA X,GAMES1+1
	LDA X,GAMES1+2
	ADC #0
	STA X,GAMES1+2
	CLD
	LDX #03				;MOVE ONTIME
13$:	LDA X,ONTIME
	STA X,BONTIME			;FOR EA ROM WRITE
	DEX
	BPL 13$
	JMP WRBOOK			;START UPDATE
;
;ADD IN GAME TIME SUBROUTIME
;
ADGMTM:	LDA X,PLAYTIME
	ADC Y,GTIME
	STA X,PLAYTIME
	INX
	INY			;NEXT PLACE
	RTS
;
;COPY ONTIME FROM BUFFER BACK TO ACTIVE COUNTER
;
BKCOPY:
	SEI				;DONT LET IT UPDATE WHILE MOVING
	LDX #03
10$:	LDA X,BONTIME
	STA X,ONTIME
	DEX
	BPL 10$
	CLI
	RTS
	.PAGE
	.SBTTL ACCOUNT FOR YOURSELF
;
;CALCULATE AVERAGE GAME TIME
;
GAMIX:	.BYTE 0,3,6,9.
TIMIX:	.BYTE 0,4,8.,12.
;
AVERAG:
	LDY #3
	STY TEMPC
	BEGIN
	SED				;*********CAUTION...DECIMAL ***********
	LDY TEMPC
	LDX Y,GAMIX			;GET INDEX FOR # OF GAMES
	LDY #0
10$:	LDA X,GAMES1
	STA Y,TEMP4			;MOVE TO TEMP
	INX
	INY
	CPY #03
	BNE 10$				;DO ALL 3 BYTES
	LDY TEMPC			;RECALL GAME #
	LDX Y,TIMIX			;GET INDEX FOR SECONDS
	LDY #0				;0 GAMES?
	STY TEMPA
20$:	LDA X,PLAYTIME
	STA Y,TEMP1			;MOVE TO TEMPS
	ORA TEMPA
	STA TEMPA			;TO CHECK FOR 0 GAMES
	INX
	INY
	CPY #04				;4 BYTES
	BNE 20$
	LDY #1				;1 WILL GO TO 0 IF ERROR (BELOW)
	LDA TEMPA			;0 GAMES?
	BEQ 40$
	DEY				;Y=0
30$:	INY
	BEQ 40$
	LDA TEMP1 
	SEC
	SBC TEMP4 			;SUBTRACT # OF GAMES FROM TOTAL TIME
					;UNTILL TOTAL TIME GOES NEGATIVE
	STA TEMP1
	LDA TEMP1+1
	SBC TEMP4+1
	STA TEMP1+1
	LDA TEMP1+2
	SBC TEMP4+2
	STA TEMP1+2
	LDA TEMP1+3
	SBC #0				;COME ALONG CARRY
	STA TEMP1+3
	BPL 30$				;NOT DONE YET
40$:	CLD				;****OUT OF DECIMAL******
	DEY
	TYA			;SAVE IN A
	LDY TEMPC
	STA Y,OBJ		;A GOOD PLACE TO PUT IT NOW
	DEY
	STY TEMPC
	MIEND
	RTS
	.PAGE
	.SBTTL REPORT STATUS
;
;THIS ROUTINE WILL BE USED BY SELF TEST TO REPORT EAROM STUFF
;
STESTA:	STA STOPADD			;ALL STOP PLEASE
	JSR INISOU			;TURN OFF SOUNDS
	JSR AVERAG			;CALCULATE AVERAGES
	LDA #0
	STA ATRACT			;END ANY GAME HERE
	STA LANG			;ALWAYS ENGLISH
	STA $USE			;ALLOW COINS AGAIN
	LDX #VECRAM/100
	LDA #VECRAM&0FF
	STA VGLIST
	STX VGLIST+1
	LAL WNDSE9
	LXH WNDSE8			;PUT UP BEAM KILLER
	JSR VGADD2
	LDY #08			;'1 PLAYER'
	JSR DOMSG
	LDY #09			;'2 PLAYER'
	JSR DOMSG
	LDY #0A			;'SECONDS'
	JSR DOMSG
	LDY #0B			;'GAMES'
	JSR DOMSG
	LDY #0C			;'AVG GAME TIME'
	JSR DOMSG
	LDA #02				;PUT UP SPACE STATION / FIGHTERS
	STA TEMP7			;SAVE INDEX
10$:	JSR VGCNTR
	LDY TEMP7			;RECALL INDEX
	LDA #098
	LDX Y,Y1POS			;Y POS
	JSR VGVTR5
	LDA #10			;'F'
	JSR VGHEX1
	JSR VGCNTR
	LDY TEMP7			;RECALL INDEX
	LDA #098
	LDX Y,Y2POS			;Y POSIT
	JSR VGVTR5
	LDA #1D
	JSR VGHEX1		;'S'
	DEC TEMP7			;NEXT USE
	BPL 10$
	LDA #0A8/2
	LDX #0E2		;SO NEXT SWAP GOES TO FIRST BUFFER
	JSR VGADD2
	JSR VGHALT		;SO IT WILL HALT
ST2:	BIT HALT
	BVC ST2			;WAIT FOR HALT
	LDA A,VECRAM+1+0A6
	EOR #2
	STA A,VECRAM+1+0A6	;SWAP BUFFERS
	STA WTCHDG		;KEEP THE SLEEPING DOG SLEEPING
	LDX #VECRAM/100
	AND #02
	BNE 12$
	LDX #VECRAM/100+4
12$:	LDA #VECRAM&0FF+2+0A6
	STA VGLIST
	STX VGLIST+1
	STA GOADD
	JSR BIGGOOF		;GET DIFF READING
	ADC #0D				;MESSAGE # OFFSET
	TAY
	JSR DOMSG
	BIT CABINET
	IFMI
	JSR VGCNTR			;NEED C FOR COCKTAIL
	LDA #-68
	LDX #0
	JSR VGVTR5
	LDA #0D				;OUTPUT A 'C'
	JSR VGHEX1
	LDA #0		;GUESS NORMAL
	BIT STRT1
	IFVS			;PRESSED
	LDA #0C0
	ENDIF
	STA OUT1
	ENDIF
	JSR VGCNTR			;DISPLAY LIVES
	LDA #96
	LDX #0E
	JSR VGVTR5
	LDA #2
	JSR VGSCAL
	JSR GTOPTN
	LDA LANG
	PHA			;SAVE LANGUAGE
	LDA #0
	STA LANG		;ALWAYS ENGLISH
	LDA HITS
	STA TEMP1
	BEGIN
	LDA LLIVESHIP
	LDX ULIVESHIP
	JSR VGADD2
	DEC TEMP1
	EQEND
	LDA #1
	JSR VGSCAL		;RETURN TO NORMAL
	JSR VGCNTR		;CENTER
	LDA #-60
	LDX #0
	JSR VGVTR5		;POSITION FOR LANG LETTER
	PLA
	TAX			;LETTER INDEX
	LDA X,LANGLT		;GET LETTER
	JSR VGHEX1		;OUTPUT LETTER
	BIT TWOCMN		;2 COIN MIN??
	IFVS			;YES
	JSR VGCNTR		;POSITION FOR 2
	LDA #0D
	LDX #4D
	JSR VGVTR5
	LDA #03
	JSR VGHEX1		;DISPLAY A '2' IF 2 COIN MIN
	ENDIF
	LDY #7			;'TOTAL ON TIME'
	JSR DOMSG
	LDX #03
50$:	LDA X,ONTIME
	STA X,TEMP7
	DEX
	BPL 50$				;MOVE TO 0 PAGE FOR DISPLAY
	JSR X4			;SECONDS TIMES 4
	LDY #4
	JSR DIGIT4
;
;********************************************************************
;************ TIME DISPLAY AND CALULATIONS HERE**********************
;********************************************************************
SHOTIMS:
	LDA #3
	STA TEMPC			;WILL HOLD GAME NUMBER HERE
20$:	LDX TEMPC			;RECALL GAME NUMBER
	LDY X,TIMIX			;OFFSET INTO RAM
	LDX #0				;TRANSFER POINTER
21$:	LDA Y,PLAYTIME
	STA X,TEMP7
	INX
	INY
	CPX #4				;4 BYTES?
	BNE 21$
	JSR VGCNTR			;CENTER BEAM
	LDY TEMPC			;NEED THIS AGAIN
	LDA Y,TIPOSX			;POSTION OF TIME DISPLAY (X)
	LDX Y,TIPOSY
	JSR VGVTR5			;POSITION BEAM
	JSR X4				;TEMP * 4 FOR ACTUAL SECOND COUNT
	LDY #4				;DISPLAY 4 BYTES (8 DIGITS)
	JSR DIGIT4
	JSR VGCNTR			;READY FOR NEXT
	LDY TEMPC			;NEED THIS AGAIN
	LDA Y,GMPOSX			;GAME COUNT POSITION
	LDX Y,GMPOSY
	JSR VGVTR5			;READY FOR DISPLAY
	LDX TEMPC			;GET THIS AGAIN!
	LDY X,GAMIX			;OFFSET INTO RAM FOR THIS NUMBER
	LDX #0
22$:	LDA Y,GAMES1			;TRANSFER TO TEMP FOR DISPLAY
	STA X,TEMP7
	INX
	INY
	CPX #03				;3 BYTES?
	BNE 22$
	LDY #03
	JSR DIGIT4			;DISPLAY 3 BYTES (6 DIGITS)
	JSR VGCNTR			;GET READY FOR NEXT DISPLAY
	LDY TEMPC			;GUESS WHAT I NEED AGAIN
	LDA Y,AVPOSX			;X POSITION OF AVG GAME TIME DISPLAY
	LDX Y,AVPOSY			;Y POSIT.
	JSR VGVTR5			;READY FOR DISPLAY
	LDY TEMPC			;MAX AVG TIME IS 255 * 4 SECONDS
	LDA Y,OBJ			;GET NUMBER
	JSR DECIMAL			;CONVERT TO DECIMAL (RESULTS IN TEMP7&8)
	JSR X4				;CONVERT TO 4 COUNT SECONDS
	LDY #02
	JSR DIGIT4			;DISPLAY 2 BYTES (4 DIGITS)
	DEC TEMPC
	BMI 30$				;DONE
	JMP 20$				;DO NEXT
30$:

;
;OPTIONS.........
;
	LDY #0				;''PUSH START & SELECT'
	JSR DOMSG
;
;SELECT OPTIONS
	LDA TEMP11
	AND #03			;SELECTED OPTION 1 OF 4
	TAY
	INY			;CORRECT OPTION MESSAGE
	JSR DOMSG
	LDA STRT1			;CHECK FOR BOTH STARTS PUSHED
	ASL				;D6=STARTS,MOVE TO D7
	AND GAMSEL
	BPL NOOPTN			;NOT BOTH PUSHED
	JSR SSTATE
NOOPTN:
	LDA GAMSEL			;SELECT PUSHED?
	BPL 10$				;YES
	STA TEMP12			;NOT PUSHED, CLEAR FLAG
	BMI 20$				;*****ALWAYS*******
10$:	ORA TEMP12			;PUSHED BEFORE?
	BPL 20$				;YES, SKIP
	LDA #0
	STA TEMP12			;CLEAR FLAG
	INC TEMP11			;BUMP OPTION
20$:	LDA EAFLG			;EAROM OPERATING?
	BEQ 40$			;NO
	LDA EAZFLG			;ERASEING?
	BEQ 40$
	LDY #05			;'ERASING'
	JSR DOMSG
;
40$:	LDY #6			;'BONUS ADDRES
	JSR DOMSG
	LDA $CMODE		;DISPLAY BONUS ADDER MODE
	ROL
	ROL
	ROL
	ROL			;MOVE TO BOTTOM 3 BITS
	AND #07
	TAX
	LDA X,BONADT		;GET DISPLAY INFO
	STA TEMP7		;PUT HERE FOR DISPLAY
	CLC
	LDY #01
	JSR DIGIT4
	JSR VGCNTR		;CENTER BEAM THEN...
	LDA #0D7
	LDX #038		;...POSITION BEAM FOR...
	JSR VGVTR1
	JSR OPTND		;...OUTPUT OF OPTIONS
	JSR VGHALT
	LDA HALT
	AND #ST.BIT		;STILL TEST
	BEQ 45$
	LDA #0
	STA FRAME		;START ATTRACT OVER
	STA FRAME+1
	STA NROCKS
	STA ATSTG
	JMP PWRON		;NOT TEST
45$:	JSR SWTST		;BEEP ON SWITCH PUSHED
	JMP ST2			;CONTINUE HERE
;
;BONUS ADDRES TABLE FOR DISPLAY
;
BONADT:	.BYTE 0,12,14,24,15,0,0,0
;
;
;X AND Y POSITIONS OF FIGHTERS AND SPACE STATION NAMES
;
Y1POS:	.BYTE 0E8,0C8,0A8
Y2POS:	.BYTE 0E0,0C0,0A0
TIPOSX:	.BYTE 0F8,40,0F8,40
TIPOSY:	.BYTE 0E8,0E8,0E0,0E0
GMPOSX:	.BYTE 4,4C,4,4C
GMPOSY:	.BYTE 0C8,0C8,0C0,0C0
AVPOSX:	.BYTE 10,58,10,58
AVPOSY:	.BYTE 0A8,0A8,0A0,0A0
LANGLT:	.BYTE 0F,11,10,1D
;DIFFICULITY MESSAGE #
	.PAGE
	.SBTTL HEX TO BCD CONVERSION
;
;HEX TO BCD CONVERSION
;INPUT: A=HEX
;OUTPUT:	TEMP7=MSB	TEMP7+1=LSB
;
DECIMAL:
	STA TEMP9
	LDY #07			;BIT COUNT
	LDA #0
	STA TEMP7
	STA TEMP7+1		;CLEAR END REGS
	SED			;****WARNING--DECIMAL MODE*******
10$:	ASL TEMP9
	LDA TEMP7
	ADC TEMP7
	STA TEMP7
	LDA TEMP7+1
	ADC TEMP7+1
	STA TEMP7+1
	DEY
	BPL 10$
	CLD
	RTS
;
;DISPLAY X DIGITS FROM TEMP7 UP
;INPUT:	X=NUMBER OF DIGITS
;	TEMP7(UP)=BCD DIGITS TO DISPLAY
;
DIGIT4:	SEC			;SET 0 BALNKING
DIGIT5:	LDA #TEMP7		;POINTER TO DATA
	JMP DIGITS

;
;MULTIPLY BY 2 DECIMAL
;
X2:	CLC
	SED			;*******WARNING--DECIMAL MODE
	LDX #0
	LDY #02
10$:	LDA X,TEMP7
	ADC X,TEMP7
	STA X,TEMP7
	INX
	DEY
	BPL 10$
	CLD
	RTS
;
;TIMES 4 DECIMAL
;
X4:	JSR X2
	JMP X2
	.PAGE
;
;
	.SBTTL GOSUB CASE ROUTIME FOR PRE-TEST
;
;JUMP TABLE OF ROUTINES
;
STJMP:	.WORD POWERON-1			;DO SELF TEST
	.WORD CLRHIS-1			;CLEAR SCORES
	.WORD CLRBOO-1
	.WORD CLRERO-1
;
;GO SUB ROUTINE
SSTATE:	LDA TEMP11			;OPTION SELECTED
	AND #03
	ASL			;WORDS (X2)
	TAX
	LDA X,STJMP+1
	PHA
	LDA X,STJMP
	PHA
	RTS			;JUMP TO ROUTINE
;RTS DOES THE EQUIV. OF A JUMP, THE OTHER ROUTINE WILL RTS FOR BOTH
;
;
;CLEAR TIMES
;
CLRBOO:	JSR EAZBOO
CLRBUF:	LDA #0
	LDX #41.
10$:	STA X,ONTIME		;CLEAR RAM ALSO
	STA X,OBJ		;CLEAR TEMP BUFFER TOO
	DEX
	BPL 10$
	RTS
;
;CLEAR BOTH
;
CLRERO:	JSR EAZERO
	JSR CLRBUF
	JMP MOVIN		;RECOPY DEFAULT INITIALS
;
;CLEAR SCORES
;
CLRHIS:	JSR EAZHIS
	JMP MOVIN		;RECOPY DEFAULT INITIALS
	.SBTTL DOMSG -- DO CORRECT MESSAGE AND COLOR
;
;PASS X = MESSAGE NUMBER IN THIS ROUTINE
;
DOMSG:	STY TEMP5		;SAVE Y
	JSR VGCNTR
	LDY TEMP5
	LDA Y,X3POS		;POSITION MESSAGE
	LDX Y,Y3POS
	JSR VGVTR5		;POSITION
	LDX TEMP5		;DO COLOR MESSAGE
	LDA X,MSGCOL		;COLOR
	LDY X,MSGNUM		;MESSAGE NUMBER
	JMP VGMSG4		;(EXIT)
;
; MESSAGES
;0	PUSH START AND SELECT
;1	FOR SELF TEST
;2	TO CLEAR SCORES
;3	TO CLEAR TIME
;4	TO CLEAR SCORES AND TIMES
;5	ERASING
;6	BONUS ADDRER
;7	TOTAL ON TIME
;8	1 PLAYER
;9	2 PLAYERS
;0A	SECONDS
;0B	GAMES
;0C	AVG TIME
;0D	EASY
;0E	NORMAL
;0F	MEDIUM
;10	HARD
;
X3POS:	.BYTE -200./4,-80./4,-112./4,-96./4,-240./4
	.BYTE -64./4,-144./4,-256./4,256./4,-16./4
	.BYTE -464./4,-464./4,-464./4,-8,-8,-8,-8
Y3POS:	.BYTE 80./4,48./4,48./4,48./4,48./4
	.BYTE 112./4,272./4,144./4,0,0
	.BYTE -64./4,-192./4,-320./4,56,56,56,56
MSGCOL:	.BYTE BLUE+0E0,BLUE+0E0,BLUE+0E0,BLUE+0E0,BLUE+0E0
	.BYTE RED+0E0,GRBLUE+0E0,YELLOW+0E0,WHITE+0E0,WHITE+0E0
	.BYTE WHITE+0E0,WHITE+0E0,WHITE+0E0,WHITE+0E0,WHITE+0E0
	.BYTE WHITE+0E0,WHITE+0E0
;MESSAGE NUMBER IN REAL MESSAGE ROUTINE
MSGNUM:	.BYTE 22,1D,1E,1F,20,21,23,24,0B,0C,1A,1B,1C
	.BYTE 19,10,11,25
	HLL65
	.END

                                                                                                                                                                                                                                                                                                                                                                                                                                                                         